// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OpenWeb3Lib
import AVFoundation
import Accelerate
import AddressBook
import AudioToolbox
import Contacts
import CoreGraphics
import CoreHaptics
import CoreMedia
import CoreText
import Darwin
import Foundation
import LocalAuthentication
import MapKit
import Network
import ObjectiveC
@_exported import OpenWeb3Lib
import Swift
import UIKit.UIGestureRecognizerSubclass
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol BridgeProvider {
  func onWebViewCreated(_ webView: WebKit.WKWebView)
  func onWebViewDestroy()
  func onWebPageLoaded()
  var navigationDelegate: () -> (any WebKit.WKNavigationDelegate)? { get set }
  var uIDelegate: () -> (any WebKit.WKUIDelegate)? { get set }
}
public protocol BridgeProviderFactory {
  func buildBridgeProvider(id: Swift.String?, type: Swift.String, url: Swift.String?) -> (any OpenWeb3Lib.BridgeProvider)?
}
public protocol IResourceProvider {
  func isDark() -> Swift.Bool
  func getString(key: Swift.String) -> Swift.String?
  func getString(key: Swift.String, withValues values: [any Swift.CVarArg]) -> Swift.String
  func getColor(key: Swift.String) -> UIKit.UIColor
  func getUserInterfaceStyle() -> UIKit.UIUserInterfaceStyle
}
public let KEY_BG_COLOR: Swift.String
public let KEY_SECONDARY_BG_COLOR: Swift.String
public let KEY_TEXT_COLOR: Swift.String
public let KEY_HINT_COLOR: Swift.String
public let KEY_LINK_COLOR: Swift.String
public let KEY_BUTTON_COLOR: Swift.String
public let KEY_BUTTON_TEXT_COLOR: Swift.String
public let KEY_HEADER_BG_COLOR: Swift.String
public let KEY_ACCENT_TEXT_COLOR: Swift.String
public let KEY_SECTION_BG_COLOR: Swift.String
public let KEY_SECTION_HEADER_TEXT_COLOR: Swift.String
public let KEY_SUBTITLE_TEXT_COLOR: Swift.String
public let KEY_DESTRUCTIVE_TEXT_COLOR: Swift.String
public let KEY_SECTION_SEPARATOR_COLOR: Swift.String
public let KEY_ITEM_CHECK_FILL_COLOR: Swift.String
public let KEY_ITEM_CHECK_STROKE_COLOR: Swift.String
public let KEY_ITEM_CHECK_FOREGROUND_COLOR: Swift.String
public let KEY_ITEM_CHECK_DISCLOSURE_ARROW_COLOR: Swift.String
public let KEY_ITEM_BLOCKS_BACKGROUND_COLOR: Swift.String
public let KEY_ITEM_SWITCH_FRAME_COLOR: Swift.String
public let KEY_ITEM_SWITCH_HANDLE_COLOR: Swift.String
public let KEY_ITEM_SWITCH_CONTENT_COLOR: Swift.String
public let KEY_ITEM_SWITCH_POSITIVE_COLOR: Swift.String
public let KEY_ITEM_SWITCH_NEGATIVE_COLOR: Swift.String
public let KEY_TAB_BAR_BACKGROUND_COLOR: Swift.String
public let KEY_TAB_BAR_SEPARATOR_COLOR: Swift.String
public let KEY_TAB_BAR_ICON_COLOR: Swift.String
public let KEY_TAB_BAR_SELECTED_ICON_COLOR: Swift.String
public let KEY_TAB_BAR_TEXT_COLOR: Swift.String
public let KEY_TAB_BAR_SELECTED_TEXT_COLOR: Swift.String
public let KEY_TAB_BAR_BADGE_BACKGROUND_COLOR: Swift.String
public let KEY_TAB_BAR_BADGE_STROKE_COLOR: Swift.String
public let KEY_TAB_BAR_BADGE_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BUTTON_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_DISABLED_BUTTON_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_PRIMARY_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SECONDARY_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_CONTROL_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_ACCENT_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BLURRED_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_OPAQUE_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEPARATOR_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BADGE_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BADGE_STROKE_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BADGE_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_FOREGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_DIVIDER_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_CLEAR_BUTTON_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_CLEAR_BUTTON_FOREGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_DIM_COLOR: Swift.String
public let KEY_ACTION_SHEET_OPAQUE_ITEM_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_ITEM_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_OPAQUE_ITEM_HIGHLIGHTED_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_ITEM_HIGHLIGHTED_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_OPAQUE_ITEM_SEPARATOR_COLOR: Swift.String
public let KEY_ACTION_SHEET_STANDARD_ACTION_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_DESTRUCTIVE_ACTION_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_DISABLED_ACTION_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_PRIMARY_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_SECONDARY_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_CONTROL_ACCENT_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_HOLLOW_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_BORDER_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_PLACEHOLDER_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_CLEAR_BUTTON_COLOR: Swift.String
public let KEY_ACTION_SHEET_CHECK_CONTENT_COLOR: Swift.String
public struct CompletionRequest {
  @_hasMissingDesignatedInitializers public class Builder {
    public func promptId(_ promptId: Swift.Int) -> OpenWeb3Lib.CompletionRequest.Builder
    public func args(key: Swift.String, value: Swift.String) -> OpenWeb3Lib.CompletionRequest.Builder
    public func build() -> OpenWeb3Lib.CompletionRequest
    @objc deinit
  }
}
public protocol AIService {
  func load() -> Swift.Bool
  func unLoad()
  func completion(_ req: OpenWeb3Lib.CompletionRequest)
}
public protocol BotService {
  func load() -> Swift.Bool
  func unload()
  func getBotInfo(botId: Swift.String) async -> Swift.Result<OpenWeb3Lib.BotInfo, OpenWeb3Lib.ApiError>
}
public enum ApiError : Swift.Error {
  case waitForSetup
  case authInvalid
  case invalidURL
  case encodingFailed
  case invalidResponse
  case requestFailed(statusCode: Swift.Int, message: Swift.String?)
  case invalidData
  case decodingFailed
  case invalidParameter(Swift.String)
}
public struct BotInfo : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let token: Swift.String?
  public let userId: Swift.String?
  public let provider: Swift.String?
  public let identifier: Swift.String?
  public let bio: Swift.String?
  public let avatarUrl: Swift.String?
  public let commands: [OpenWeb3Lib.Command]?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Command : Swift.Codable {
  public let command: Swift.String?
  public let type: Swift.String?
  public let description: Swift.String?
  public let options: [OpenWeb3Lib.Option]?
  public let scope: OpenWeb3Lib.Scope?
  public let languageCode: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Option : Swift.Codable {
  public let name: Swift.String?
  public let type: Swift.String?
  public let required: Swift.Bool?
  public let description: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Scope : Swift.Codable {
  public let type: Swift.String?
  public let chatId: Swift.String?
  public let userId: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct PeerParams : Swift.Codable {
  public let userId: Swift.String?
  public let roomId: Swift.String?
  public let accessHash: Swift.String?
  public init(userId: Swift.String?, roomId: Swift.String?, accessHash: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DAppDto : Swift.Codable {
  public let id: Swift.String?
  public let title: Swift.String?
  public let url: Swift.String?
  public let description: Swift.String?
  public let iconUrl: Swift.String?
  public let bannerUrl: Swift.String?
  public let createAt: Swift.Int?
  public let updateAt: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppSettings : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MiniAppDto : Swift.Codable {
  public let id: Swift.String?
  public let identifier: Swift.String?
  public let title: Swift.String?
  public let description: Swift.String?
  public let iconUrl: Swift.String?
  public let bannerUrl: Swift.String?
  public let botId: Swift.String?
  public let botName: Swift.String?
  public let createAt: Swift.Int?
  public let updateAt: Swift.Int?
  public let options: OpenWeb3Lib.AppSettings?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MiniAppResponse : Swift.Codable {
  public let items: [OpenWeb3Lib.MiniAppDto]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class WebAppLaunchParameters {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DAppLaunchParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func parentVC(_ parentVC: UIKit.UIViewController) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func id(_ id: Swift.String?) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func bridgeProvider(_ bridgeProvider: (any OpenWeb3Lib.BridgeProvider)?) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func getActionBarNode(_ getActionBarNode: @escaping (@escaping () -> Swift.Void, @escaping () -> Swift.Void) -> (CoreFoundation.CGSize, UIKit.UIView)?) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func completion(_ completion: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func willDismiss(_ willDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func didDismiss(_ didDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func build() throws -> OpenWeb3Lib.DAppLaunchParameters
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebAppPreloadParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func botId(_ botId: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func botName(_ botName: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func miniAppId(_ miniAppId: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func miniAppName(_ miniAppName: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func startParams(_ startParams: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func bridgeProvicer(_ bridgeProvicer: (any OpenWeb3Lib.BridgeProvider)?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func peer(_ peer: OpenWeb3Lib.PeerParams?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func build() -> OpenWeb3Lib.WebAppPreloadParameters
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebAppLaunchWithDialogParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func parentVC(_ parentVC: UIKit.UIViewController) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func botId(_ botId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func botName(_ botName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func miniAppId(_ miniAppId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func miniAppName(_ miniAppName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func startParams(_ startParams: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useWeChatStyle(_ useWeChatStyle: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func isLocalSource(_ isLocalSource: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func isSystem(_ isSystem: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useModalStyle(_ useModalStyle: Swift.Bool?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useCustomNavigation(_ useCustomNavigation: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func isLaunchUrl(_ isLaunchUrl: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useCache(_ useCache: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func autoExpand(_ autoExpand: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func peer(_ peer: OpenWeb3Lib.PeerParams?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func bridgeProvider(_ bridgeProvider: any OpenWeb3Lib.BridgeProvider) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func getActionBarNode(_ getActionBarNode: @escaping (@escaping () -> Swift.Void, @escaping () -> Swift.Void) -> (CoreFoundation.CGSize, UIKit.UIView)?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func completion(_ completion: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func willDismiss(_ willDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func didDismiss(_ didDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func build() throws -> OpenWeb3Lib.WebAppLaunchWithDialogParameters
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebAppLaunchWithParentParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func parentVC(_ parentVC: UIKit.UIViewController) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func botId(_ botId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func botName(_ botName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func miniAppId(_ miniAppId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func miniAppName(_ miniAppName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func startParams(_ startParams: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func useWeChatStyle(_ useWeChatStyle: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func isLocalSource(_ isLocalSource: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func isSystem(_ isSystem: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func useCache(_ useCache: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func autoExpand(_ autoExpand: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func peer(_ peer: OpenWeb3Lib.PeerParams?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func bridgeProvider(_ bridgeProvider: any OpenWeb3Lib.BridgeProvider) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func getActionBarNode(_ getActionBarNode: @escaping (@escaping () -> Swift.Void, @escaping () -> Swift.Void) -> (CoreFoundation.CGSize, UIKit.UIView)?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func getInputContainerNode(_ getInputContainerNode: @escaping () -> (CoreFoundation.CGFloat, UIKit.UIView?)? = { return nil }) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func completion(_ completion: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func willDismiss(_ willDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func didDismiss(_ didDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func build() throws -> OpenWeb3Lib.WebAppLaunchWithParentParameters
    @objc deinit
  }
  @objc deinit
}
public protocol IMiniApp : AnyObject {
  func reloadPage()
  func requestDismiss(_ force: Swift.Bool) -> Swift.Bool
  func getVC() -> UIKit.UIViewController?
  func getShareUrl() async -> Swift.String?
  func getShareInfo() async -> OpenWeb3Lib.ShareDto?
  func isSystem() -> Swift.Bool
  func minimization()
  func maximize()
  func clickMenu(type: Swift.String)
}
public protocol IAppDelegate {
  var qrcodeProvider: (any OpenWeb3Lib.IMiniApp, Swift.String?, @escaping (Swift.String?) -> Swift.Void) -> UIKit.UINavigationController? { get }
  var customMethodProvider: (any OpenWeb3Lib.IMiniApp, Swift.String, Swift.String?, @escaping (Swift.String?) -> Swift.Void) -> Swift.Bool { get }
  var attachActionProvider: (any OpenWeb3Lib.IMiniApp, Swift.String?, Swift.String) -> Swift.Void { get }
  var schemeProvider: (any OpenWeb3Lib.IMiniApp, Swift.String) async -> Swift.Bool { get }
  func switchInlineQuery(app: any OpenWeb3Lib.IMiniApp, query: Swift.String, types: [Swift.String]) async -> Swift.Bool
  func shareLinkOrText(linkOrText: Swift.String)
  func checkPeerMessageAccess(app: any OpenWeb3Lib.IMiniApp) async -> Swift.Bool
  func requestPeerMessageAccess(app: any OpenWeb3Lib.IMiniApp) async -> Swift.Bool
  func sendMessageToPeer(app: any OpenWeb3Lib.IMiniApp, content: Swift.String?) -> Swift.Bool
  func requestPhoneNumberToPeer(app: any OpenWeb3Lib.IMiniApp) async -> Swift.Bool
  func canUseBiometryAuth(app: any OpenWeb3Lib.IMiniApp) -> Swift.Bool
  func updateBiometryToken(app: any OpenWeb3Lib.IMiniApp, token: Swift.String?, reason: Swift.String?) async -> (Swift.Bool, Swift.String?)
  func openBiometrySettings(app: any OpenWeb3Lib.IMiniApp) async
  func onApiError(error: OpenWeb3Lib.ApiError)
  func onMinimization(app: any OpenWeb3Lib.IMiniApp)
  func onMaximize(app: any OpenWeb3Lib.IMiniApp)
  func onMoreButtonClick(app: any OpenWeb3Lib.IMiniApp, menus: [Swift.String]) -> Swift.Bool
  func onClickMenu(app: any OpenWeb3Lib.IMiniApp, type: Swift.String)
}
public struct ShareDto {
  public let type: Swift.String
  public let id: Swift.String?
  public let identifier: Swift.String?
  public let title: Swift.String?
  public let url: Swift.String?
  public let description: Swift.String?
  public let iconUrl: Swift.String?
  public let bannerUrl: Swift.String?
}
@_hasMissingDesignatedInitializers public class AppConfig {
  public class Builder {
    public init(appName: Swift.String, webAppName: Swift.String, mePath: [Swift.String], window: UIKit.UIWindow, appDelegate: any OpenWeb3Lib.IAppDelegate)
    public func languageCode(_ languageCode: Swift.String) -> OpenWeb3Lib.AppConfig.Builder
    public func userInterfaceStyle(_ userInterfaceStyle: UIKit.UIUserInterfaceStyle) -> OpenWeb3Lib.AppConfig.Builder
    public func maxCachePage(_ maxCachePage: Swift.Int) -> OpenWeb3Lib.AppConfig.Builder
    public func resourceProvider(_ resourceProvider: (any OpenWeb3Lib.IResourceProvider)?) -> OpenWeb3Lib.AppConfig.Builder
    public func bridgeProviderFactory(_ bridgeProviderFactory: (any OpenWeb3Lib.BridgeProviderFactory)?) -> OpenWeb3Lib.AppConfig.Builder
    public func floatWindowSize(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> OpenWeb3Lib.AppConfig.Builder
    public func build() -> OpenWeb3Lib.AppConfig
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MiniAppService : ObjectiveC.NSObject {
  open func load() -> Swift.Bool
  open func unload()
  open func batchGetMiniApps(appIds: [Swift.String]) async -> Swift.Result<OpenWeb3Lib.MiniAppResponse, OpenWeb3Lib.ApiError>
  open func getMiniAppInfoById(appId: Swift.String) async -> Swift.Result<OpenWeb3Lib.MiniAppDto, OpenWeb3Lib.ApiError>
  open func getMiniAppInfoByNames(botIdOrName: Swift.String, appName: Swift.String) async -> Swift.Result<OpenWeb3Lib.MiniAppDto, OpenWeb3Lib.ApiError>
  open func getDAppInfoById(dappId: Swift.String) async -> Swift.Result<OpenWeb3Lib.DAppDto, OpenWeb3Lib.ApiError>
  open func setup(config: OpenWeb3Lib.AppConfig, complete: @escaping () -> Swift.Void)
  open func updateTheme(userInterfaceStyle: UIKit.UIUserInterfaceStyle)
  open func updateLanguage(languageCode: Swift.String)
  open func preload(config: OpenWeb3Lib.WebAppLaunchParameters)
  open func launch(config: OpenWeb3Lib.WebAppLaunchParameters) -> (any OpenWeb3Lib.IMiniApp)?
  open func setupInTestDelegate(appDelegate: any OpenWeb3Lib.IAppDelegate)
  open func clearCache()
  open func dismissAll()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OpenPlatformPlugin : OpenWeb3Lib.Plugin {
  open func load() -> Swift.Bool
  open func unLoad()
  open func getName() -> Swift.String
  open func signIn(verifier: Swift.String, isDev: Swift.Bool = false, idTokenProvider: @escaping () async -> Swift.String?, onVerifierSuccess: @escaping () -> Swift.Void, onVerifierFailure: @escaping (Swift.Int, Swift.String?) -> Swift.Void)
  open func signOut()
  open func isVerified() -> Swift.Bool
  open func getBotService() -> (any OpenWeb3Lib.BotService)?
  open func getMiniAppService() -> OpenWeb3Lib.MiniAppService?
  @objc deinit
}
precedencegroup PipeRight {
  associativity: left
  higherThan: DefaultPrecedence
}
infix operator |> : PipeRight
#if compiler(>=5.3) && $RetroactiveAttribute
extension UIKit.UIKeyModifierFlags : @retroactive Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
}
#else
extension UIKit.UIKeyModifierFlags : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
}
#endif
public enum PluginName : Swift.String {
  case openPlatform
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class PluginsManager {
  public static func getInstance() -> OpenWeb3Lib.PluginsManager
  public func registerPlugin(_ plugin: any OpenWeb3Lib.Plugin)
  public func unregisterPlugin(_ pluginName: Swift.String)
  public func getPlugin<T>(_ pluginName: Swift.String) -> T? where T : OpenWeb3Lib.Plugin
  public func auth(verifier: Swift.String, idTokenProvider: (Swift.String) -> Swift.Void)
  @objc deinit
}
public protocol Plugin {
  func load() -> Swift.Bool
  func unLoad()
  func getName() -> Swift.String
}
extension OpenWeb3Lib.PluginName : Swift.Equatable {}
extension OpenWeb3Lib.PluginName : Swift.Hashable {}
extension OpenWeb3Lib.PluginName : Swift.RawRepresentable {}
