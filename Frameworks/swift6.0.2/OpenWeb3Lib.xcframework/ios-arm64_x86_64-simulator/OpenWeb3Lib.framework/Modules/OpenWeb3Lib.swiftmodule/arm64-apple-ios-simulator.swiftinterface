// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OpenWeb3Lib
import AVFoundation
import Accelerate
import AddressBook
import AudioToolbox
import Contacts
import CoreGraphics
import CoreHaptics
import CoreMedia
import CoreText
import Darwin
import Foundation
import LocalAuthentication
import MapKit
import Network
import ObjectiveC
@_exported import OpenWeb3Lib
import OpenWeb3LibPrivite
import Swift
import UIKit.UIGestureRecognizerSubclass
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public func delay<T, E>(_ timeout: Swift.Double, queue: OpenWeb3Lib.Queue) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func suspendAwareDelay<T, E>(_ timeout: Swift.Double, granularity: Swift.Double = 4.0, queue: OpenWeb3Lib.Queue) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func timeout<T, E>(_ timeout: Swift.Double, queue: OpenWeb3Lib.Queue, alternate: OpenWeb3Lib.Signal<T, E>) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public enum NoValue {
}
public enum NoError {
}
public func identity<A>(a: A) -> A
precedencegroup PipeRight {
  associativity: left
  higherThan: DefaultPrecedence
}
infix operator |> : PipeRight
public func |> <T, U>(value: T, function: ((T) -> U)) -> U
final public class Signal<T, E> {
  public init(_ generator: @escaping (OpenWeb3Lib.Subscriber<T, E>) -> any OpenWeb3Lib.Disposable)
  final public func start(next: ((T) -> Swift.Void)! = nil, error: ((E) -> Swift.Void)! = nil, completed: (() -> Swift.Void)! = nil) -> any OpenWeb3Lib.Disposable
  final public func startStandalone(next: ((T) -> Swift.Void)! = nil, error: ((E) -> Swift.Void)! = nil, completed: (() -> Swift.Void)! = nil) -> any OpenWeb3Lib.Disposable
  final public func startStrict(next: ((T) -> Swift.Void)! = nil, error: ((E) -> Swift.Void)! = nil, completed: (() -> Swift.Void)! = nil, file: Swift.String = #file, line: Swift.Int = #line) -> any OpenWeb3Lib.Disposable
  public static func single(_ value: T) -> OpenWeb3Lib.Signal<T, E>
  public static func complete() -> OpenWeb3Lib.Signal<T, E>
  public static func fail(_ error: E) -> OpenWeb3Lib.Signal<T, E>
  public static func never() -> OpenWeb3Lib.Signal<T, E>
  @objc deinit
}
public struct InteractiveTransitionGestureRecognizerDirections : Swift.OptionSet {
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let leftEdge: OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public static let rightEdge: OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public static let leftCenter: OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public static let rightCenter: OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public static let down: OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public static let left: OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public static let right: OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public typealias ArrayLiteralElement = OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public typealias Element = OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections
  public typealias RawValue = Swift.Int
}
public enum InteractiveTransitionGestureRecognizerEdgeWidth {
  case constant(CoreFoundation.CGFloat)
  case widthMultiplier(factor: CoreFoundation.CGFloat, min: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat)
}
@objc @_Concurrency.MainActor @preconcurrency public class InteractiveTransitionGestureRecognizer : UIKit.UIPanGestureRecognizer {
  @_Concurrency.MainActor @preconcurrency public init(target: Any?, action: ObjectiveC.Selector?, allowedDirections: @escaping (CoreFoundation.CGPoint) -> OpenWeb3Lib.InteractiveTransitionGestureRecognizerDirections, edgeWidth: OpenWeb3Lib.InteractiveTransitionGestureRecognizerEdgeWidth = .constant(16.0))
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func reset()
  @_Concurrency.MainActor @preconcurrency public func cancel()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @objc deinit
}
public protocol Disposable : AnyObject {
  func dispose()
}
final public class StrictDisposable : OpenWeb3Lib.Disposable {
  public init(_ disposable: any OpenWeb3Lib.Disposable, file: Swift.String, line: Swift.Int)
  @objc deinit
  final public func dispose()
}
extension OpenWeb3Lib.Disposable {
  public func strict(file: Swift.String = #file, line: Swift.Int = #line) -> any OpenWeb3Lib.Disposable
}
public let EmptyDisposable: any OpenWeb3Lib.Disposable
final public class ActionDisposable : OpenWeb3Lib.Disposable {
  public init(action: @escaping () -> Swift.Void)
  @objc deinit
  final public func dispose()
}
final public class MetaDisposable : OpenWeb3Lib.Disposable {
  public init()
  @objc deinit
  final public func set(_ disposable: (any OpenWeb3Lib.Disposable)?)
  final public func dispose()
}
final public class DisposableSet : OpenWeb3Lib.Disposable {
  public init()
  @objc deinit
  final public func add(_ disposable: any OpenWeb3Lib.Disposable)
  final public func remove(_ disposable: any OpenWeb3Lib.Disposable)
  final public func removeLast()
  final public func dispose()
}
final public class DisposableDict<T> : OpenWeb3Lib.Disposable where T : Swift.Hashable {
  public init()
  @objc deinit
  final public func set(_ disposable: (any OpenWeb3Lib.Disposable)?, forKey key: T)
  final public func dispose()
}
public struct Font {
  public enum Design {
    case regular
    case serif
    case monospace
    case round
    case camera
    public static func == (a: OpenWeb3Lib.Font.Design, b: OpenWeb3Lib.Font.Design) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Traits : Swift.OptionSet {
    public var rawValue: Swift.Int32
    public init(rawValue: Swift.Int32)
    public init()
    public static let italic: OpenWeb3Lib.Font.Traits
    public static let monospacedNumbers: OpenWeb3Lib.Font.Traits
    public typealias ArrayLiteralElement = OpenWeb3Lib.Font.Traits
    public typealias Element = OpenWeb3Lib.Font.Traits
    public typealias RawValue = Swift.Int32
  }
  public enum Width {
    case standard
    case condensed
    case compressed
    case expanded
    public static func == (a: OpenWeb3Lib.Font.Width, b: OpenWeb3Lib.Font.Width) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Weight {
    case regular
    case thin
    case light
    case medium
    case semibold
    case bold
    case heavy
    public static func == (a: OpenWeb3Lib.Font.Weight, b: OpenWeb3Lib.Font.Weight) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func with(size: CoreFoundation.CGFloat, design: OpenWeb3Lib.Font.Design = .regular, weight: OpenWeb3Lib.Font.Weight = .regular, width: OpenWeb3Lib.Font.Width = .standard, traits: OpenWeb3Lib.Font.Traits = []) -> UIKit.UIFont
  public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func medium(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func semibold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func bold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func heavy(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func light(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func semiboldItalic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func monospace(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func semiboldMonospace(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func italicMonospace(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func semiboldItalicMonospace(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func italic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
}
extension Foundation.NSAttributedString {
  convenience public init(string: Swift.String, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor = UIColor.black, paragraphAlignment: UIKit.NSTextAlignment? = nil)
}
public enum DeviceType {
  case phone
  case tablet
  public static func == (a: OpenWeb3Lib.DeviceType, b: OpenWeb3Lib.DeviceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DeviceMetrics : Swift.CaseIterable, Swift.Equatable {
  public struct Performance {
    public let isGraphicallyCapable: Swift.Bool
  }
  case iPhone4
  case iPhone5
  case iPhone6
  case iPhone6Plus
  case iPhoneX
  case iPhoneXSMax
  case iPhoneXr
  case iPhone12Mini
  case iPhone12
  case iPhone12ProMax
  case iPhone13Mini
  case iPhone13
  case iPhone13Pro
  case iPhone13ProMax
  case iPhone14Pro
  case iPhone14ProZoomed
  case iPhone14ProMax
  case iPhone14ProMaxZoomed
  case iPad
  case iPadMini
  case iPad102Inch
  case iPadPro10Inch
  case iPadPro11Inch
  case iPadPro
  case iPadPro3rdGen
  case iPadMini6thGen
  case unknown(screenSize: CoreFoundation.CGSize, statusBarHeight: CoreFoundation.CGFloat, onScreenNavigationHeight: CoreFoundation.CGFloat?, screenCornerRadius: CoreFoundation.CGFloat)
  public static let performance: OpenWeb3Lib.DeviceMetrics.Performance
  public static var allCases: [OpenWeb3Lib.DeviceMetrics] {
    get
  }
  public init(screenSize: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat, statusBarHeight: CoreFoundation.CGFloat, onScreenNavigationHeight: CoreFoundation.CGFloat?)
  public var type: OpenWeb3Lib.DeviceType {
    get
  }
  public var screenSize: CoreFoundation.CGSize {
    get
  }
  public var screenCornerRadius: CoreFoundation.CGFloat {
    get
  }
  public func onScreenNavigationHeight(inLandscape: Swift.Bool, systemOnScreenNavigationHeight: CoreFoundation.CGFloat?) -> CoreFoundation.CGFloat?
  public func keyboardHeight(inLandscape: Swift.Bool) -> CoreFoundation.CGFloat
  public func standardInputHeight(inLandscape: Swift.Bool) -> CoreFoundation.CGFloat
  public var hasTopNotch: Swift.Bool {
    get
  }
  public var hasDynamicIsland: Swift.Bool {
    get
  }
  public var showAppBadge: Swift.Bool {
    get
  }
  public static func == (a: OpenWeb3Lib.DeviceMetrics, b: OpenWeb3Lib.DeviceMetrics) -> Swift.Bool
  public typealias AllCases = [OpenWeb3Lib.DeviceMetrics]
}
public enum NavigationStatusBarStyle {
  case black
  case white
  public static func == (a: OpenWeb3Lib.NavigationStatusBarStyle, b: OpenWeb3Lib.NavigationStatusBarStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class NavigationControllerTheme {
  final public let statusBar: OpenWeb3Lib.NavigationStatusBarStyle
  final public let navigationBar: OpenWeb3Lib.NavigationBarTheme
  final public let emptyAreaColor: UIKit.UIColor
  public init(statusBar: OpenWeb3Lib.NavigationStatusBarStyle, navigationBar: OpenWeb3Lib.NavigationBarTheme, emptyAreaColor: UIKit.UIColor)
  @objc deinit
}
public struct NavigationAnimationOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public init()
  public static let removeOnMasterDetails: OpenWeb3Lib.NavigationAnimationOptions
  public typealias ArrayLiteralElement = OpenWeb3Lib.NavigationAnimationOptions
  public typealias Element = OpenWeb3Lib.NavigationAnimationOptions
  public typealias RawValue = Swift.Int
}
public enum NavigationControllerMode {
  case single
  case automaticMasterDetail
  public static func == (a: OpenWeb3Lib.NavigationControllerMode, b: OpenWeb3Lib.NavigationControllerMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MasterDetailLayoutBlackout : Swift.Equatable {
  case master
  case details
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.MasterDetailLayoutBlackout, b: OpenWeb3Lib.MasterDetailLayoutBlackout) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NavigationControllerDropContentItem : AnyObject {
}
final public class NavigationControllerDropContent {
  final public let position: CoreFoundation.CGPoint
  final public let item: any OpenWeb3Lib.NavigationControllerDropContentItem
  public init(position: CoreFoundation.CGPoint, item: any OpenWeb3Lib.NavigationControllerDropContentItem)
  @objc deinit
}
public protocol NavigationDetailsPlaceholderNode : OpenWeb3LibPrivite.ASDisplayNode {
  func updateLayout(size: CoreFoundation.CGSize, needsTiling: Swift.Bool, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
}
@objc @_Concurrency.MainActor @preconcurrency open class NavigationController : UIKit.UINavigationController, OpenWeb3Lib.ContainableController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency public var isOpaqueWhenInOverlay: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var blocksBackgroundWhenInOverlay: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var updateTransitionWhenPresentedAsModal: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var ready: OpenWeb3Lib.Promise<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var lockOrientation: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var deferScreenEdgeGestures: UIKit.UIRectEdge
  @_Concurrency.MainActor @preconcurrency public var prefersOnScreenNavigationHidden: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var globalOverlayControllersUpdated: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var validLayout: OpenWeb3Lib.ContainerViewLayout? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var presentedViewController: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var viewControllers: [UIKit.UIViewController] {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var viewControllersSignal: OpenWeb3Lib.Signal<[UIKit.UIViewController], OpenWeb3Lib.NoError> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var overlayControllersSignal: OpenWeb3Lib.Signal<[UIKit.UIViewController], OpenWeb3Lib.NoError> {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var topViewController: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var displayNode: OpenWeb3LibPrivite.ASDisplayNode {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var statusBarHost: (any OpenWeb3Lib.StatusBarHost)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func updateMasterDetailsBlackout(_ blackout: OpenWeb3Lib.MasterDetailLayoutBlackout?, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency public func updateDetailsPlaceholderNode(_ node: (any OpenWeb3Lib.NavigationDetailsPlaceholderNode)?)
  @_Concurrency.MainActor @preconcurrency public init(mode: OpenWeb3Lib.NavigationControllerMode, theme: OpenWeb3Lib.NavigationControllerTheme, isFlat: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func combinedSupportedOrientations(currentOrientationToLock: UIKit.UIInterfaceOrientationMask) -> OpenWeb3Lib.ViewControllerSupportedOrientations
  @_Concurrency.MainActor @preconcurrency public func updateTheme(_ theme: OpenWeb3Lib.NavigationControllerTheme)
  @_Concurrency.MainActor @preconcurrency open func preferredContentSizeForLayout(_ layout: OpenWeb3Lib.ContainerViewLayout) -> CoreFoundation.CGSize?
  @_Concurrency.MainActor @preconcurrency open func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency public func updateToInterfaceOrientation(_ orientation: UIKit.UIInterfaceOrientation)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency public func pushViewController(_ controller: OpenWeb3Lib.ViewController)
  @_Concurrency.MainActor @preconcurrency public func pushViewController(_ controller: OpenWeb3Lib.ViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func replaceTopController(_ controller: OpenWeb3Lib.ViewController, animated: Swift.Bool, ready: OpenWeb3Lib.Promise<Swift.Bool>? = nil)
  @_Concurrency.MainActor @preconcurrency public func filterController(_ controller: OpenWeb3Lib.ViewController, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func replaceController(_ controller: OpenWeb3Lib.ViewController, with other: OpenWeb3Lib.ViewController, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func replaceControllersAndPush(controllers: [UIKit.UIViewController], controller: OpenWeb3Lib.ViewController, animated: Swift.Bool, options: OpenWeb3Lib.NavigationAnimationOptions = [], ready: OpenWeb3Lib.ValuePromise<Swift.Bool>? = nil, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func replaceControllers(controllers: [UIKit.UIViewController], animated: Swift.Bool, options: OpenWeb3Lib.NavigationAnimationOptions = [], ready: OpenWeb3Lib.ValuePromise<Swift.Bool>? = nil, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func replaceAllButRootController(_ controller: OpenWeb3Lib.ViewController, animated: Swift.Bool, animationOptions: OpenWeb3Lib.NavigationAnimationOptions = [], ready: OpenWeb3Lib.ValuePromise<Swift.Bool>? = nil, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func popToRoot(animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func popToViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool) -> [UIKit.UIViewController]?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func popViewController(animated: Swift.Bool) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func setViewControllers(_ viewControllers: [UIKit.UIViewController], animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setViewControllers(_ viewControllers: [UIKit.UIViewController], animated: Swift.Bool, completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var _keepModalDismissProgress: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func presentOverlay(controller: OpenWeb3Lib.ViewController, inGlobal: Swift.Bool = false, blockInteraction: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func updatePossibleControllerDropContent(content: OpenWeb3Lib.NavigationControllerDropContent?)
  @_Concurrency.MainActor @preconcurrency public func acceptPossibleControllerDropContent(content: OpenWeb3Lib.NavigationControllerDropContent) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency final public var currentWindow: (any OpenWeb3Lib.WindowHost)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func requestLayout(transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency public func setForceInCallStatusBar(_ forceInCallStatusBar: OpenWeb3Lib.CallStatusBarNode?, transition: OpenWeb3Lib.ContainedViewLayoutTransition = .animated(duration: 0.3, curve: .easeInOut))
  @_Concurrency.MainActor @preconcurrency public var overlayControllers: [OpenWeb3Lib.ViewController] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var globalOverlayControllers: [OpenWeb3Lib.ViewController] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func updateRootContainerTransitionOffset(_ offset: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class HighlightTrackingButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var internalHighligthedChanged: (Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var highligthedChanged: (Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
public enum WindowUserInterfaceStyle {
  case light
  case dark
  @available(iOS 12.0, *)
  public init(style: UIKit.UIUserInterfaceStyle)
  public static func == (a: OpenWeb3Lib.WindowUserInterfaceStyle, b: OpenWeb3Lib.WindowUserInterfaceStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class PreviewingHostViewDelegate {
  final public let controllerForLocation: (UIKit.UIView, CoreFoundation.CGPoint) -> (UIKit.UIViewController, CoreFoundation.CGRect)?
  final public let commitController: (UIKit.UIViewController) -> Swift.Void
  public init(controllerForLocation: @escaping (UIKit.UIView, CoreFoundation.CGPoint) -> (UIKit.UIViewController, CoreFoundation.CGRect)?, commitController: @escaping (UIKit.UIViewController) -> Swift.Void)
  @objc deinit
}
public protocol PreviewingHostView {
  @available(iOSApplicationExtension 9.0, iOS 9.0, *)
  var previewingDelegate: OpenWeb3Lib.PreviewingHostViewDelegate? { get }
}
public func nativeWindowHostView() -> (any UIKit.UIWindow & OpenWeb3Lib.WindowHost, OpenWeb3Lib.WindowHostView)
public enum ContextGestureTransition {
  case begin
  case update
  case ended(CoreFoundation.CGFloat)
}
public func cancelParentGestures(view: UIKit.UIView, ignore: [UIKit.UIGestureRecognizer] = [])
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ContextGesture : UIKit.UIGestureRecognizer, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency final public var beginDelay: Swift.Double
  @_Concurrency.MainActor @preconcurrency final public var activateOnTap: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var shouldBegin: ((CoreFoundation.CGPoint) -> Swift.Bool)?
  @_Concurrency.MainActor @preconcurrency final public var activationProgress: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContextGestureTransition) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var activated: ((OpenWeb3Lib.ContextGesture, CoreFoundation.CGPoint) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var externalUpdated: ((UIKit.UIView?, CoreFoundation.CGPoint) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var externalEnded: (((UIKit.UIView?, CoreFoundation.CGPoint)?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var activatedAfterCompletion: ((CoreFoundation.CGPoint, Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var cancelGesturesOnActivation: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func reset()
  @_Concurrency.MainActor @preconcurrency @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency final public func cancel()
  @_Concurrency.MainActor @preconcurrency final public func endPressedAppearance()
  @objc deinit
}
public let kCAMediaTimingFunctionSpring: Swift.String
public let kCAMediaTimingFunctionCustomSpringPrefix: Swift.String
extension QuartzCore.CAAnimation {
  public var completion: ((Swift.Bool) -> Swift.Void)? {
    get
    set(value)
  }
}
extension QuartzCore.CALayer {
  public func makeAnimation(from: Swift.AnyObject?, to: Swift.AnyObject, keyPath: Swift.String, timingFunction: Swift.String, duration: Swift.Double, delay: Swift.Double = 0.0, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil) -> QuartzCore.CAAnimation
  public func animate(from: Swift.AnyObject?, to: Swift.AnyObject, keyPath: Swift.String, timingFunction: Swift.String, duration: Swift.Double, delay: Swift.Double = 0.0, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil, key: Swift.String? = nil)
  public func animateGroup(_ animations: [QuartzCore.CAAnimation], key: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateKeyframes(values: [Swift.AnyObject], keyTimes: [Foundation.NSNumber]? = nil, duration: Swift.Double, keyPath: Swift.String, timingFunction: Swift.String = CAMediaTimingFunctionName.linear.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func springAnimation(from: Swift.AnyObject, to: Swift.AnyObject, keyPath: Swift.String, duration: Swift.Double, delay: Swift.Double = 0.0, initialVelocity: CoreFoundation.CGFloat = 0.0, damping: CoreFoundation.CGFloat = 88.0, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false) -> QuartzCore.CABasicAnimation
  public func animateSpring(from: Swift.AnyObject, to: Swift.AnyObject, keyPath: Swift.String, duration: Swift.Double, delay: Swift.Double = 0.0, initialVelocity: CoreFoundation.CGFloat = 0.0, damping: CoreFoundation.CGFloat = 88.0, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateAdditive(from: Foundation.NSValue, to: Foundation.NSValue, keyPath: Swift.String, key: Swift.String, timingFunction: Swift.String, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, duration: Swift.Double, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateAlpha(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> ())? = nil)
  public func animateScale(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateSublayerScale(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateScaleX(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateScaleY(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateRotation(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePosition(from: CoreFoundation.CGPoint, to: CoreFoundation.CGPoint, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateAnchorPoint(from: CoreFoundation.CGPoint, to: CoreFoundation.CGPoint, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBounds(from: CoreFoundation.CGRect, to: CoreFoundation.CGRect, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateWidth(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateHeight(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBoundsOriginXAdditive(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBoundsOriginYAdditive(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBoundsOriginXAdditive(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, mediaTimingFunction: QuartzCore.CAMediaTimingFunction)
  public func animateBoundsOriginYAdditive(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, mediaTimingFunction: QuartzCore.CAMediaTimingFunction)
  public func animateShapeLineWidth(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePositionKeyframes(values: [CoreFoundation.CGPoint], duration: Swift.Double, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateFrame(from: CoreFoundation.CGRect, to: CoreFoundation.CGRect, duration: Swift.Double, delay: Swift.Double = 0.0, timingFunction: Swift.String = CAMediaTimingFunctionName.easeInEaseOut.rawValue, mediaTimingFunction: QuartzCore.CAMediaTimingFunction? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func cancelAnimationsRecursive(key: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class ContextControllerSourceNode : OpenWeb3Lib.ContextReferenceContentNode {
  public enum ShouldBegin {
    case none
    case `default`
    case customActivationProcess
    public static func == (a: OpenWeb3Lib.ContextControllerSourceNode.ShouldBegin, b: OpenWeb3Lib.ContextControllerSourceNode.ShouldBegin) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var contextGesture: OpenWeb3Lib.ContextGesture? {
    get
  }
  public var isGestureEnabled: Swift.Bool {
    get
    set
  }
  public var beginDelay: Swift.Double {
    get
    set
  }
  public var animateScale: Swift.Bool
  public var activated: ((OpenWeb3Lib.ContextGesture, CoreFoundation.CGPoint) -> Swift.Void)?
  public var shouldBegin: ((CoreFoundation.CGPoint) -> Swift.Bool)?
  public var shouldBeginWithCustomActivationProcess: ((CoreFoundation.CGPoint) -> OpenWeb3Lib.ContextControllerSourceNode.ShouldBegin)?
  public var customActivationProgress: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContextGestureTransition) -> Swift.Void)?
  weak public var additionalActivationProgressLayer: QuartzCore.CALayer?
  public var targetNodeForActivationProgress: OpenWeb3LibPrivite.ASDisplayNode?
  public var targetNodeForActivationProgressContentRect: CoreFoundation.CGRect?
  public func cancelGesture()
  @objc override dynamic open func didLoad()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ContextControllerSourceView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var contextGesture: OpenWeb3Lib.ContextGesture? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isGestureEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var beginDelay: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animateScale: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var activated: ((OpenWeb3Lib.ContextGesture, CoreFoundation.CGPoint) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var shouldBegin: ((CoreFoundation.CGPoint) -> Swift.Bool)?
  @_Concurrency.MainActor @preconcurrency public var customActivationProgress: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContextGestureTransition) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency weak public var additionalActivationProgressLayer: QuartzCore.CALayer?
  @_Concurrency.MainActor @preconcurrency public var targetNodeForActivationProgress: OpenWeb3LibPrivite.ASDisplayNode?
  @_Concurrency.MainActor @preconcurrency public var targetViewForActivationProgress: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency weak public var targetLayerForActivationProgress: QuartzCore.CALayer?
  @_Concurrency.MainActor @preconcurrency public var targetNodeForActivationProgressContentRect: CoreFoundation.CGRect?
  @_Concurrency.MainActor @preconcurrency public var useSublayerTransformForActivation: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func cancelGesture()
  @objc deinit
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public static func currentFirst() -> UIKit.UIResponder?
}
public func viewTreeContainsFirstResponder(view: UIKit.UIView) -> Swift.Bool
@_hasMissingDesignatedInitializers final public class KeyboardViewManager {
  final public func dismissEditingWithoutAnimation(view: UIKit.UIView)
  final public func update(leftEdge: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc deinit
}
public struct KeyShortcut : Swift.Hashable {
  public init(title: Swift.String = "", input: Swift.String = "", modifiers: UIKit.UIKeyModifierFlags = [], action: @escaping () -> Swift.Void = {})
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: OpenWeb3Lib.KeyShortcut, rhs: OpenWeb3Lib.KeyShortcut) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIKeyModifierFlags : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
}
public enum AlertControllerThemeBackgroundType {
  case light
  case dark
  public static func == (a: OpenWeb3Lib.AlertControllerThemeBackgroundType, b: OpenWeb3Lib.AlertControllerThemeBackgroundType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class AlertControllerTheme : Swift.Equatable {
  final public let backgroundType: OpenWeb3Lib.ActionSheetControllerThemeBackgroundType
  final public let backgroundColor: UIKit.UIColor
  final public let separatorColor: UIKit.UIColor
  final public let highlightedItemColor: UIKit.UIColor
  final public let primaryColor: UIKit.UIColor
  final public let secondaryColor: UIKit.UIColor
  final public let accentColor: UIKit.UIColor
  final public let contrastColor: UIKit.UIColor
  final public let destructiveColor: UIKit.UIColor
  final public let disabledColor: UIKit.UIColor
  final public let controlBorderColor: UIKit.UIColor
  final public let baseFontSize: CoreFoundation.CGFloat
  public init(backgroundType: OpenWeb3Lib.ActionSheetControllerThemeBackgroundType, backgroundColor: UIKit.UIColor, separatorColor: UIKit.UIColor, highlightedItemColor: UIKit.UIColor, primaryColor: UIKit.UIColor, secondaryColor: UIKit.UIColor, accentColor: UIKit.UIColor, contrastColor: UIKit.UIColor, destructiveColor: UIKit.UIColor, disabledColor: UIKit.UIColor, controlBorderColor: UIKit.UIColor, baseFontSize: CoreFoundation.CGFloat)
  public static func == (lhs: OpenWeb3Lib.AlertControllerTheme, rhs: OpenWeb3Lib.AlertControllerTheme) -> Swift.Bool
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class AlertController : OpenWeb3Lib.ViewController, OpenWeb3Lib.StandalonePresentableController, OpenWeb3Lib.KeyShortcutResponder {
  @_Concurrency.MainActor @preconcurrency public var theme: OpenWeb3Lib.AlertControllerTheme {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let contentNode: OpenWeb3Lib.AlertContentNode
  @_Concurrency.MainActor @preconcurrency public var willDismiss: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var dismissed: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(theme: OpenWeb3Lib.AlertControllerTheme, contentNode: OpenWeb3Lib.AlertContentNode, existingAlertController: OpenWeb3Lib.AlertController? = nil, allowInputInset: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override open func loadDisplayNode()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency override open func dismiss(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func dismissAnimated()
  @_Concurrency.MainActor @preconcurrency public var keyShortcuts: [OpenWeb3Lib.KeyShortcut] {
    get
  }
  @objc deinit
}
public enum AtomicLockError : Swift.Error {
  case isLocked
  public static func == (a: OpenWeb3Lib.AtomicLockError, b: OpenWeb3Lib.AtomicLockError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class Atomic<T> {
  public init(value: T)
  @objc deinit
  final public func with<R>(_ f: (T) -> R) -> R
  final public func tryWith<R>(_ f: (T) -> R) throws -> R
  final public func modify(_ f: (T) -> T) -> T
  final public func swap(_ value: T) -> T
}
final public class PresentationThemeGradientColors {
  final public let topColor: UIKit.UIColor
  final public let bottomColor: UIKit.UIColor
  public init(topColor: UIKit.UIColor, bottomColor: UIKit.UIColor)
  final public var colors: (UIKit.UIColor, UIKit.UIColor) {
    get
  }
  final public var array: [UIKit.UIColor] {
    get
  }
  final public func withUpdated(topColor: UIKit.UIColor? = nil, bottomColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeGradientColors
  @objc deinit
}
final public class PresentationThemeIntro {
  final public let statusBarStyle: OpenWeb3Lib.PresentationThemeStatusBarStyle
  final public let primaryTextColor: UIKit.UIColor
  final public let accentTextColor: UIKit.UIColor
  final public let disabledTextColor: UIKit.UIColor
  final public let startButtonColor: UIKit.UIColor
  final public let dotColor: UIKit.UIColor
  public init(statusBarStyle: OpenWeb3Lib.PresentationThemeStatusBarStyle, primaryTextColor: UIKit.UIColor, accentTextColor: UIKit.UIColor, disabledTextColor: UIKit.UIColor, startButtonColor: UIKit.UIColor, dotColor: UIKit.UIColor)
  final public func withUpdated(statusBarStyle: OpenWeb3Lib.PresentationThemeStatusBarStyle? = nil, primaryTextColor: UIKit.UIColor? = nil, accentTextColor: UIKit.UIColor? = nil, disabledTextColor: UIKit.UIColor? = nil, startButtonColor: UIKit.UIColor? = nil, dotColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeIntro
  @objc deinit
}
final public class PresentationThemePasscode {
  final public let backgroundColors: OpenWeb3Lib.PresentationThemeGradientColors
  final public let buttonColor: UIKit.UIColor
  public init(backgroundColors: OpenWeb3Lib.PresentationThemeGradientColors, buttonColor: UIKit.UIColor)
  final public func withUpdated(backgroundColors: OpenWeb3Lib.PresentationThemeGradientColors? = nil, buttonColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemePasscode
  @objc deinit
}
final public class PresentationThemeRootTabBar {
  final public let backgroundColor: UIKit.UIColor
  final public let separatorColor: UIKit.UIColor
  final public let iconColor: UIKit.UIColor
  final public let selectedIconColor: UIKit.UIColor
  final public let textColor: UIKit.UIColor
  final public let selectedTextColor: UIKit.UIColor
  final public let badgeBackgroundColor: UIKit.UIColor
  final public let badgeStrokeColor: UIKit.UIColor
  final public let badgeTextColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor, separatorColor: UIKit.UIColor, iconColor: UIKit.UIColor, selectedIconColor: UIKit.UIColor, textColor: UIKit.UIColor, selectedTextColor: UIKit.UIColor, badgeBackgroundColor: UIKit.UIColor, badgeStrokeColor: UIKit.UIColor, badgeTextColor: UIKit.UIColor)
  final public func withUpdated(backgroundColor: UIKit.UIColor? = nil, separatorColor: UIKit.UIColor? = nil, iconColor: UIKit.UIColor? = nil, selectedIconColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, selectedTextColor: UIKit.UIColor? = nil, badgeBackgroundColor: UIKit.UIColor? = nil, badgeStrokeColor: UIKit.UIColor? = nil, badgeTextColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeRootTabBar
  @objc deinit
}
public enum PresentationThemeStatusBarStyle : Swift.Int32 {
  case black
  case white
  public var style: OpenWeb3Lib.StatusBarStyle {
    get
  }
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class PresentationThemeRootNavigationBar {
  final public let buttonColor: UIKit.UIColor
  final public let disabledButtonColor: UIKit.UIColor
  final public let primaryTextColor: UIKit.UIColor
  final public let secondaryTextColor: UIKit.UIColor
  final public let controlColor: UIKit.UIColor
  final public let accentTextColor: UIKit.UIColor
  final public let blurredBackgroundColor: UIKit.UIColor
  final public let opaqueBackgroundColor: UIKit.UIColor
  final public let separatorColor: UIKit.UIColor
  final public let badgeBackgroundColor: UIKit.UIColor
  final public let badgeStrokeColor: UIKit.UIColor
  final public let badgeTextColor: UIKit.UIColor
  final public let segmentedBackgroundColor: UIKit.UIColor
  final public let segmentedForegroundColor: UIKit.UIColor
  final public let segmentedTextColor: UIKit.UIColor
  final public let segmentedDividerColor: UIKit.UIColor
  final public let clearButtonBackgroundColor: UIKit.UIColor
  final public let clearButtonForegroundColor: UIKit.UIColor
  public init(buttonColor: UIKit.UIColor, disabledButtonColor: UIKit.UIColor, primaryTextColor: UIKit.UIColor, secondaryTextColor: UIKit.UIColor, controlColor: UIKit.UIColor, accentTextColor: UIKit.UIColor, blurredBackgroundColor: UIKit.UIColor, opaqueBackgroundColor: UIKit.UIColor, separatorColor: UIKit.UIColor, badgeBackgroundColor: UIKit.UIColor, badgeStrokeColor: UIKit.UIColor, badgeTextColor: UIKit.UIColor, segmentedBackgroundColor: UIKit.UIColor, segmentedForegroundColor: UIKit.UIColor, segmentedTextColor: UIKit.UIColor, segmentedDividerColor: UIKit.UIColor, clearButtonBackgroundColor: UIKit.UIColor, clearButtonForegroundColor: UIKit.UIColor)
  final public func withUpdated(buttonColor: UIKit.UIColor? = nil, disabledButtonColor: UIKit.UIColor? = nil, primaryTextColor: UIKit.UIColor? = nil, secondaryTextColor: UIKit.UIColor? = nil, controlColor: UIKit.UIColor? = nil, accentTextColor: UIKit.UIColor? = nil, blurredBackgroundColor: UIKit.UIColor? = nil, opaqueBackgroundColor: UIKit.UIColor? = nil, separatorColor: UIKit.UIColor? = nil, badgeBackgroundColor: UIKit.UIColor? = nil, badgeStrokeColor: UIKit.UIColor? = nil, badgeTextColor: UIKit.UIColor? = nil, segmentedBackgroundColor: UIKit.UIColor? = nil, segmentedForegroundColor: UIKit.UIColor? = nil, segmentedTextColor: UIKit.UIColor? = nil, segmentedDividerColor: UIKit.UIColor? = nil, clearButtonBackgroundColor: UIKit.UIColor? = nil, clearButtonForegroundColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeRootNavigationBar
  @objc deinit
}
final public class PresentationThemeNavigationSearchBar {
  final public let backgroundColor: UIKit.UIColor
  final public let accentColor: UIKit.UIColor
  final public let inputFillColor: UIKit.UIColor
  final public let inputTextColor: UIKit.UIColor
  final public let inputPlaceholderTextColor: UIKit.UIColor
  final public let inputIconColor: UIKit.UIColor
  final public let inputClearButtonColor: UIKit.UIColor
  final public let separatorColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor, accentColor: UIKit.UIColor, inputFillColor: UIKit.UIColor, inputTextColor: UIKit.UIColor, inputPlaceholderTextColor: UIKit.UIColor, inputIconColor: UIKit.UIColor, inputClearButtonColor: UIKit.UIColor, separatorColor: UIKit.UIColor)
  final public func withUpdated(backgroundColor: UIKit.UIColor? = nil, accentColor: UIKit.UIColor? = nil, inputFillColor: UIKit.UIColor? = nil, inputTextColor: UIKit.UIColor? = nil, inputPlaceholderTextColor: UIKit.UIColor? = nil, inputIconColor: UIKit.UIColor? = nil, inputClearButtonColor: UIKit.UIColor? = nil, separatorColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeNavigationSearchBar
  @objc deinit
}
final public class PresentationThemeRootController {
  final public let statusBarStyle: OpenWeb3Lib.PresentationThemeStatusBarStyle
  final public let tabBar: OpenWeb3Lib.PresentationThemeRootTabBar
  final public let navigationBar: OpenWeb3Lib.PresentationThemeRootNavigationBar
  final public let navigationSearchBar: OpenWeb3Lib.PresentationThemeNavigationSearchBar
  final public let keyboardColor: OpenWeb3Lib.PresentationThemeKeyboardColor
  public init(statusBarStyle: OpenWeb3Lib.PresentationThemeStatusBarStyle, tabBar: OpenWeb3Lib.PresentationThemeRootTabBar, navigationBar: OpenWeb3Lib.PresentationThemeRootNavigationBar, navigationSearchBar: OpenWeb3Lib.PresentationThemeNavigationSearchBar, keyboardColor: OpenWeb3Lib.PresentationThemeKeyboardColor)
  final public func withUpdated(statusBarStyle: OpenWeb3Lib.PresentationThemeStatusBarStyle? = nil, tabBar: OpenWeb3Lib.PresentationThemeRootTabBar? = nil, navigationBar: OpenWeb3Lib.PresentationThemeRootNavigationBar? = nil, navigationSearchBar: OpenWeb3Lib.PresentationThemeNavigationSearchBar? = nil, keyboardColor: OpenWeb3Lib.PresentationThemeKeyboardColor? = nil) -> OpenWeb3Lib.PresentationThemeRootController
  @objc deinit
}
public enum PresentationThemeActionSheetBackgroundType : Swift.Int32 {
  case light
  case dark
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PresentationThemeActionSheet {
  final public let dimColor: UIKit.UIColor
  final public let backgroundType: OpenWeb3Lib.PresentationThemeActionSheetBackgroundType
  final public let opaqueItemBackgroundColor: UIKit.UIColor
  final public let itemBackgroundColor: UIKit.UIColor
  final public let opaqueItemHighlightedBackgroundColor: UIKit.UIColor
  final public let itemHighlightedBackgroundColor: UIKit.UIColor
  final public let opaqueItemSeparatorColor: UIKit.UIColor
  final public let standardActionTextColor: UIKit.UIColor
  final public let destructiveActionTextColor: UIKit.UIColor
  final public let disabledActionTextColor: UIKit.UIColor
  final public let primaryTextColor: UIKit.UIColor
  final public let secondaryTextColor: UIKit.UIColor
  final public let controlAccentColor: UIKit.UIColor
  final public let inputBackgroundColor: UIKit.UIColor
  final public let inputHollowBackgroundColor: UIKit.UIColor
  final public let inputBorderColor: UIKit.UIColor
  final public let inputPlaceholderColor: UIKit.UIColor
  final public let inputTextColor: UIKit.UIColor
  final public let inputClearButtonColor: UIKit.UIColor
  final public let checkContentColor: UIKit.UIColor
  final public func withUpdated(dimColor: UIKit.UIColor? = nil, backgroundType: OpenWeb3Lib.PresentationThemeActionSheetBackgroundType? = nil, opaqueItemBackgroundColor: UIKit.UIColor? = nil, itemBackgroundColor: UIKit.UIColor? = nil, opaqueItemHighlightedBackgroundColor: UIKit.UIColor? = nil, itemHighlightedBackgroundColor: UIKit.UIColor? = nil, opaqueItemSeparatorColor: UIKit.UIColor? = nil, standardActionTextColor: UIKit.UIColor? = nil, destructiveActionTextColor: UIKit.UIColor? = nil, disabledActionTextColor: UIKit.UIColor? = nil, primaryTextColor: UIKit.UIColor? = nil, secondaryTextColor: UIKit.UIColor? = nil, controlAccentColor: UIKit.UIColor? = nil, inputBackgroundColor: UIKit.UIColor? = nil, inputHollowBackgroundColor: UIKit.UIColor? = nil, inputBorderColor: UIKit.UIColor? = nil, inputPlaceholderColor: UIKit.UIColor? = nil, inputTextColor: UIKit.UIColor? = nil, inputClearButtonColor: UIKit.UIColor? = nil, checkContentColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeActionSheet
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PresentationThemeContextMenu {
  final public let dimColor: UIKit.UIColor
  final public let backgroundColor: UIKit.UIColor
  final public let itemSeparatorColor: UIKit.UIColor
  final public let sectionSeparatorColor: UIKit.UIColor
  final public let itemBackgroundColor: UIKit.UIColor
  final public let itemHighlightedBackgroundColor: UIKit.UIColor
  final public let primaryColor: UIKit.UIColor
  final public let secondaryColor: UIKit.UIColor
  final public let destructiveColor: UIKit.UIColor
  final public let badgeFillColor: UIKit.UIColor
  final public let badgeForegroundColor: UIKit.UIColor
  final public let badgeInactiveFillColor: UIKit.UIColor
  final public let badgeInactiveForegroundColor: UIKit.UIColor
  final public let extractedContentTintColor: UIKit.UIColor
  final public func withUpdated(dimColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil, itemSeparatorColor: UIKit.UIColor? = nil, sectionSeparatorColor: UIKit.UIColor? = nil, itemBackgroundColor: UIKit.UIColor? = nil, itemHighlightedBackgroundColor: UIKit.UIColor? = nil, primaryColor: UIKit.UIColor? = nil, secondaryColor: UIKit.UIColor? = nil, destructiveColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeContextMenu
  @objc deinit
}
final public class PresentationThemeSwitch {
  final public let frameColor: UIKit.UIColor
  final public let handleColor: UIKit.UIColor
  final public let contentColor: UIKit.UIColor
  final public let positiveColor: UIKit.UIColor
  final public let negativeColor: UIKit.UIColor
  public init(frameColor: UIKit.UIColor, handleColor: UIKit.UIColor, contentColor: UIKit.UIColor, positiveColor: UIKit.UIColor, negativeColor: UIKit.UIColor)
  final public func withUpdated(frameColor: UIKit.UIColor? = nil, handleColor: UIKit.UIColor? = nil, contentColor: UIKit.UIColor? = nil, positiveColor: UIKit.UIColor? = nil, negativeColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeSwitch
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PresentationThemeFillForeground {
  final public let fillColor: UIKit.UIColor
  final public let foregroundColor: UIKit.UIColor
  final public func withUpdated(fillColor: UIKit.UIColor? = nil, foregroundColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeFillForeground
  @objc deinit
}
final public class PresentationThemeItemDisclosureActions {
  final public let neutral1: OpenWeb3Lib.PresentationThemeFillForeground
  final public let neutral2: OpenWeb3Lib.PresentationThemeFillForeground
  final public let destructive: OpenWeb3Lib.PresentationThemeFillForeground
  final public let constructive: OpenWeb3Lib.PresentationThemeFillForeground
  final public let accent: OpenWeb3Lib.PresentationThemeFillForeground
  final public let warning: OpenWeb3Lib.PresentationThemeFillForeground
  final public let inactive: OpenWeb3Lib.PresentationThemeFillForeground
  public init(neutral1: OpenWeb3Lib.PresentationThemeFillForeground, neutral2: OpenWeb3Lib.PresentationThemeFillForeground, destructive: OpenWeb3Lib.PresentationThemeFillForeground, constructive: OpenWeb3Lib.PresentationThemeFillForeground, accent: OpenWeb3Lib.PresentationThemeFillForeground, warning: OpenWeb3Lib.PresentationThemeFillForeground, inactive: OpenWeb3Lib.PresentationThemeFillForeground)
  final public func withUpdated(neutral1: OpenWeb3Lib.PresentationThemeFillForeground? = nil, neutral2: OpenWeb3Lib.PresentationThemeFillForeground? = nil, destructive: OpenWeb3Lib.PresentationThemeFillForeground? = nil, constructive: OpenWeb3Lib.PresentationThemeFillForeground? = nil, accent: OpenWeb3Lib.PresentationThemeFillForeground? = nil, warning: OpenWeb3Lib.PresentationThemeFillForeground? = nil, inactive: OpenWeb3Lib.PresentationThemeFillForeground? = nil) -> OpenWeb3Lib.PresentationThemeItemDisclosureActions
  @objc deinit
}
final public class PresentationThemeItemBarChart {
  final public let color1: UIKit.UIColor
  final public let color2: UIKit.UIColor
  final public let color3: UIKit.UIColor
  public init(color1: UIKit.UIColor, color2: UIKit.UIColor, color3: UIKit.UIColor)
  final public func withUpdated(color1: UIKit.UIColor? = nil, color2: UIKit.UIColor? = nil, color3: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeItemBarChart
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PresentationThemeFillStrokeForeground {
  final public let fillColor: UIKit.UIColor
  final public let strokeColor: UIKit.UIColor
  final public let foregroundColor: UIKit.UIColor
  final public func withUpdated(fillColor: UIKit.UIColor? = nil, strokeColor: UIKit.UIColor? = nil, foregroundColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeFillStrokeForeground
  @objc deinit
}
final public class PresentationInputFieldTheme {
  final public let backgroundColor: UIKit.UIColor
  final public let strokeColor: UIKit.UIColor
  final public let placeholderColor: UIKit.UIColor
  final public let primaryColor: UIKit.UIColor
  final public let controlColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor, strokeColor: UIKit.UIColor, placeholderColor: UIKit.UIColor, primaryColor: UIKit.UIColor, controlColor: UIKit.UIColor)
  final public func withUpdated(backgroundColor: UIKit.UIColor? = nil, strokeColor: UIKit.UIColor? = nil, placeholderColor: UIKit.UIColor? = nil, primaryColor: UIKit.UIColor? = nil, controlColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationInputFieldTheme
  @objc deinit
}
final public class PresentationThemeList {
  final public class PaymentOption {
    final public let inactiveFillColor: UIKit.UIColor
    final public let inactiveForegroundColor: UIKit.UIColor
    final public let activeFillColor: UIKit.UIColor
    final public let activeForegroundColor: UIKit.UIColor
    public init(inactiveFillColor: UIKit.UIColor, inactiveForegroundColor: UIKit.UIColor, activeFillColor: UIKit.UIColor, activeForegroundColor: UIKit.UIColor)
    @objc deinit
  }
  final public let blocksBackgroundColor: UIKit.UIColor
  final public let modalBlocksBackgroundColor: UIKit.UIColor
  final public let plainBackgroundColor: UIKit.UIColor
  final public let modalPlainBackgroundColor: UIKit.UIColor
  final public let itemPrimaryTextColor: UIKit.UIColor
  final public let itemSecondaryTextColor: UIKit.UIColor
  final public let itemDisabledTextColor: UIKit.UIColor
  final public let itemAccentColor: UIKit.UIColor
  final public let itemHighlightedColor: UIKit.UIColor
  final public let itemDestructiveColor: UIKit.UIColor
  final public let itemPlaceholderTextColor: UIKit.UIColor
  final public let itemBlocksBackgroundColor: UIKit.UIColor
  final public let itemModalBlocksBackgroundColor: UIKit.UIColor
  final public let itemHighlightedBackgroundColor: UIKit.UIColor
  final public let itemBlocksSeparatorColor: UIKit.UIColor
  final public let itemPlainSeparatorColor: UIKit.UIColor
  final public let disclosureArrowColor: UIKit.UIColor
  final public let sectionHeaderTextColor: UIKit.UIColor
  final public let freeTextColor: UIKit.UIColor
  final public let freeTextErrorColor: UIKit.UIColor
  final public let freeTextSuccessColor: UIKit.UIColor
  final public let freeMonoIconColor: UIKit.UIColor
  final public let itemSwitchColors: OpenWeb3Lib.PresentationThemeSwitch
  final public let itemDisclosureActions: OpenWeb3Lib.PresentationThemeItemDisclosureActions
  final public let itemCheckColors: OpenWeb3Lib.PresentationThemeFillStrokeForeground
  final public let controlSecondaryColor: UIKit.UIColor
  final public let freeInputField: OpenWeb3Lib.PresentationInputFieldTheme
  final public let freePlainInputField: OpenWeb3Lib.PresentationInputFieldTheme
  final public let mediaPlaceholderColor: UIKit.UIColor
  final public let scrollIndicatorColor: UIKit.UIColor
  final public let pageIndicatorInactiveColor: UIKit.UIColor
  final public let inputClearButtonColor: UIKit.UIColor
  final public let itemBarChart: OpenWeb3Lib.PresentationThemeItemBarChart
  final public let itemInputField: OpenWeb3Lib.PresentationInputFieldTheme
  final public let paymentOption: OpenWeb3Lib.PresentationThemeList.PaymentOption
  public init(blocksBackgroundColor: UIKit.UIColor, modalBlocksBackgroundColor: UIKit.UIColor, plainBackgroundColor: UIKit.UIColor, modalPlainBackgroundColor: UIKit.UIColor, itemPrimaryTextColor: UIKit.UIColor, itemSecondaryTextColor: UIKit.UIColor, itemDisabledTextColor: UIKit.UIColor, itemAccentColor: UIKit.UIColor, itemHighlightedColor: UIKit.UIColor, itemDestructiveColor: UIKit.UIColor, itemPlaceholderTextColor: UIKit.UIColor, itemBlocksBackgroundColor: UIKit.UIColor, itemModalBlocksBackgroundColor: UIKit.UIColor, itemHighlightedBackgroundColor: UIKit.UIColor, itemBlocksSeparatorColor: UIKit.UIColor, itemPlainSeparatorColor: UIKit.UIColor, disclosureArrowColor: UIKit.UIColor, sectionHeaderTextColor: UIKit.UIColor, freeTextColor: UIKit.UIColor, freeTextErrorColor: UIKit.UIColor, freeTextSuccessColor: UIKit.UIColor, freeMonoIconColor: UIKit.UIColor, itemSwitchColors: OpenWeb3Lib.PresentationThemeSwitch, itemDisclosureActions: OpenWeb3Lib.PresentationThemeItemDisclosureActions, itemCheckColors: OpenWeb3Lib.PresentationThemeFillStrokeForeground, controlSecondaryColor: UIKit.UIColor, freeInputField: OpenWeb3Lib.PresentationInputFieldTheme, freePlainInputField: OpenWeb3Lib.PresentationInputFieldTheme, mediaPlaceholderColor: UIKit.UIColor, scrollIndicatorColor: UIKit.UIColor, pageIndicatorInactiveColor: UIKit.UIColor, inputClearButtonColor: UIKit.UIColor, itemBarChart: OpenWeb3Lib.PresentationThemeItemBarChart, itemInputField: OpenWeb3Lib.PresentationInputFieldTheme, paymentOption: OpenWeb3Lib.PresentationThemeList.PaymentOption)
  final public func withUpdated(blocksBackgroundColor: UIKit.UIColor? = nil, modalBlocksBackgroundColor: UIKit.UIColor? = nil, plainBackgroundColor: UIKit.UIColor? = nil, modalPlainBackgroundColor: UIKit.UIColor? = nil, itemPrimaryTextColor: UIKit.UIColor? = nil, itemSecondaryTextColor: UIKit.UIColor? = nil, itemDisabledTextColor: UIKit.UIColor? = nil, itemAccentColor: UIKit.UIColor? = nil, itemHighlightedColor: UIKit.UIColor? = nil, itemDestructiveColor: UIKit.UIColor? = nil, itemPlaceholderTextColor: UIKit.UIColor? = nil, itemBlocksBackgroundColor: UIKit.UIColor? = nil, itemModalBlocksBackgroundColor: UIKit.UIColor? = nil, itemHighlightedBackgroundColor: UIKit.UIColor? = nil, itemBlocksSeparatorColor: UIKit.UIColor? = nil, itemPlainSeparatorColor: UIKit.UIColor? = nil, disclosureArrowColor: UIKit.UIColor? = nil, sectionHeaderTextColor: UIKit.UIColor? = nil, freeTextColor: UIKit.UIColor? = nil, freeTextErrorColor: UIKit.UIColor? = nil, freeTextSuccessColor: UIKit.UIColor? = nil, freeMonoIconColor: UIKit.UIColor? = nil, itemSwitchColors: OpenWeb3Lib.PresentationThemeSwitch? = nil, itemDisclosureActions: OpenWeb3Lib.PresentationThemeItemDisclosureActions? = nil, itemCheckColors: OpenWeb3Lib.PresentationThemeFillStrokeForeground? = nil, controlSecondaryColor: UIKit.UIColor? = nil, freeInputField: OpenWeb3Lib.PresentationInputFieldTheme? = nil, freePlainInputField: OpenWeb3Lib.PresentationInputFieldTheme? = nil, mediaPlaceholderColor: UIKit.UIColor? = nil, scrollIndicatorColor: UIKit.UIColor? = nil, pageIndicatorInactiveColor: UIKit.UIColor? = nil, inputClearButtonColor: UIKit.UIColor? = nil, itemBarChart: OpenWeb3Lib.PresentationThemeItemBarChart? = nil, itemInputField: OpenWeb3Lib.PresentationInputFieldTheme? = nil, paymentOption: OpenWeb3Lib.PresentationThemeList.PaymentOption? = nil) -> OpenWeb3Lib.PresentationThemeList
  @objc deinit
}
final public class PresentationThemeArchiveAvatarColors {
  final public let backgroundColors: OpenWeb3Lib.PresentationThemeGradientColors
  final public let foregroundColor: UIKit.UIColor
  public init(backgroundColors: OpenWeb3Lib.PresentationThemeGradientColors, foregroundColor: UIKit.UIColor)
  final public func withUpdated(backgroundColors: OpenWeb3Lib.PresentationThemeGradientColors? = nil, foregroundColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeArchiveAvatarColors
  @objc deinit
}
final public class PresentationThemeVariableColor {
  final public let withWallpaper: UIKit.UIColor
  final public let withoutWallpaper: UIKit.UIColor
  public init(withWallpaper: UIKit.UIColor, withoutWallpaper: UIKit.UIColor)
  public init(color: UIKit.UIColor)
  final public func withUpdated(withWallpaper: UIKit.UIColor? = nil, withoutWallpaper: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeVariableColor
  @objc deinit
}
final public class PresentationThemePartedColors {
  final public let primaryTextColor: UIKit.UIColor
  final public let secondaryTextColor: UIKit.UIColor
  final public let linkTextColor: UIKit.UIColor
  final public let linkHighlightColor: UIKit.UIColor
  final public let scamColor: UIKit.UIColor
  final public let textHighlightColor: UIKit.UIColor
  final public let accentTextColor: UIKit.UIColor
  final public let accentControlColor: UIKit.UIColor
  final public let accentControlDisabledColor: UIKit.UIColor
  final public let mediaActiveControlColor: UIKit.UIColor
  final public let mediaInactiveControlColor: UIKit.UIColor
  final public let mediaControlInnerBackgroundColor: UIKit.UIColor
  final public let pendingActivityColor: UIKit.UIColor
  final public let fileTitleColor: UIKit.UIColor
  final public let fileDescriptionColor: UIKit.UIColor
  final public let fileDurationColor: UIKit.UIColor
  final public let mediaPlaceholderColor: UIKit.UIColor
  final public let actionButtonsFillColor: OpenWeb3Lib.PresentationThemeVariableColor
  final public let actionButtonsStrokeColor: OpenWeb3Lib.PresentationThemeVariableColor
  final public let actionButtonsTextColor: OpenWeb3Lib.PresentationThemeVariableColor
  final public let textSelectionColor: UIKit.UIColor
  final public let textSelectionKnobColor: UIKit.UIColor
  public init(primaryTextColor: UIKit.UIColor, secondaryTextColor: UIKit.UIColor, linkTextColor: UIKit.UIColor, linkHighlightColor: UIKit.UIColor, scamColor: UIKit.UIColor, textHighlightColor: UIKit.UIColor, accentTextColor: UIKit.UIColor, accentControlColor: UIKit.UIColor, accentControlDisabledColor: UIKit.UIColor, mediaActiveControlColor: UIKit.UIColor, mediaInactiveControlColor: UIKit.UIColor, mediaControlInnerBackgroundColor: UIKit.UIColor, pendingActivityColor: UIKit.UIColor, fileTitleColor: UIKit.UIColor, fileDescriptionColor: UIKit.UIColor, fileDurationColor: UIKit.UIColor, mediaPlaceholderColor: UIKit.UIColor, actionButtonsFillColor: OpenWeb3Lib.PresentationThemeVariableColor, actionButtonsStrokeColor: OpenWeb3Lib.PresentationThemeVariableColor, actionButtonsTextColor: OpenWeb3Lib.PresentationThemeVariableColor, textSelectionColor: UIKit.UIColor, textSelectionKnobColor: UIKit.UIColor)
  final public func withUpdated(primaryTextColor: UIKit.UIColor? = nil, secondaryTextColor: UIKit.UIColor? = nil, linkTextColor: UIKit.UIColor? = nil, linkHighlightColor: UIKit.UIColor? = nil, scamColor: UIKit.UIColor? = nil, textHighlightColor: UIKit.UIColor? = nil, accentTextColor: UIKit.UIColor? = nil, accentControlColor: UIKit.UIColor? = nil, accentControlDisabledColor: UIKit.UIColor? = nil, mediaActiveControlColor: UIKit.UIColor? = nil, mediaInactiveControlColor: UIKit.UIColor? = nil, mediaControlInnerBackgroundColor: UIKit.UIColor? = nil, pendingActivityColor: UIKit.UIColor? = nil, fileTitleColor: UIKit.UIColor? = nil, fileDescriptionColor: UIKit.UIColor? = nil, fileDurationColor: UIKit.UIColor? = nil, mediaPlaceholderColor: UIKit.UIColor? = nil, actionButtonsFillColor: OpenWeb3Lib.PresentationThemeVariableColor? = nil, actionButtonsStrokeColor: OpenWeb3Lib.PresentationThemeVariableColor? = nil, actionButtonsTextColor: OpenWeb3Lib.PresentationThemeVariableColor? = nil, textSelectionColor: UIKit.UIColor? = nil, textSelectionKnobColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemePartedColors
  @objc deinit
}
final public class PresentationThemeServiceMessageColorComponents {
  final public let fill: UIKit.UIColor
  final public let primaryText: UIKit.UIColor
  final public let linkHighlight: UIKit.UIColor
  final public let scam: UIKit.UIColor
  final public let dateFillStatic: UIKit.UIColor
  final public let dateFillFloating: UIKit.UIColor
  public init(fill: UIKit.UIColor, primaryText: UIKit.UIColor, linkHighlight: UIKit.UIColor, scam: UIKit.UIColor, dateFillStatic: UIKit.UIColor, dateFillFloating: UIKit.UIColor)
  final public func withUpdated(fill: UIKit.UIColor? = nil, primaryText: UIKit.UIColor? = nil, linkHighlight: UIKit.UIColor? = nil, scam: UIKit.UIColor? = nil, dateFillStatic: UIKit.UIColor? = nil, dateFillFloating: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeServiceMessageColorComponents
  @objc deinit
}
public enum PresentationThemeKeyboardColor : Swift.Int32 {
  case light
  case dark
  public var keyboardAppearance: UIKit.UIKeyboardAppearance {
    get
  }
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class PresentationThemeInputMediaPanel {
  final public let panelSeparatorColor: UIKit.UIColor
  final public let panelIconColor: UIKit.UIColor
  final public let panelHighlightedIconBackgroundColor: UIKit.UIColor
  final public let panelHighlightedIconColor: UIKit.UIColor
  final public let panelContentVibrantOverlayColor: UIKit.UIColor
  final public let panelContentControlVibrantOverlayColor: UIKit.UIColor
  final public let panelContentControlVibrantSelectionColor: UIKit.UIColor
  final public let panelContentControlOpaqueOverlayColor: UIKit.UIColor
  final public let panelContentControlOpaqueSelectionColor: UIKit.UIColor
  final public let panelContentVibrantSearchOverlayColor: UIKit.UIColor
  final public let panelContentVibrantSearchOverlaySelectedColor: UIKit.UIColor
  final public let panelContentVibrantSearchOverlayHighlightColor: UIKit.UIColor
  final public let panelContentOpaqueSearchOverlayColor: UIKit.UIColor
  final public let panelContentOpaqueSearchOverlaySelectedColor: UIKit.UIColor
  final public let panelContentOpaqueSearchOverlayHighlightColor: UIKit.UIColor
  final public let stickersBackgroundColor: UIKit.UIColor
  final public let stickersSectionTextColor: UIKit.UIColor
  final public let stickersSearchBackgroundColor: UIKit.UIColor
  final public let stickersSearchPlaceholderColor: UIKit.UIColor
  final public let stickersSearchPrimaryColor: UIKit.UIColor
  final public let stickersSearchControlColor: UIKit.UIColor
  final public let gifsBackgroundColor: UIKit.UIColor
  final public let backgroundColor: UIKit.UIColor
  public init(panelSeparatorColor: UIKit.UIColor, panelIconColor: UIKit.UIColor, panelHighlightedIconBackgroundColor: UIKit.UIColor, panelHighlightedIconColor: UIKit.UIColor, panelContentVibrantOverlayColor: UIKit.UIColor, panelContentControlVibrantOverlayColor: UIKit.UIColor, panelContentControlVibrantSelectionColor: UIKit.UIColor, panelContentControlOpaqueOverlayColor: UIKit.UIColor, panelContentControlOpaqueSelectionColor: UIKit.UIColor, panelContentVibrantSearchOverlayColor: UIKit.UIColor, panelContentVibrantSearchOverlaySelectedColor: UIKit.UIColor, panelContentVibrantSearchOverlayHighlightColor: UIKit.UIColor, panelContentOpaqueSearchOverlayColor: UIKit.UIColor, panelContentOpaqueSearchOverlaySelectedColor: UIKit.UIColor, panelContentOpaqueSearchOverlayHighlightColor: UIKit.UIColor, stickersBackgroundColor: UIKit.UIColor, stickersSectionTextColor: UIKit.UIColor, stickersSearchBackgroundColor: UIKit.UIColor, stickersSearchPlaceholderColor: UIKit.UIColor, stickersSearchPrimaryColor: UIKit.UIColor, stickersSearchControlColor: UIKit.UIColor, gifsBackgroundColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  final public func withUpdated(panelSeparatorColor: UIKit.UIColor? = nil, panelIconColor: UIKit.UIColor? = nil, panelHighlightedIconBackgroundColor: UIKit.UIColor? = nil, panelHighlightedIconColor: UIKit.UIColor? = nil, panelContentVibrantOverlayColor: UIKit.UIColor? = nil, panelContentControlVibrantOverlayColor: UIKit.UIColor? = nil, panelContentControlVibrantSelectionColor: UIKit.UIColor? = nil, panelContentControlOpaqueOverlayColor: UIKit.UIColor? = nil, panelContentControlOpaqueSelectionColor: UIKit.UIColor? = nil, panelContentVibrantSearchOverlayColor: UIKit.UIColor? = nil, panelContentVibrantSearchOverlaySelectedColor: UIKit.UIColor? = nil, panelContentVibrantSearchOverlayHighlightColor: UIKit.UIColor? = nil, panelContentOpaqueSearchOverlayColor: UIKit.UIColor? = nil, panelContentOpaqueSearchOverlaySelectedColor: UIKit.UIColor? = nil, panelContentOpaqueSearchOverlayHighlightColor: UIKit.UIColor? = nil, stickersBackgroundColor: UIKit.UIColor? = nil, stickersSectionTextColor: UIKit.UIColor? = nil, stickersSearchBackgroundColor: UIKit.UIColor? = nil, stickersSearchPlaceholderColor: UIKit.UIColor? = nil, stickersSearchPrimaryColor: UIKit.UIColor? = nil, stickersSearchControlColor: UIKit.UIColor? = nil, gifsBackgroundColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeInputMediaPanel
  @objc deinit
}
final public class PresentationThemeInputButtonPanel {
  final public let panelSeparatorColor: UIKit.UIColor
  final public let panelBackgroundColor: UIKit.UIColor
  final public let buttonFillColor: UIKit.UIColor
  final public let buttonHighlightColor: UIKit.UIColor
  final public let buttonStrokeColor: UIKit.UIColor
  final public let buttonHighlightedFillColor: UIKit.UIColor
  final public let buttonHighlightedStrokeColor: UIKit.UIColor
  final public let buttonTextColor: UIKit.UIColor
  public init(panelSeparatorColor: UIKit.UIColor, panelBackgroundColor: UIKit.UIColor, buttonFillColor: UIKit.UIColor, buttonHighlightColor: UIKit.UIColor, buttonStrokeColor: UIKit.UIColor, buttonHighlightedFillColor: UIKit.UIColor, buttonHighlightedStrokeColor: UIKit.UIColor, buttonTextColor: UIKit.UIColor)
  final public func withUpdated(panelSeparatorColor: UIKit.UIColor? = nil, panelBackgroundColor: UIKit.UIColor? = nil, buttonFillColor: UIKit.UIColor? = nil, buttonHighlightColor: UIKit.UIColor? = nil, buttonStrokeColor: UIKit.UIColor? = nil, buttonHighlightedFillColor: UIKit.UIColor? = nil, buttonHighlightedStrokeColor: UIKit.UIColor? = nil, buttonTextColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeInputButtonPanel
  @objc deinit
}
public enum PresentationThemeExpandedNotificationBackgroundType : Swift.Int32 {
  case light
  case dark
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PresentationThemeExpandedNotificationNavigationBar {
  final public let backgroundColor: UIKit.UIColor
  final public let primaryTextColor: UIKit.UIColor
  final public let controlColor: UIKit.UIColor
  final public let separatorColor: UIKit.UIColor
  final public func withUpdated(backgroundColor: UIKit.UIColor? = nil, primaryTextColor: UIKit.UIColor? = nil, controlColor: UIKit.UIColor? = nil, separatorColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeExpandedNotificationNavigationBar
  @objc deinit
}
final public class PresentationThemeExpandedNotification {
  final public let backgroundType: OpenWeb3Lib.PresentationThemeExpandedNotificationBackgroundType
  final public let navigationBar: OpenWeb3Lib.PresentationThemeExpandedNotificationNavigationBar
  public init(backgroundType: OpenWeb3Lib.PresentationThemeExpandedNotificationBackgroundType, navigationBar: OpenWeb3Lib.PresentationThemeExpandedNotificationNavigationBar)
  final public func withUpdated(backgroundType: OpenWeb3Lib.PresentationThemeExpandedNotificationBackgroundType? = nil, navigationBar: OpenWeb3Lib.PresentationThemeExpandedNotificationNavigationBar? = nil) -> OpenWeb3Lib.PresentationThemeExpandedNotification
  @objc deinit
}
final public class PresentationThemeInAppNotification {
  final public let fillColor: UIKit.UIColor
  final public let primaryTextColor: UIKit.UIColor
  final public let expandedNotification: OpenWeb3Lib.PresentationThemeExpandedNotification
  public init(fillColor: UIKit.UIColor, primaryTextColor: UIKit.UIColor, expandedNotification: OpenWeb3Lib.PresentationThemeExpandedNotification)
  final public func withUpdated(fillColor: UIKit.UIColor? = nil, primaryTextColor: UIKit.UIColor? = nil, expandedNotification: OpenWeb3Lib.PresentationThemeExpandedNotification? = nil) -> OpenWeb3Lib.PresentationThemeInAppNotification
  @objc deinit
}
final public class PresentationThemeChart {
  final public let labelsColor: UIKit.UIColor
  final public let helperLinesColor: UIKit.UIColor
  final public let strongLinesColor: UIKit.UIColor
  final public let barStrongLinesColor: UIKit.UIColor
  final public let detailsTextColor: UIKit.UIColor
  final public let detailsArrowColor: UIKit.UIColor
  final public let detailsViewColor: UIKit.UIColor
  final public let rangeViewFrameColor: UIKit.UIColor
  final public let rangeViewMarkerColor: UIKit.UIColor
  public init(labelsColor: UIKit.UIColor, helperLinesColor: UIKit.UIColor, strongLinesColor: UIKit.UIColor, barStrongLinesColor: UIKit.UIColor, detailsTextColor: UIKit.UIColor, detailsArrowColor: UIKit.UIColor, detailsViewColor: UIKit.UIColor, rangeViewFrameColor: UIKit.UIColor, rangeViewMarkerColor: UIKit.UIColor)
  final public func withUpdated(labelsColor: UIKit.UIColor? = nil, helperLinesColor: UIKit.UIColor? = nil, strongLinesColor: UIKit.UIColor? = nil, barStrongLinesColor: UIKit.UIColor? = nil, detailsTextColor: UIKit.UIColor? = nil, detailsArrowColor: UIKit.UIColor? = nil, detailsViewColor: UIKit.UIColor? = nil, rangeViewFrameColor: UIKit.UIColor? = nil, rangeViewMarkerColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationThemeChart
  @objc deinit
}
public enum PresentationThemeBuiltinName {
  case dayClassic
  case day
  case night
  case nightAccent
  public var reference: OpenWeb3Lib.PresentationBuiltinThemeReference {
    get
  }
  public static func == (a: OpenWeb3Lib.PresentationThemeBuiltinName, b: OpenWeb3Lib.PresentationThemeBuiltinName) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PresentationThemeName : Swift.Equatable {
  case builtin(OpenWeb3Lib.PresentationThemeBuiltinName)
  case custom(Swift.String)
  public static func == (lhs: OpenWeb3Lib.PresentationThemeName, rhs: OpenWeb3Lib.PresentationThemeName) -> Swift.Bool
  public var string: Swift.String {
    get
  }
}
extension OpenWeb3Lib.PresentationThemeReference {
  public var name: OpenWeb3Lib.PresentationThemeName {
    get
  }
}
final public class PresentationTheme : Swift.Equatable {
  final public let name: OpenWeb3Lib.PresentationThemeName
  final public let index: Swift.Int64
  final public let referenceTheme: OpenWeb3Lib.PresentationBuiltinThemeReference
  final public let overallDarkAppearance: Swift.Bool
  final public let intro: OpenWeb3Lib.PresentationThemeIntro
  final public let passcode: OpenWeb3Lib.PresentationThemePasscode
  final public let rootController: OpenWeb3Lib.PresentationThemeRootController
  final public let list: OpenWeb3Lib.PresentationThemeList
  final public let actionSheet: OpenWeb3Lib.PresentationThemeActionSheet
  final public let contextMenu: OpenWeb3Lib.PresentationThemeContextMenu
  final public let inAppNotification: OpenWeb3Lib.PresentationThemeInAppNotification
  final public let preview: Swift.Bool
  final public var forceSync: Swift.Bool
  final public let resourceCache: OpenWeb3Lib.PresentationsResourceCache
  public init(name: OpenWeb3Lib.PresentationThemeName, index: Swift.Int64, referenceTheme: OpenWeb3Lib.PresentationBuiltinThemeReference, overallDarkAppearance: Swift.Bool, intro: OpenWeb3Lib.PresentationThemeIntro, passcode: OpenWeb3Lib.PresentationThemePasscode, rootController: OpenWeb3Lib.PresentationThemeRootController, list: OpenWeb3Lib.PresentationThemeList, actionSheet: OpenWeb3Lib.PresentationThemeActionSheet, contextMenu: OpenWeb3Lib.PresentationThemeContextMenu, inAppNotification: OpenWeb3Lib.PresentationThemeInAppNotification, preview: Swift.Bool = false)
  final public func image(_ key: Swift.Int32, _ generate: (OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?) -> UIKit.UIImage?
  final public func image(_ key: OpenWeb3Lib.PresentationResourceParameterKey, _ generate: (OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?) -> UIKit.UIImage?
  final public func object(_ key: Swift.Int32, _ generate: (OpenWeb3Lib.PresentationTheme) -> Swift.AnyObject?) -> Swift.AnyObject?
  final public func object(_ key: OpenWeb3Lib.PresentationResourceParameterKey, _ generate: (OpenWeb3Lib.PresentationTheme) -> Swift.AnyObject?) -> Swift.AnyObject?
  public static func == (lhs: OpenWeb3Lib.PresentationTheme, rhs: OpenWeb3Lib.PresentationTheme) -> Swift.Bool
  final public func withUpdated(name: Swift.String?) -> OpenWeb3Lib.PresentationTheme
  final public func withUpdated(referenceTheme: OpenWeb3Lib.PresentationBuiltinThemeReference) -> OpenWeb3Lib.PresentationTheme
  final public func withUpdated(preview: Swift.Bool) -> OpenWeb3Lib.PresentationTheme
  final public func withModalBlocksBackground() -> OpenWeb3Lib.PresentationTheme
  @objc deinit
}
public protocol PostboxCoding {
  init(decoder: OpenWeb3Lib.PostboxDecoder)
  func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
}
public func postboxEncodableTypeHash(_ type: any Any.Type) -> Swift.Int32
public func declareEncodable(_ type: any Any.Type, f: @escaping (OpenWeb3Lib.PostboxDecoder) -> any OpenWeb3Lib.PostboxCoding)
public func declareEncodable(typeHash: Swift.Int32, _ f: @escaping (OpenWeb3Lib.PostboxDecoder) -> any OpenWeb3Lib.PostboxCoding)
public func persistentHash32(_ string: Swift.String) -> Swift.Int32
public class MemoryBuffer : Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible {
  public var memory: Swift.UnsafeMutableRawPointer {
    get
  }
  public var length: Swift.Int {
    get
  }
  public init(copyOf buffer: OpenWeb3Lib.MemoryBuffer)
  public init(memory: Swift.UnsafeMutableRawPointer, capacity: Swift.Int, length: Swift.Int, freeWhenDone: Swift.Bool)
  public init(data: Foundation.Data)
  public init()
  @objc deinit
  public var description: Swift.String {
    get
  }
  public func makeData() -> Foundation.Data
  public func withDataNoCopy(_ f: (Foundation.Data) -> Swift.Void)
  public func hash(into hasher: inout Swift.Hasher)
  public func withRawBufferPointer(_ f: (Swift.UnsafeRawBufferPointer) -> Swift.Void)
  public static func == (lhs: OpenWeb3Lib.MemoryBuffer, rhs: OpenWeb3Lib.MemoryBuffer) -> Swift.Bool
  public static func < (lhs: OpenWeb3Lib.MemoryBuffer, rhs: OpenWeb3Lib.MemoryBuffer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class WriteBuffer : OpenWeb3Lib.MemoryBuffer {
  final public var offset: Swift.Int
  override public init()
  public init(capacity: Swift.Int)
  final public func makeReadBufferAndReset() -> OpenWeb3Lib.ReadBuffer
  final public func readBufferNoCopy() -> OpenWeb3Lib.ReadBuffer
  override final public func makeData() -> Foundation.Data
  final public func reset()
  final public func write(_ data: Swift.UnsafeRawPointer, offset: Swift.Int = 0, length: Swift.Int)
  final public func write(_ data: Foundation.Data)
  @objc deinit
}
final public class ReadBuffer : OpenWeb3Lib.MemoryBuffer {
  final public var offset: Swift.Int
  override public init(data: Foundation.Data)
  public init(memory: Swift.UnsafeMutableRawPointer, length: Swift.Int, freeWhenDone: Swift.Bool)
  public init(memoryBufferNoCopy: OpenWeb3Lib.MemoryBuffer)
  final public func dataNoCopy() -> Foundation.Data
  final public func read(_ data: Swift.UnsafeMutableRawPointer, offset: Swift.Int, length: Swift.Int)
  final public func readData(length: Swift.Int) -> Foundation.Data
  final public func readMemoryBuffer(length: Swift.Int) -> OpenWeb3Lib.MemoryBuffer
  final public func skip(_ length: Swift.Int)
  final public func reset()
  final public func sharedBufferNoCopy() -> OpenWeb3Lib.ReadBuffer
  @objc deinit
}
final public class PostboxEncoder {
  public init()
  final public func memoryBuffer() -> OpenWeb3Lib.MemoryBuffer
  final public func makeReadBufferAndReset() -> OpenWeb3Lib.ReadBuffer
  final public func readBufferNoCopy() -> OpenWeb3Lib.ReadBuffer
  final public func makeData() -> Foundation.Data
  final public func reset()
  final public func encodeKey(_ key: Swift.String)
  final public func encodeNil(forKey key: Swift.String)
  final public func encodeInt32(_ value: Swift.Int32, forKey key: Swift.String)
  final public func encodeInt64(_ value: Swift.Int64, forKey key: Swift.String)
  final public func encodeBool(_ value: Swift.Bool, forKey key: Swift.String)
  final public func encodeDouble(_ value: Swift.Double, forKey key: Swift.String)
  final public func encodeString(_ value: Swift.String, forKey key: Swift.String)
  final public func encodeRootObject(_ value: any OpenWeb3Lib.PostboxCoding)
  final public func encodeCodable<T>(_ value: T, forKey key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
  final public func encodeObject(_ value: any OpenWeb3Lib.PostboxCoding, forKey key: Swift.String)
  final public func encodeObjectWithEncoder<T>(_ value: T, encoder: (OpenWeb3Lib.PostboxEncoder) -> Swift.Void, forKey key: Swift.String)
  final public func encodeInt32Array(_ value: [Swift.Int32], forKey key: Swift.String)
  final public func encodeInt64Array(_ value: [Swift.Int64], forKey key: Swift.String)
  final public func encodeObjectArray<T>(_ value: [T], forKey key: Swift.String) where T : OpenWeb3Lib.PostboxCoding
  final public func encodeObjectArrayWithEncoder<T>(_ value: [T], forKey key: Swift.String, encoder: (T, OpenWeb3Lib.PostboxEncoder) -> Swift.Void)
  final public func encodeGenericObjectArray(_ value: [any OpenWeb3Lib.PostboxCoding], forKey key: Swift.String)
  final public func encodeStringArray(_ value: [Swift.String], forKey key: Swift.String)
  final public func encodeBytesArray(_ value: [OpenWeb3Lib.MemoryBuffer], forKey key: Swift.String)
  final public func encodeDataArray(_ value: [Foundation.Data], forKey key: Swift.String)
  final public func encodeObjectDictionary<K, V>(_ value: [K : V], forKey key: Swift.String) where K : OpenWeb3Lib.PostboxCoding, K : Swift.Hashable, V : OpenWeb3Lib.PostboxCoding
  final public func encodeObjectDictionary<K, V>(_ value: [K : V], forKey key: Swift.String, keyEncoder: (K, OpenWeb3Lib.PostboxEncoder) -> Swift.Void) where K : Swift.Hashable, V : OpenWeb3Lib.PostboxCoding
  final public func encodeBytes(_ bytes: OpenWeb3Lib.WriteBuffer, forKey key: Swift.String)
  final public func encodeBytes(_ bytes: OpenWeb3Lib.ReadBuffer, forKey key: Swift.String)
  final public func encodeBytes(_ bytes: OpenWeb3Lib.MemoryBuffer, forKey key: Swift.String)
  final public func encodeData(_ data: Foundation.Data, forKey key: Swift.String)
  final public func encode<T>(_ value: T, forKey key: Swift.String) where T : Swift.Encodable
  final public func encodeArray<T>(_ value: [T], forKey key: Swift.String) where T : Swift.Encodable
  final public let sharedWriteBuffer: OpenWeb3Lib.WriteBuffer
  @objc deinit
}
final public class PostboxDecoder {
  public init(buffer: OpenWeb3Lib.MemoryBuffer)
  final public func containsKey(_ key: Swift.String) -> Swift.Bool
  final public func decodeNilForKey(_ key: Swift.String) -> Swift.Bool
  final public func decodeInt32ForKey(_ key: Swift.String, orElse: Swift.Int32) -> Swift.Int32
  final public func decodeOptionalInt32ForKey(_ key: Swift.String) -> Swift.Int32?
  final public func decodeInt64ForKey(_ key: Swift.String, orElse: Swift.Int64) -> Swift.Int64
  final public func decodeOptionalInt64ForKey(_ key: Swift.String) -> Swift.Int64?
  final public func decodeBoolForKey(_ key: Swift.String, orElse: Swift.Bool) -> Swift.Bool
  final public func decodeOptionalBoolForKey(_ key: Swift.String) -> Swift.Bool?
  final public func decodeDoubleForKey(_ key: Swift.String, orElse: Swift.Double) -> Swift.Double
  final public func decodeOptionalDoubleForKey(_ key: Swift.String) -> Swift.Double?
  final public func decodeStringForKey(_ key: Swift.String, orElse: Swift.String) -> Swift.String
  final public func decodeOptionalStringForKey(_ key: Swift.String) -> Swift.String?
  final public func decodeRootObject() -> (any OpenWeb3Lib.PostboxCoding)?
  final public func decodeRootObjectWithHash(hash: Swift.Int32) -> (any OpenWeb3Lib.PostboxCoding)?
  final public func decodeCodable<T>(_ type: T.Type, forKey key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  final public func decodeObjectForKey(_ key: Swift.String) -> (any OpenWeb3Lib.PostboxCoding)?
  final public func decodeObjectForKey(_ key: Swift.String, decoder: (OpenWeb3Lib.PostboxDecoder) -> any OpenWeb3Lib.PostboxCoding) -> (any OpenWeb3Lib.PostboxCoding)?
  final public func decodeAnyObjectForKey(_ key: Swift.String, decoder: (OpenWeb3Lib.PostboxDecoder) -> Any?) -> Any?
  final public func decodeObjectForKeyThrowing(_ key: Swift.String, decoder: (OpenWeb3Lib.PostboxDecoder) throws -> Any) throws -> Any?
  final public func decodeInt32ArrayForKey(_ key: Swift.String) -> [Swift.Int32]
  final public func decodeInt64ArrayForKey(_ key: Swift.String) -> [Swift.Int64]
  final public func decodeObjectArrayWithDecoderForKey<T>(_ key: Swift.String) -> [T] where T : OpenWeb3Lib.PostboxCoding
  final public func decodeOptionalObjectArrayWithDecoderForKey<T>(_ key: Swift.String) -> [T]? where T : OpenWeb3Lib.PostboxCoding
  final public func decodeObjectArrayWithCustomDecoderForKey<T>(_ key: Swift.String, decoder: (OpenWeb3Lib.PostboxDecoder) throws -> T) throws -> [T]
  final public func decodeStringArrayForKey(_ key: Swift.String) -> [Swift.String]
  final public func decodeOptionalStringArrayForKey(_ key: Swift.String) -> [Swift.String]?
  final public func decodeStringArrayRaw() -> [Swift.String]
  final public func decodeBytesArrayForKey(_ key: Swift.String) -> [OpenWeb3Lib.MemoryBuffer]
  final public func decodeOptionalDataArrayForKey(_ key: Swift.String) -> [Foundation.Data]?
  final public func decodeObjectArrayForKey<T>(_ key: Swift.String) -> [T] where T : OpenWeb3Lib.PostboxCoding
  final public func decodeObjectArrayForKey(_ key: Swift.String) -> [any OpenWeb3Lib.PostboxCoding]
  final public func decodeObjectDictionaryForKey<K, V>(_ key: Swift.String) -> [K : V] where K : OpenWeb3Lib.PostboxCoding, K : Swift.Hashable, V : OpenWeb3Lib.PostboxCoding
  final public func decodeObjectDictionaryForKey<K, V>(_ key: Swift.String, keyDecoder: (OpenWeb3Lib.PostboxDecoder) -> K) -> [K : V] where K : Swift.Hashable, V : OpenWeb3Lib.PostboxCoding
  final public func decodeObjectDictionaryForKey<K, V>(_ key: Swift.String, keyDecoder: (OpenWeb3Lib.PostboxDecoder) -> K, valueDecoder: (OpenWeb3Lib.PostboxDecoder) -> V) -> [K : V] where K : Swift.Hashable, V : OpenWeb3Lib.PostboxCoding
  final public func decodeObjectDataDictRaw() -> [(Foundation.Data, Foundation.Data)]
  final public func decodeBytesForKeyNoCopy(_ key: Swift.String) -> OpenWeb3Lib.ReadBuffer?
  final public func decodeBytesForKey(_ key: Swift.String) -> OpenWeb3Lib.ReadBuffer?
  final public func decodeDataForKey(_ key: Swift.String) -> Foundation.Data?
  final public func decode<T>(_ type: T.Type, forKey key: Swift.String) -> T? where T : Swift.Decodable
  final public func decodeArray<T>(_ type: [T].Type, forKey key: Swift.String) -> [T]? where T : Swift.Decodable
  @objc deinit
}
@objc final public class NavigationBarBadgeNode : OpenWeb3LibPrivite.ASDisplayNode {
  public init(fillColor: UIKit.UIColor, strokeColor: UIKit.UIColor, textColor: UIKit.UIColor)
  @objc override final public func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
public func encodePresentationTheme(_ theme: OpenWeb3Lib.PresentationTheme) -> Swift.String?
public enum PresentationThemeDecodingError : Swift.Error {
  case generic
  case dataCorrupted
  case valueNotFound
  case typeMismatch
  case keyNotFound
  public static func == (a: OpenWeb3Lib.PresentationThemeDecodingError, b: OpenWeb3Lib.PresentationThemeDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func makePresentationTheme(data: Foundation.Data, themeReference: OpenWeb3Lib.PresentationThemeReference? = nil) -> OpenWeb3Lib.PresentationTheme?
public let defaultDarkTintedPresentationTheme: OpenWeb3Lib.PresentationTheme
public func customizeDefaultDarkTintedPresentationTheme(theme: OpenWeb3Lib.PresentationTheme, editing: Swift.Bool, title: Swift.String?, accentColor: UIKit.UIColor?, backgroundColors: [Swift.UInt32], bubbleColors: [Swift.UInt32], animateBubbleColors: Swift.Bool?, baseColor: OpenWeb3Lib.PresentationThemeBaseColor? = nil) -> OpenWeb3Lib.PresentationTheme
public func makeDefaultDarkTintedPresentationTheme(extendingThemeReference: OpenWeb3Lib.PresentationThemeReference? = nil, preview: Swift.Bool) -> OpenWeb3Lib.PresentationTheme
extension OpenWeb3Lib.PresentationThemeStatusBarStyle : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeActionSheetBackgroundType : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeKeyboardColor : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeExpandedNotificationBackgroundType : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeGradientColors : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeIntro : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemePasscode : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeRootTabBar : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeRootNavigationBar : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeNavigationSearchBar : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeRootController : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeActionSheet : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeSwitch : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeFillForeground : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeItemDisclosureActions : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeItemBarChart : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeFillStrokeForeground : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationInputFieldTheme : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeList.PaymentOption : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeList : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeArchiveAvatarColors : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeVariableColor : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemePartedColors : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeServiceMessageColorComponents : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeInputMediaPanel : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeInputButtonPanel : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeExpandedNotification : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeContextMenu : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeInAppNotification : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeChart : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeName : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationBuiltinThemeReference : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationTheme : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension OpenWeb3Lib.PresentationThemeExpandedNotificationNavigationBar : Swift.Codable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class WebAppCancelButtonNode : OpenWeb3LibPrivite.ASDisplayNode {
  public enum State {
    case cancel
    case back
    public static func == (a: OpenWeb3Lib.WebAppCancelButtonNode.State, b: OpenWeb3Lib.WebAppCancelButtonNode.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let buttonNode: OpenWeb3Lib.HighlightTrackingButtonNode
  public var state: OpenWeb3Lib.WebAppCancelButtonNode.State
  public func updateColor(_ color: UIKit.UIColor?, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  public init(resourceProvider: any OpenWeb3Lib.IResourceProvider)
  public func setState(_ state: OpenWeb3Lib.WebAppCancelButtonNode.State, animated: Swift.Bool, animateScale: Swift.Bool = true, force: Swift.Bool = false)
  @objc override dynamic public func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
public enum KeepWebViewError {
  case generic
  public static func == (a: OpenWeb3Lib.KeepWebViewError, b: OpenWeb3Lib.KeepWebViewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGSize {
  public func centered(in rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  public func centered(around position: CoreFoundation.CGPoint) -> CoreFoundation.CGRect
  public func leftCentered(in rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  public func rightCentered(in rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  public func topCentered(in rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  public func bottomCentered(in rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
}
public func bezierPoint(_ x1: CoreFoundation.CGFloat, _ y1: CoreFoundation.CGFloat, _ x2: CoreFoundation.CGFloat, _ y2: CoreFoundation.CGFloat, _ x: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
final public class QueueLocalObject<T> where T : AnyObject {
  final public let queue: OpenWeb3Lib.Queue
  public init(queue: OpenWeb3Lib.Queue, generate: @escaping () -> T)
  @objc deinit
  final public func unsafeGet() -> T?
  final public func with(_ f: @escaping (T) -> Swift.Void)
  final public func syncWith<R>(_ f: @escaping (T) -> R) -> R
  final public func signalWith<R, E>(_ f: @escaping (T, OpenWeb3Lib.Subscriber<R, E>) -> any OpenWeb3Lib.Disposable) -> OpenWeb3Lib.Signal<R, E>
}
public func isViewVisibleInHierarchy(_ view: UIKit.UIView, _ initial: Swift.Bool = true) -> Swift.Bool
@objc final public class HierarchyTrackingNode : OpenWeb3LibPrivite.ASDisplayNode {
  public init(_ f: @escaping (Swift.Bool) -> Swift.Void)
  @objc override final public func didEnterHierarchy()
  @objc override final public func didExitHierarchy()
  @objc deinit
}
public func compactNumericCountString(_ count: Swift.Int, decimalSeparator: Swift.String = ".") -> Swift.String
public func presentationStringsFormattedNumber(_ count: Swift.Int32, _ groupingSeparator: Swift.String = "") -> Swift.String
public enum TimeIntervalStringUsage {
  case generic
  case afterTime
  case timer
  public static func == (a: OpenWeb3Lib.TimeIntervalStringUsage, b: OpenWeb3Lib.TimeIntervalStringUsage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ActionSheetGroupOverlayNode : OpenWeb3LibPrivite.ASDisplayNode {
  func updateLayout(size: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
}
@objc @_Concurrency.MainActor @preconcurrency open class ActionSheetController : OpenWeb3Lib.ViewController, OpenWeb3Lib.PresentableController, OpenWeb3Lib.StandalonePresentableController, OpenWeb3Lib.KeyShortcutResponder {
  @_Concurrency.MainActor @preconcurrency public var theme: OpenWeb3Lib.ActionSheetControllerTheme {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dismissed: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(theme: OpenWeb3Lib.ActionSheetControllerTheme, allowInputInset: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func dismissAnimated()
  @_Concurrency.MainActor @preconcurrency override open func loadDisplayNode()
  @_Concurrency.MainActor @preconcurrency override open func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func viewDidAppear(completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setItemGroups(_ groups: [OpenWeb3Lib.ActionSheetItemGroup])
  @_Concurrency.MainActor @preconcurrency public func updateItem(groupIndex: Swift.Int, itemIndex: Swift.Int, _ f: (any OpenWeb3Lib.ActionSheetItem) -> any OpenWeb3Lib.ActionSheetItem)
  @_Concurrency.MainActor @preconcurrency public func setItemGroupOverlayNode(groupIndex: Swift.Int, node: any OpenWeb3Lib.ActionSheetGroupOverlayNode)
  @_Concurrency.MainActor @preconcurrency public var keyShortcuts: [OpenWeb3Lib.KeyShortcut] {
    get
  }
  @objc deinit
}
public func formatWithArgumentRanges(_ value: Swift.String, _ ranges: [(Swift.Int, Foundation.NSRange)], _ arguments: [Swift.String]) -> (Swift.String, [(Swift.Int, Foundation.NSRange)])
public func countString(_ count: Swift.Int64, forceDecimal: Swift.Bool = false) -> Swift.String
final public class Multicast<T> {
  public init()
  final public func get(key: Swift.String, signal: OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>) -> OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>
  @objc deinit
}
final public class MulticastPromise<T> {
  final public let subscribers: OpenWeb3Lib.Bag<(T) -> Swift.Void>
  final public let lock: OpenWeb3Lib.Lock
  final public var value: T?
  public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class WindowCoveringView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open func updateLayout(_ size: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum TapLongTapOrDoubleTapGesture {
  case tap
  case doubleTap
  case longTap
  case secondaryTap
  case hold
  public static func == (a: OpenWeb3Lib.TapLongTapOrDoubleTapGesture, b: OpenWeb3Lib.TapLongTapOrDoubleTapGesture) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TapLongTapOrDoubleTapGestureRecognizerAction {
  case waitForDoubleTap
  case waitForSingleTap
  case waitForHold(timeout: Swift.Double, acceptTap: Swift.Bool)
  case fail
  case keepWithSingleTap
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class TapLongTapOrDoubleTapGestureRecognizer : UIKit.UIGestureRecognizer, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency final public var lastRecognizedGestureAndLocation: (OpenWeb3Lib.TapLongTapOrDoubleTapGesture, CoreFoundation.CGPoint)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var tapActionAtPoint: ((CoreFoundation.CGPoint) -> OpenWeb3Lib.TapLongTapOrDoubleTapGestureRecognizerAction)?
  @_Concurrency.MainActor @preconcurrency final public var longTap: ((CoreFoundation.CGPoint, OpenWeb3Lib.TapLongTapOrDoubleTapGestureRecognizer) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var secondaryTap: ((CoreFoundation.CGPoint, OpenWeb3Lib.TapLongTapOrDoubleTapGestureRecognizer) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var externalUpdated: ((UIKit.UIView?, CoreFoundation.CGPoint) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var externalEnded: (((UIKit.UIView?, CoreFoundation.CGPoint)?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var highlight: ((CoreFoundation.CGPoint?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var hapticFeedback: OpenWeb3Lib.HapticFeedback?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @_Concurrency.MainActor @preconcurrency @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public func reset()
  @_Concurrency.MainActor @preconcurrency final public func cancel()
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @objc deinit
}
public struct PresentationResources {
}
public enum PresentationResourceKey : Swift.Int32 {
  case rootNavigationIndefiniteActivity
  case rootTabContactsIcon
  case rootTabContactsSelectedIcon
  case rootTabChatsIcon
  case rootTabChatsSelectedIcon
  case rootTabSettingsIcon
  case rootTabSettingsSelectedIcon
  case navigationComposeIcon
  case navigationCallIcon
  case navigationInfoIcon
  case navigationShareIcon
  case navigationSearchIcon
  case navigationCompactSearchIcon
  case navigationCompactSearchWhiteIcon
  case navigationCompactTagsSearchIcon
  case navigationCompactTagsSearchWhiteIcon
  case navigationCalendarIcon
  case navigationMoreIcon
  case navigationMoreCircledIcon
  case navigationAddIcon
  case navigationPlayerCloseButton
  case navigationQrCodeIcon
  case navigationLiveLocationIcon
  case navigationPlayerRateActiveIcon
  case navigationPlayerRateInactiveIcon
  case navigationPlayerMaximizedRateActiveIcon
  case navigationPlayerMaximizedRateInactiveIcon
  case itemListDownArrow
  case itemListDisclosureArrow
  case disclosureOptionArrowsImage
  case itemListDisclosureLocked
  case itemListCheckIcon
  case itemListSecondaryCheckIcon
  case itemListPlusIcon
  case itemListRoundPlusIcon
  case itemListDeleteIcon
  case itemListDeleteIndicatorIcon
  case itemListReorderIndicatorIcon
  case itemListLinkIcon
  case itemListAddPersonIcon
  case itemListCreateGroupIcon
  case itemListAddExceptionIcon
  case itemListAddPhoneIcon
  case itemListAddPhotoIcon
  case itemListClearInputIcon
  case itemListStickerItemUnreadDot
  case itemListVerifiedPeerIcon
  case itemListCloudFetchIcon
  case itemListCloseIconImage
  case itemListRemoveIconImage
  case itemListMakeVisibleIcon
  case itemListMakeInvisibleIcon
  case itemListEditThemeIcon
  case itemListCornersTop
  case itemListCornersBottom
  case itemListCornersBoth
  case itemListKnob
  case itemListBlockAccentIcon
  case itemListBlockDestructiveIcon
  case itemListAddDeviceIcon
  case itemListResetIcon
  case itemListImageIcon
  case itemListCloudIcon
  case itemListTopicArrowIcon
  case itemListAddBoostsIcon
  case itemListPremiumIcon
  case statsReactionsIcon
  case statsForwardsIcon
  case itemListVoiceCallIcon
  case itemListVideoCallIcon
  case chatListLockTopUnlockedImage
  case chatListLockBottomUnlockedImage
  case chatListPending
  case chatListClockFrame
  case chatListClockMin
  case chatListSingleCheck
  case chatListDoubleCheck
  case chatListBadgeBackgroundActive
  case chatListBadgeBackgroundInactive
  case chatListBadgeBackgroundMention
  case chatListBadgeBackgroundInactiveMention
  case chatListBadgeBackgroundPinned
  case chatListMutedIcon
  case chatListVerifiedIcon
  case chatListPremiumIcon
  case chatListScamRegularIcon
  case chatListScamOutgoingIcon
  case chatListScamServiceIcon
  case chatListFakeRegularIcon
  case chatListFakeOutgoingIcon
  case chatListFakeServiceIcon
  case chatListSecretIcon
  case chatListStatusLockIcon
  case chatListTopicArrowIcon
  case chatListRecentStatusOnlineIcon
  case chatListRecentStatusOnlineHighlightedIcon
  case chatListRecentStatusOnlinePinnedIcon
  case chatListRecentStatusOnlinePanelIcon
  case chatListRecentStatusVoiceChatIcon
  case chatListRecentStatusVoiceChatHighlightedIcon
  case chatListRecentStatusVoiceChatPinnedIcon
  case chatListRecentStatusVoiceChatPanelIcon
  case chatListForwardedIcon
  case chatListStoryReplyIcon
  case chatListGeneralTopicIcon
  case chatListGeneralTopicSmallIcon
  case chatTitleLockIcon
  case chatTitleMuteIcon
  case chatPanelLockIcon
  case chatPanelBoostIcon
  case chatBubbleVerticalLineIncomingImage
  case chatBubbleVerticalLineOutgoingImage
  case chatBubbleArrowFreeImage
  case chatBubbleArrowIncomingImage
  case chatBubbleArrowOutgoingImage
  case chatBubbleCheckBubbleFullImage
  case chatBubbleBubblePartialImage
  case checkBubbleMediaFullImage
  case checkBubbleMediaPartialImage
  case chatBubbleConsumableContentIncomingIcon
  case chatBubbleConsumableContentOutgoingIcon
  case chatMediaConsumableContentIcon
  case chatBubbleMediaOverlayControlSecret
  case chatInstantVideoWithWallpaperBackgroundImage
  case chatInstantVideoWithoutWallpaperBackgroundImage
  case chatActionPhotoWithWallpaperBackgroundImage
  case chatActionPhotoWithoutWallpaperBackgroundImage
  case chatUnreadBarBackgroundImage
  case chatBubbleFileCloudFetchMediaIcon
  case chatBubbleFileCloudFetchIncomingIcon
  case chatBubbleFileCloudFetchOutgoingIcon
  case chatBubbleFileCloudFetchedIncomingIcon
  case chatBubbleFileCloudFetchedOutgoingIcon
  case chatBubbleReplyThumbnailPlayImage
  case chatBubbleDeliveryFailedIcon
  case chatInfoItemBackgroundImageWithWallpaper
  case chatInfoItemBackgroundImageWithoutWallpaper
  case chatInputPanelCloseIconImage
  case chatInputPanelPinnedListIconImage
  case chatInputPanelEncircledCloseIconImage
  case chatInputPanelVerticalSeparatorLineImage
  case chatInputPanelForwardIconImage
  case chatInputPanelReplyIconImage
  case chatInputPanelEditIconImage
  case chatInputPanelWebpageIconImage
  case chatInputMediaPanelAddPackButtonImage
  case chatInputMediaPanelAddedPackButtonImage
  case chatInputMediaPanelGridSetupImage
  case chatInputMediaPanelGridDismissImage
  case chatInputButtonPanelButtonHighlightImage
  case chatInputButtonPanelButtonShadowImage
  case chatInputTextFieldBackgroundImage
  case chatInputTextFieldClearImage
  case chatInputPanelSendIconImage
  case chatInputPanelSendButtonImage
  case chatInputPanelApplyIconImage
  case chatInputPanelApplyButtonImage
  case chatInputPanelScheduleIconImage
  case chatInputPanelScheduleButtonImage
  case chatInputPanelVoiceButtonImage
  case chatInputPanelVideoButtonImage
  case chatInputPanelExpandButtonImage
  case chatInputPanelVoiceActiveButtonImage
  case chatInputPanelVideoActiveButtonImage
  case chatInputPanelAttachmentButtonImage
  case chatInputPanelEditAttachmentButtonImage
  case chatInputPanelMediaRecordingDotImage
  case chatInputPanelMediaRecordingCancelArrowImage
  case chatInputTextFieldStickersImage
  case chatInputTextFieldInputButtonsImage
  case chatInputTextFieldKeyboardImage
  case chatInputTextFieldCommandsImage
  case chatInputTextFieldSilentPostOnImage
  case chatInputTextFieldSilentPostOffImage
  case chatInputTextFieldTimerImage
  case chatInputTextFieldScheduleImage
  case chatInputTextFieldGiftImage
  case chatInputSearchPanelUpImage
  case chatInputSearchPanelUpDisabledImage
  case chatInputSearchPanelDownImage
  case chatInputSearchPanelDownDisabledImage
  case chatInputSearchPanelCalendarImage
  case chatInputSearchPanelMembersImage
  case chatHistoryNavigationButtonBackground
  case chatHistoryNavigationButtonImage
  case chatHistoryNavigationUpButtonImage
  case chatHistoryMentionsButtonImage
  case chatHistoryReactionsButtonImage
  case chatHistoryNavigationButtonBadgeImage
  case chatMessageAttachedContentButtonIncoming
  case chatMessageAttachedContentHighlightedButtonIncoming
  case chatMessageAttachedContentButtonOutgoing
  case chatMessageAttachedContentHighlightedButtonOutgoing
  case chatMessageAttachedContentButtonIconInstantIncoming
  case chatMessageAttachedContentHighlightedButtonIconInstantIncomingWithWallpaper
  case chatMessageAttachedContentHighlightedButtonIconInstantIncomingWithoutWallpaper
  case chatMessageAttachedContentButtonIconInstantOutgoing
  case chatMessageAttachedContentHighlightedButtonIconInstantOutgoingWithWallpaper
  case chatMessageAttachedContentHighlightedButtonIconInstantOutgoingWithoutWallpaper
  case chatMessageAttachedContentButtonIconLinkIncoming
  case chatMessageAttachedContentHighlightedButtonIconLinkIncomingWithWallpaper
  case chatMessageAttachedContentHighlightedButtonIconLinkIncomingWithoutWallpaper
  case chatMessageAttachedContentButtonIconLinkOutgoing
  case chatMessageAttachedContentHighlightedButtonIconLinkOutgoingWithWallpaper
  case chatMessageAttachedContentHighlightedButtonIconLinkOutgoingWithoutWallpaper
  case chatCommandPanelArrowImage
  case sharedMediaFileDownloadStartIcon
  case sharedMediaFileDownloadPauseIcon
  case sharedMediaInstantViewIcon
  case chatInfoCallButtonImage
  case chatInstantMessageInfoBackgroundImage
  case chatInstantMessageMuteIconImage
  case chatBubbleIncomingCallButtonImage
  case chatBubbleOutgoingCallButtonImage
  case chatBubbleIncomingVideoCallButtonImage
  case chatBubbleOutgoingVideoCallButtonImage
  case callListOutgoingIcon
  case callListOutgoingVideoIcon
  case callListInfoButton
  case genericSearchBarLoupeImage
  case genericSearchBar
  case inAppNotificationBackground
  case groupInfoAdminsIcon
  case groupInfoPermissionsIcon
  case groupInfoMembersIcon
  case emptyChatListCheckIcon
  case chatFreeCommentButtonIcon
  case chatFreeNavigateButtonIcon
  case chatFreeShareButtonIcon
  case chatFreeCloseButtonIcon
  case chatFreeMoreButtonIcon
  case chatKeyboardActionButtonMessageIcon
  case chatKeyboardActionButtonLinkIcon
  case chatKeyboardActionButtonShareIcon
  case chatKeyboardActionButtonPhoneIcon
  case chatKeyboardActionButtonLocationIcon
  case chatKeyboardActionButtonPaymentIcon
  case chatKeyboardActionButtonProfileIcon
  case chatKeyboardActionButtonAddToChatIcon
  case chatKeyboardActionButtonWebAppIcon
  case chatGeneralThreadIcon
  case chatGeneralThreadIncomingIcon
  case chatGeneralThreadOutgoingIcon
  case chatGeneralThreadFreeIcon
  case uploadToneIcon
  case storyViewListLikeIcon
  case navigationPostStoryIcon
  case chatReplyBackgroundTemplateIncomingImage
  case chatReplyBackgroundTemplateOutgoingDashedImage
  case chatReplyServiceBackgroundTemplateImage
  case chatBubbleCloseIcon
  case avatarPremiumLockBadgeBackground
  case avatarPremiumLockBadge
  case shareAvatarPremiumLockBadgeBackground
  case shareAvatarPremiumLockBadge
  case sharedLinkIcon
  case hideIconImage
  case peerStatusLockedImage
  case expandDownArrowImage
  case expandSmallDownArrowImage
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ChatExpiredStoryIndicatorType : Swift.Hashable {
  case incoming
  case outgoing
  case free
  public static func == (a: OpenWeb3Lib.ChatExpiredStoryIndicatorType, b: OpenWeb3Lib.ChatExpiredStoryIndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PresentationResourceParameterKey : Swift.Hashable {
  case chatOutgoingFullCheck(CoreFoundation.CGFloat)
  case chatOutgoingPartialCheck(CoreFoundation.CGFloat)
  case chatMediaFullCheck(CoreFoundation.CGFloat)
  case chatMediaPartialCheck(CoreFoundation.CGFloat)
  case chatFreeFullCheck(CoreFoundation.CGFloat, Swift.Bool)
  case chatFreePartialCheck(CoreFoundation.CGFloat, Swift.Bool)
  case chatListBadgeBackgroundActive(CoreFoundation.CGFloat)
  case chatListBadgeBackgroundActiveProvisional(CoreFoundation.CGFloat)
  case chatListBadgeBackgroundInactive(CoreFoundation.CGFloat)
  case chatListBadgeBackgroundInactiveProvisional(CoreFoundation.CGFloat)
  case chatListBadgeBackgroundMention(CoreFoundation.CGFloat)
  case badgeBackgroundReactions(CoreFoundation.CGFloat)
  case badgeBackgroundInactiveReactions(CoreFoundation.CGFloat)
  case chatListBadgeBackgroundInactiveMention(CoreFoundation.CGFloat)
  case chatListBadgeBackgroundPinned(CoreFoundation.CGFloat)
  case badgeBackgroundBorder(CoreFoundation.CGFloat)
  case chatBubbleMediaCorner(incoming: Swift.Bool, mainRadius: CoreFoundation.CGFloat, inset: CoreFoundation.CGFloat)
  case chatPrincipalThemeEssentialGraphics(hasWallpaper: Swift.Bool, bubbleCorners: OpenWeb3Lib.PresentationChatBubbleCorners)
  case chatPrincipalThemeAdditionalGraphics(isCustomWallpaper: Swift.Bool, bubbleCorners: OpenWeb3Lib.PresentationChatBubbleCorners)
  case chatBubbleLamp(incoming: Swift.Bool)
  case chatPsaInfo(color: Swift.UInt32)
  case chatMessageCommentsIcon(incoming: Swift.Bool)
  case chatMessageCommentsArrowIcon(incoming: Swift.Bool)
  case chatMessageCommentsUnreadDotIcon(incoming: Swift.Bool)
  case chatMessageRepliesIcon(incoming: Swift.Bool)
  case chatEntityKeyboardLock(color: Swift.UInt32)
  case chatInputMediaPanelGridDismissImage(color: Swift.UInt32)
  case statusAutoremoveIcon(isActive: Swift.Bool)
  case chatExpiredStoryIndicatorIcon(type: OpenWeb3Lib.ChatExpiredStoryIndicatorType)
  case chatReplyStoryIndicatorIcon(type: OpenWeb3Lib.ChatExpiredStoryIndicatorType)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.PresentationResourceParameterKey, b: OpenWeb3Lib.PresentationResourceParameterKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PointerStyle {
  case `default`
  case insetRectangle(CoreFoundation.CGFloat, CoreFoundation.CGFloat)
  case rectangle(CoreFoundation.CGSize)
  case circle(CoreFoundation.CGFloat?)
  case caret
  case lift
  case hover
}
final public class PointerInteraction {
  convenience public init(node: OpenWeb3LibPrivite.ASDisplayNode, style: OpenWeb3Lib.PointerStyle = .default, willEnter: @escaping () -> Swift.Void = {}, willExit: @escaping () -> Swift.Void = {})
  public init(view: UIKit.UIView, customInteractionView: UIKit.UIView? = nil, style: OpenWeb3Lib.PointerStyle = .default, willEnter: @escaping () -> Swift.Void = {}, willExit: @escaping () -> Swift.Void = {})
  @objc deinit
}
public func map<T, E, R>(_ f: @escaping (T) -> R) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<R, E>
public func filter<T, E>(_ f: @escaping (T) -> Swift.Bool) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func flatMap<T, E, R>(_ f: @escaping (T) -> R) -> (OpenWeb3Lib.Signal<T?, E>) -> OpenWeb3Lib.Signal<R?, E>
public func mapError<T, E, R>(_ f: @escaping (E) -> R) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, R>
public func castError<T, E>(_ type: E.Type) -> (OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>) -> OpenWeb3Lib.Signal<T, E>
public func distinctUntilChanged<T, E>(_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E> where T : Swift.Equatable
public func distinctUntilChanged<T, E>(isEqual: @escaping (T, T) -> Swift.Bool) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
final public class Action<Arguments> {
  final public let action: (Arguments) -> Swift.Void
  public init(_ action: @escaping (Arguments) -> Swift.Void)
  final public func callAsFunction(_ arguments: Arguments)
  @objc deinit
}
final public class ActionSlot<Arguments> : Swift.Equatable {
  public init()
  public static func == (lhs: OpenWeb3Lib.ActionSlot<Arguments>, rhs: OpenWeb3Lib.ActionSlot<Arguments>) -> Swift.Bool
  final public func connect(_ target: @escaping (Arguments) -> Swift.Void)
  final public func invoke(_ arguments: Arguments)
  @objc deinit
}
public protocol GridSection {
  var height: CoreFoundation.CGFloat { get }
  var hashValue: Swift.Int { get }
  func isEqual(to: any OpenWeb3Lib.GridSection) -> Swift.Bool
  func node() -> OpenWeb3LibPrivite.ASDisplayNode
}
public protocol GridItem {
  var section: (any OpenWeb3Lib.GridSection)? { get }
  func node(layout: OpenWeb3Lib.GridNodeLayout, synchronousLoad: Swift.Bool) -> OpenWeb3Lib.GridItemNode
  func update(node: OpenWeb3Lib.GridItemNode)
  var aspectRatio: CoreFoundation.CGFloat { get }
  var fillsRowWithHeight: (CoreFoundation.CGFloat, Swift.Bool)? { get }
  var fillsRowWithDynamicHeight: ((CoreFoundation.CGFloat) -> CoreFoundation.CGFloat)? { get }
  var customItemSize: CoreFoundation.CGSize? { get }
}
extension OpenWeb3Lib.GridItem {
  public var aspectRatio: CoreFoundation.CGFloat {
    get
  }
  public var fillsRowWithHeight: (CoreFoundation.CGFloat, Swift.Bool)? {
    get
  }
  public var fillsRowWithDynamicHeight: ((CoreFoundation.CGFloat) -> CoreFoundation.CGFloat)? {
    get
  }
  public var customItemSize: CoreFoundation.CGSize? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PresentationsResourceCache {
  final public func image(_ key: Swift.Int32, _ theme: OpenWeb3Lib.PresentationTheme, _ generate: (OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?) -> UIKit.UIImage?
  final public func parameterImage(_ key: OpenWeb3Lib.PresentationResourceParameterKey, _ theme: OpenWeb3Lib.PresentationTheme, _ generate: (OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?) -> UIKit.UIImage?
  final public func object(_ key: Swift.Int32, _ theme: OpenWeb3Lib.PresentationTheme, _ generate: (OpenWeb3Lib.PresentationTheme) -> Swift.AnyObject?) -> Swift.AnyObject?
  final public func parameterObject(_ key: OpenWeb3Lib.PresentationResourceParameterKey, _ theme: OpenWeb3Lib.PresentationTheme, _ generate: (OpenWeb3Lib.PresentationTheme) -> Swift.AnyObject?) -> Swift.AnyObject?
  @objc deinit
}
public protocol AccessibilityFocusableNode {
  func accessibilityElementDidBecomeFocused()
}
@objc final public class AccessibilityAreaNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var activate: (() -> Swift.Bool)?
  final public var increment: (() -> Swift.Void)?
  final public var decrement: (() -> Swift.Void)?
  final public var focused: (() -> Swift.Void)?
  @objc override dynamic public init()
  @objc override final public func accessibilityActivate() -> Swift.Bool
  @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc override final public func accessibilityElementDidBecomeFocused()
  @objc override final public func accessibilityIncrement()
  @objc override final public func accessibilityDecrement()
  @objc deinit
}
public enum Keyboard {
  public static func applyAutocorrection(textView: UIKit.UITextView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class TextFieldNodeView : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency final public var didDeleteBackwardWhileEmpty: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override final public func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override final public func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override final public func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override final public func deleteBackward()
  @_Concurrency.MainActor @preconcurrency @objc override final public var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class TextFieldNode : OpenWeb3LibPrivite.ASDisplayNode {
  public var textField: OpenWeb3Lib.TextFieldNodeView {
    get
  }
  public var fixOffset: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
public func webAppLaunchConfirmationController(context: any OpenWeb3Lib.AccountContext, updatedPresentationData: (initial: OpenWeb3Lib.PresentationData, signal: OpenWeb3Lib.Signal<OpenWeb3Lib.PresentationData, OpenWeb3Lib.NoError>)?, requestWriteAccess: Swift.Bool = false, completion: @escaping (Swift.Bool) -> Swift.Void, showMore: (() -> Swift.Void)?) -> OpenWeb3Lib.AlertController
public protocol NavigationButtonCustomDisplayNode {
  var isHighlightable: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers final public class NavigationButtonNode : OpenWeb3Lib.ContextControllerSourceNode {
  final public var singleCustomNode: OpenWeb3LibPrivite.ASDisplayNode? {
    get
  }
  final public var mainContentNode: OpenWeb3LibPrivite.ASDisplayNode? {
    get
  }
  final public var pressed: (Swift.Int) -> ()
  final public var highlightChanged: (Swift.Int, Swift.Bool) -> ()
  final public var color: UIKit.UIColor {
    get
    set
  }
  final public var rippleColor: UIKit.UIColor {
    get
    set
  }
  final public var disabledColor: UIKit.UIColor {
    get
    set
  }
  @objc override final public var accessibilityElements: [Any]? {
    @objc get
    @objc set(value)
  }
  @objc override dynamic public init()
  final public var contentsColor: UIKit.UIColor?
  final public func updateManualAlpha(alpha: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  final public func updateLayout(constrainedSize: CoreFoundation.CGSize, isLandscape: Swift.Bool) -> CoreFoundation.CGSize
  @objc deinit
}
@objc open class ContextReferenceContentNode : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class ContextExtractedContentContainingNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public let contentNode: OpenWeb3Lib.ContextExtractedContentNode
  final public var contentRect: CoreFoundation.CGRect
  final public var isExtractedToContextPreview: Swift.Bool
  final public var willUpdateIsExtractedToContextPreview: ((Swift.Bool, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  final public var isExtractedToContextPreviewUpdated: ((Swift.Bool) -> Swift.Void)?
  final public var updateAbsoluteRect: ((CoreFoundation.CGRect, CoreFoundation.CGSize) -> Swift.Void)?
  final public var applyAbsoluteOffset: ((CoreFoundation.CGPoint, OpenWeb3Lib.ContainedViewLayoutTransitionCurve, Swift.Double) -> Swift.Void)?
  final public var applyAbsoluteOffsetSpring: ((CoreFoundation.CGFloat, Swift.Double, CoreFoundation.CGFloat) -> Swift.Void)?
  final public var layoutUpdated: ((CoreFoundation.CGSize, OpenWeb3Lib.ListViewItemUpdateAnimation) -> Swift.Void)?
  final public var updateDistractionFreeMode: ((Swift.Bool) -> Swift.Void)?
  final public var requestDismiss: (() -> Swift.Void)?
  @objc override dynamic public init()
  @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ContextExtractedContentContainingView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let contentView: OpenWeb3Lib.ContextExtractedContentView
  @_Concurrency.MainActor @preconcurrency final public var contentRect: CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency final public var isExtractedToContextPreview: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var willUpdateIsExtractedToContextPreview: ((Swift.Bool, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var isExtractedToContextPreviewUpdated: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var updateAbsoluteRect: ((CoreFoundation.CGRect, CoreFoundation.CGSize) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var applyAbsoluteOffset: ((CoreFoundation.CGPoint, OpenWeb3Lib.ContainedViewLayoutTransitionCurve, Swift.Double) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var applyAbsoluteOffsetSpring: ((CoreFoundation.CGFloat, Swift.Double, CoreFoundation.CGFloat) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var layoutUpdated: ((CoreFoundation.CGSize, OpenWeb3Lib.ListViewItemUpdateAnimation) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var updateDistractionFreeMode: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var requestDismiss: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc final public class ContextExtractedContentNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var customHitTest: ((CoreFoundation.CGPoint) -> UIKit.UIView?)? {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ContextExtractedContentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var customHitTest: ((CoreFoundation.CGPoint) -> UIKit.UIView?)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc final public class ContextControllerContentNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public let sourceView: UIKit.UIView
  final public let controller: OpenWeb3Lib.ViewController
  public init(sourceView: UIKit.UIView, controller: OpenWeb3Lib.ViewController, tapped: @escaping () -> Swift.Void)
  @objc override final public func didLoad()
  final public func updateLayout(size: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc deinit
}
public enum ContextContentNode {
  case reference(view: UIKit.UIView)
  case extracted(node: OpenWeb3Lib.ContextExtractedContentContainingNode, keepInPlace: Swift.Bool)
  case controller(OpenWeb3Lib.ContextControllerContentNode)
}
public struct PresentationResourcesCallList {
  public static func outgoingIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func outgoingVideoIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func infoButton(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
}
@objc final public class EscapeNotification : ObjectiveC.NSObject {
  public init(_ deallocated: @escaping () -> Swift.Void)
  @objc deinit
  final public func keep()
}
public protocol BridgeProvider {
  func onWebViewCreated(_ webView: WebKit.WKWebView)
  func onWebViewDestroy()
  func onWebPageLoaded()
  var navigationDelegate: () -> (any WebKit.WKNavigationDelegate)? { get set }
  var uIDelegate: () -> (any WebKit.WKUIDelegate)? { get set }
}
public enum SignalEvent<T, E> {
  case Next(T)
  case Error(E)
  case Completion
}
public func dematerialize<T, E>(signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<OpenWeb3Lib.SignalEvent<T, E>, OpenWeb3Lib.NoError>
public func materialize<T, E>(signal: OpenWeb3Lib.Signal<OpenWeb3Lib.SignalEvent<T, E>, OpenWeb3Lib.NoError>) -> OpenWeb3Lib.Signal<T, E>
public struct StringCodingKey : Swift.CodingKey, Swift.ExpressibleByStringLiteral {
  public var stringValue: Swift.String
  public init?(stringValue: Swift.String)
  public init(_ stringValue: Swift.String)
  public init(stringLiteral: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
final public class ActionSheetItemGroup {
  public init(items: [any OpenWeb3Lib.ActionSheetItem], leadingVisibleNodeCount: CoreFoundation.CGFloat? = nil)
  @objc deinit
}
public enum TextAlertActionType {
  case genericAction
  case defaultAction
  case destructiveAction
  public static func == (a: OpenWeb3Lib.TextAlertActionType, b: OpenWeb3Lib.TextAlertActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TextAlertAction {
  public let type: OpenWeb3Lib.TextAlertActionType
  public let title: Swift.String
  public let action: () -> Swift.Void
  public init(type: OpenWeb3Lib.TextAlertActionType, title: Swift.String, action: @escaping () -> Swift.Void)
}
@objc final public class TextAlertContentActionNode : OpenWeb3Lib.HighlightableButtonNode {
  final public var highlightedUpdated: (Swift.Bool) -> Swift.Void
  public init(theme: OpenWeb3Lib.AlertControllerTheme, action: OpenWeb3Lib.TextAlertAction)
  @objc override final public func didLoad()
  final public func performAction()
  final public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  final public var actionEnabled: Swift.Bool {
    get
    set
  }
  final public func updateTheme(_ theme: OpenWeb3Lib.AlertControllerTheme)
  @objc override final public func layout()
  @objc deinit
}
public enum TextAlertContentActionLayout {
  case horizontal
  case vertical
  public static func == (a: OpenWeb3Lib.TextAlertContentActionLayout, b: OpenWeb3Lib.TextAlertContentActionLayout) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc final public class TextAlertContentNode : OpenWeb3Lib.AlertContentNode {
  override final public var dismissOnOutsideTap: Swift.Bool {
    get
  }
  final public var textAttributeAction: (Foundation.NSAttributedString.Key, (Any) -> Swift.Void)? {
    get
    set
  }
  public init(theme: OpenWeb3Lib.AlertControllerTheme, title: Foundation.NSAttributedString?, text: Foundation.NSAttributedString, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout, dismissOnOutsideTap: Swift.Bool)
  override final public func decreaseHighlightedIndex()
  override final public func increaseHighlightedIndex()
  override final public func performHighlightedAction()
  override final public func updateTheme(_ theme: OpenWeb3Lib.AlertControllerTheme)
  override final public func updateLayout(size: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGSize
  @objc deinit
}
public func textAlertController(theme: OpenWeb3Lib.AlertControllerTheme, title: Foundation.NSAttributedString?, text: Foundation.NSAttributedString, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, dismissOnOutsideTap: Swift.Bool = true) -> OpenWeb3Lib.AlertController
public func standardTextAlertController(theme: OpenWeb3Lib.AlertControllerTheme, title: Swift.String?, text: Swift.String, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, allowInputInset: Swift.Bool = true, parseMarkdown: Swift.Bool = false, dismissOnOutsideTap: Swift.Bool = true) -> OpenWeb3Lib.AlertController
@_hasMissingDesignatedInitializers public class _AnyChildComponent {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class _ConcreteChildComponent<ComponentType> : OpenWeb3Lib._AnyChildComponent where ComponentType : OpenWeb3Lib.Component {
  final public func update(component: ComponentType, @OpenWeb3Lib.EnvironmentBuilder environment: () -> OpenWeb3Lib.Environment<ComponentType.EnvironmentType>, availableSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponent
  @objc deinit
}
extension OpenWeb3Lib._ConcreteChildComponent where ComponentType.EnvironmentType == OpenWeb3Lib.Empty {
  final public func update(component: ComponentType, availableSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponent
}
@_hasMissingDesignatedInitializers final public class _UpdatedChildComponentGuide {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class _ChildComponentGuide {
  final public func update(position: CoreFoundation.CGPoint, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponentGuide
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class _UpdatedChildComponent {
  final public let size: CoreFoundation.CGSize
  @discardableResult
  final public func appear(_ transition: OpenWeb3Lib.Transition.Appear) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func appear(_ transition: OpenWeb3Lib.Transition.AppearWithGuide, guide: OpenWeb3Lib._UpdatedChildComponentGuide) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func disappear(_ transition: OpenWeb3Lib.Transition.Disappear) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func disappear(_ transition: OpenWeb3Lib.Transition.DisappearWithGuide, guide: OpenWeb3Lib._UpdatedChildComponentGuide) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func update(_ transition: OpenWeb3Lib.Transition.Update) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func removed(_ removed: Swift.Bool) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func position(_ position: CoreFoundation.CGPoint) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func scale(_ scale: CoreFoundation.CGFloat) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func opacity(_ opacity: CoreFoundation.CGFloat) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func cornerRadius(_ cornerRadius: CoreFoundation.CGFloat) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func clipsToBounds(_ clipsToBounds: Swift.Bool) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func shadow(_ shadow: OpenWeb3Lib.Shadow?) -> OpenWeb3Lib._UpdatedChildComponent
  @discardableResult
  final public func gesture(_ gesture: OpenWeb3Lib.Gesture) -> OpenWeb3Lib._UpdatedChildComponent
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class _EnvironmentChildComponent<EnvironmentType> : OpenWeb3Lib._AnyChildComponent {
  @objc deinit
}
extension OpenWeb3Lib._EnvironmentChildComponent where EnvironmentType == OpenWeb3Lib.Empty {
  final public func update(component: OpenWeb3Lib.AnyComponent<EnvironmentType>, availableSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponent
}
extension OpenWeb3Lib._EnvironmentChildComponent {
  final public func update<ComponentType>(_ component: ComponentType, @OpenWeb3Lib.EnvironmentBuilder environment: () -> OpenWeb3Lib.Environment<EnvironmentType>, availableSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponent where EnvironmentType == ComponentType.EnvironmentType, ComponentType : OpenWeb3Lib.Component
  final public func update<ComponentType>(_ component: ComponentType, @OpenWeb3Lib.EnvironmentBuilder environment: () -> OpenWeb3Lib.Environment<EnvironmentType>, availableSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponent where EnvironmentType == OpenWeb3Lib.Empty, ComponentType : OpenWeb3Lib.Component, ComponentType.EnvironmentType == OpenWeb3Lib.Empty
}
@_hasMissingDesignatedInitializers final public class _EnvironmentChildComponentFromMap<EnvironmentType> : OpenWeb3Lib._AnyChildComponent {
  final public func update(component: OpenWeb3Lib.AnyComponent<EnvironmentType>, @OpenWeb3Lib.EnvironmentBuilder environment: () -> OpenWeb3Lib.Environment<EnvironmentType>, availableSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponent
  @objc deinit
}
extension OpenWeb3Lib._EnvironmentChildComponentFromMap where EnvironmentType == OpenWeb3Lib.Empty {
  final public func update(component: OpenWeb3Lib.AnyComponent<EnvironmentType>, availableSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.Transition) -> OpenWeb3Lib._UpdatedChildComponent
}
@_hasMissingDesignatedInitializers final public class _EnvironmentChildComponentMap<EnvironmentType, Key> where Key : Swift.Hashable {
  final public subscript(key: Key) -> OpenWeb3Lib._EnvironmentChildComponentFromMap<EnvironmentType> {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CombinedComponentContext<ComponentType> where ComponentType : OpenWeb3Lib.Component {
  final public let view: UIKit.UIView
  final public let component: ComponentType
  final public let availableSize: CoreFoundation.CGSize
  final public let transition: OpenWeb3Lib.Transition
  final public var environment: OpenWeb3Lib.Environment<ComponentType.EnvironmentType> {
    get
  }
  final public var state: ComponentType.State {
    get
  }
  final public func add(_ updatedComponent: OpenWeb3Lib._UpdatedChildComponent)
  @objc deinit
}
public protocol CombinedComponent : OpenWeb3Lib.Component {
  typealias Body = (OpenWeb3Lib.CombinedComponentContext<Self>) -> CoreFoundation.CGSize
  static var body: Self.Body { get }
}
extension OpenWeb3Lib.Transition {
  final public class Appear {
    public init(_ f: @escaping (OpenWeb3Lib._UpdatedChildComponent, UIKit.UIView, OpenWeb3Lib.Transition) -> Swift.Void)
    final public func callAsFunction(component: OpenWeb3Lib._UpdatedChildComponent, view: UIKit.UIView, transition: OpenWeb3Lib.Transition)
    @objc deinit
  }
  final public class AppearWithGuide {
    public init(_ f: @escaping (OpenWeb3Lib._UpdatedChildComponent, UIKit.UIView, CoreFoundation.CGPoint, OpenWeb3Lib.Transition) -> Swift.Void)
    final public func callAsFunction(component: OpenWeb3Lib._UpdatedChildComponent, view: UIKit.UIView, guide: CoreFoundation.CGPoint, transition: OpenWeb3Lib.Transition)
    @objc deinit
  }
  final public class Disappear {
    public init(_ f: @escaping (UIKit.UIView, OpenWeb3Lib.Transition, @escaping () -> Swift.Void) -> Swift.Void)
    final public func callAsFunction(view: UIKit.UIView, transition: OpenWeb3Lib.Transition, completion: @escaping () -> Swift.Void)
    @objc deinit
  }
  final public class DisappearWithGuide {
    public enum Stage {
      case begin
      case update
      public static func == (a: OpenWeb3Lib.Transition.DisappearWithGuide.Stage, b: OpenWeb3Lib.Transition.DisappearWithGuide.Stage) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(_ f: @escaping (OpenWeb3Lib.Transition.DisappearWithGuide.Stage, UIKit.UIView, CoreFoundation.CGPoint, OpenWeb3Lib.Transition, @escaping () -> Swift.Void) -> Swift.Void)
    final public func callAsFunction(stage: OpenWeb3Lib.Transition.DisappearWithGuide.Stage, view: UIKit.UIView, guide: CoreFoundation.CGPoint, transition: OpenWeb3Lib.Transition, completion: @escaping () -> Swift.Void)
    @objc deinit
  }
  final public class Update {
    public init(_ f: @escaping (OpenWeb3Lib._UpdatedChildComponent, UIKit.UIView, OpenWeb3Lib.Transition) -> Swift.Void)
    final public func callAsFunction(component: OpenWeb3Lib._UpdatedChildComponent, view: UIKit.UIView, transition: OpenWeb3Lib.Transition)
    @objc deinit
  }
}
extension OpenWeb3Lib.CombinedComponent {
  public func makeView() -> UIKit.UIView
  public func update(view: Self.View, availableSize: CoreFoundation.CGSize, state: Self.State, environment: OpenWeb3Lib.Environment<Self.EnvironmentType>, transition: OpenWeb3Lib.Transition) -> CoreFoundation.CGSize
}
extension OpenWeb3Lib.CombinedComponent {
  public static func Child<Environment>(environment: Environment.Type) -> OpenWeb3Lib._EnvironmentChildComponent<Environment>
  public static func ChildMap<Environment, Key>(environment: Environment.Type, keyedBy keyType: Key.Type) -> OpenWeb3Lib._EnvironmentChildComponentMap<Environment, Key> where Key : Swift.Hashable
  public static func Child<ComponentType>(_ type: ComponentType.Type) -> OpenWeb3Lib._ConcreteChildComponent<ComponentType> where ComponentType : OpenWeb3Lib.Component
  public static func Guide() -> OpenWeb3Lib._ChildComponentGuide
  public static func StoredActionSlot<Arguments>(_ argumentsType: Arguments.Type) -> OpenWeb3Lib.ActionSlot<Arguments>
}
public struct Shadow {
  public let color: UIKit.UIColor
  public let radius: CoreFoundation.CGFloat
  public let offset: CoreFoundation.CGSize
  public init(color: UIKit.UIColor, radius: CoreFoundation.CGFloat, offset: CoreFoundation.CGSize)
}
public enum ListViewItemUpdateAnimation {
  case None
  case System(duration: Swift.Double, transition: OpenWeb3Lib.ControlledTransition)
  case Crossfade
  public var isAnimated: Swift.Bool {
    get
  }
  public var animator: any OpenWeb3Lib.ControlledTransitionAnimator {
    get
  }
  public var transition: OpenWeb3Lib.ContainedViewLayoutTransition {
    get
  }
}
public struct ListViewItemConfigureNodeFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let preferSynchronousResourceLoading: OpenWeb3Lib.ListViewItemConfigureNodeFlags
  public typealias ArrayLiteralElement = OpenWeb3Lib.ListViewItemConfigureNodeFlags
  public typealias Element = OpenWeb3Lib.ListViewItemConfigureNodeFlags
  public typealias RawValue = Swift.Int32
}
final public class ListViewItemApply {
  final public var isOnScreen: Swift.Bool {
    get
  }
  final public let timestamp: Swift.Double?
  final public var invertOffsetDirection: Swift.Bool {
    get
  }
  public init(isOnScreen: Swift.Bool, timestamp: Swift.Double? = nil)
  final public func setInvertOffsetDirection()
  final public func setIsOffscreen()
  @objc deinit
}
public protocol ListViewItem {
  func nodeConfiguredForParams(async: @escaping (@escaping () -> Swift.Void) -> Swift.Void, params: OpenWeb3Lib.ListViewItemLayoutParams, synchronousLoads: Swift.Bool, previousItem: (any OpenWeb3Lib.ListViewItem)?, nextItem: (any OpenWeb3Lib.ListViewItem)?, completion: @escaping (OpenWeb3Lib.ListViewItemNode, @escaping () -> (OpenWeb3Lib.Signal<Swift.Void, OpenWeb3Lib.NoError>?, (OpenWeb3Lib.ListViewItemApply) -> Swift.Void)) -> Swift.Void)
  func updateNode(async: @escaping (@escaping () -> Swift.Void) -> Swift.Void, node: @escaping () -> OpenWeb3Lib.ListViewItemNode, params: OpenWeb3Lib.ListViewItemLayoutParams, previousItem: (any OpenWeb3Lib.ListViewItem)?, nextItem: (any OpenWeb3Lib.ListViewItem)?, animation: OpenWeb3Lib.ListViewItemUpdateAnimation, completion: @escaping (OpenWeb3Lib.ListViewItemNodeLayout, @escaping (OpenWeb3Lib.ListViewItemApply) -> Swift.Void) -> Swift.Void)
  var accessoryItem: (any OpenWeb3Lib.ListViewAccessoryItem)? { get }
  var headerAccessoryItem: (any OpenWeb3Lib.ListViewAccessoryItem)? { get }
  var selectable: Swift.Bool { get }
  var approximateHeight: CoreFoundation.CGFloat { get }
  func selected(listView: OpenWeb3Lib.ListView)
}
extension OpenWeb3Lib.ListViewItem {
  public var accessoryItem: (any OpenWeb3Lib.ListViewAccessoryItem)? {
    get
  }
  public var headerAccessoryItem: (any OpenWeb3Lib.ListViewAccessoryItem)? {
    get
  }
  public var selectable: Swift.Bool {
    get
  }
  public var approximateHeight: CoreFoundation.CGFloat {
    get
  }
  public func selected(listView: OpenWeb3Lib.ListView)
  public func performSecondaryAction(listView: OpenWeb3Lib.ListView)
}
public func combineLatest<T1, T2, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>) -> OpenWeb3Lib.Signal<(T1, T2), E>
public func combineLatest<T1, T2, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ v1: T1, _ s2: OpenWeb3Lib.Signal<T2, E>, _ v2: T2) -> OpenWeb3Lib.Signal<(T1, T2), E>
public func combineLatest<T1, T2, T3, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3), E>
public func combineLatest<T1, T2, T3, T4, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4), E>
public func combineLatest<T1, T2, T3, T4, T5, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>, _ s16: OpenWeb3Lib.Signal<T16, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>, _ s16: OpenWeb3Lib.Signal<T16, E>, _ s17: OpenWeb3Lib.Signal<T17, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>, _ s16: OpenWeb3Lib.Signal<T16, E>, _ s17: OpenWeb3Lib.Signal<T17, E>, _ s18: OpenWeb3Lib.Signal<T18, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>, _ s16: OpenWeb3Lib.Signal<T16, E>, _ s17: OpenWeb3Lib.Signal<T17, E>, _ s18: OpenWeb3Lib.Signal<T18, E>, _ s19: OpenWeb3Lib.Signal<T19, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>, _ s16: OpenWeb3Lib.Signal<T16, E>, _ s17: OpenWeb3Lib.Signal<T17, E>, _ s18: OpenWeb3Lib.Signal<T18, E>, _ s19: OpenWeb3Lib.Signal<T19, E>, _ s20: OpenWeb3Lib.Signal<T20, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>, _ s16: OpenWeb3Lib.Signal<T16, E>, _ s17: OpenWeb3Lib.Signal<T17, E>, _ s18: OpenWeb3Lib.Signal<T18, E>, _ s19: OpenWeb3Lib.Signal<T19, E>, _ s20: OpenWeb3Lib.Signal<T20, E>, _ s21: OpenWeb3Lib.Signal<T21, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21), E>
public func combineLatest<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, E>(queue: OpenWeb3Lib.Queue? = nil, _ s1: OpenWeb3Lib.Signal<T1, E>, _ s2: OpenWeb3Lib.Signal<T2, E>, _ s3: OpenWeb3Lib.Signal<T3, E>, _ s4: OpenWeb3Lib.Signal<T4, E>, _ s5: OpenWeb3Lib.Signal<T5, E>, _ s6: OpenWeb3Lib.Signal<T6, E>, _ s7: OpenWeb3Lib.Signal<T7, E>, _ s8: OpenWeb3Lib.Signal<T8, E>, _ s9: OpenWeb3Lib.Signal<T9, E>, _ s10: OpenWeb3Lib.Signal<T10, E>, _ s11: OpenWeb3Lib.Signal<T11, E>, _ s12: OpenWeb3Lib.Signal<T12, E>, _ s13: OpenWeb3Lib.Signal<T13, E>, _ s14: OpenWeb3Lib.Signal<T14, E>, _ s15: OpenWeb3Lib.Signal<T15, E>, _ s16: OpenWeb3Lib.Signal<T16, E>, _ s17: OpenWeb3Lib.Signal<T17, E>, _ s18: OpenWeb3Lib.Signal<T18, E>, _ s19: OpenWeb3Lib.Signal<T19, E>, _ s20: OpenWeb3Lib.Signal<T20, E>, _ s21: OpenWeb3Lib.Signal<T21, E>, _ s22: OpenWeb3Lib.Signal<T22, E>) -> OpenWeb3Lib.Signal<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22), E>
public func combineLatest<T, E>(queue: OpenWeb3Lib.Queue? = nil, _ signals: [OpenWeb3Lib.Signal<T, E>]) -> OpenWeb3Lib.Signal<[T], E>
public func beforeNext<T, E, R>(_ f: @escaping (T) -> R) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func afterNext<T, E, R>(_ f: @escaping (T) -> R) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func beforeStarted<T, E>(_ f: @escaping () -> Swift.Void) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func beforeCompleted<T, E>(_ f: @escaping () -> Swift.Void) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func afterCompleted<T, E>(_ f: @escaping () -> Swift.Void) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func afterDisposed<T, E, R>(_ f: @escaping () -> R) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func withState<T, E, S>(_ signal: OpenWeb3Lib.Signal<T, E>, _ initialState: @escaping () -> S, next: @escaping (T, S) -> Swift.Void = { _, _ in }, error: @escaping (E, S) -> Swift.Void = { _, _ in }, completed: @escaping (S) -> Swift.Void = { _ in }, disposed: @escaping (S) -> Swift.Void = { _ in }) -> OpenWeb3Lib.Signal<T, E>
public struct PresentationResourcesSettings {
  public static let editProfile: UIKit.UIImage?
  public static let proxy: UIKit.UIImage?
  public static let savedMessages: UIKit.UIImage?
  public static let recentCalls: UIKit.UIImage?
  public static let devices: UIKit.UIImage?
  public static let chatFolders: UIKit.UIImage?
  public static let stickers: UIKit.UIImage?
  public static let notifications: UIKit.UIImage?
  public static let security: UIKit.UIImage?
  public static let dataAndStorage: UIKit.UIImage?
  public static let appearance: UIKit.UIImage?
  public static let language: UIKit.UIImage?
  public static let deleteAccount: UIKit.UIImage?
  public static let powerSaving: UIKit.UIImage?
  public static let stories: UIKit.UIImage?
  public static let premiumGift: UIKit.UIImage?
  public static let business: UIKit.UIImage?
  public static let myProfile: UIKit.UIImage?
  public static let reactions: UIKit.UIImage?
  public static let premium: UIKit.UIImage?
  public static let passport: UIKit.UIImage?
  public static let watch: UIKit.UIImage?
  public static let support: UIKit.UIImage?
  public static let faq: UIKit.UIImage?
  public static let tips: UIKit.UIImage?
  public static let addAccount: UIKit.UIImage?
  public static let setPasscode: UIKit.UIImage?
  public static let clearCache: UIKit.UIImage?
  public static let changePhoneNumber: UIKit.UIImage?
  public static let deleteAddAccount: UIKit.UIImage?
  public static let deleteSetTwoStepAuth: UIKit.UIImage?
  public static let deleteSetPasscode: UIKit.UIImage?
  public static let deleteChats: UIKit.UIImage?
  public static let clearSynced: UIKit.UIImage?
  public static let websites: UIKit.UIImage?
}
public protocol StatusBarHost {
  var statusBarFrame: CoreFoundation.CGRect { get }
  var statusBarStyle: UIKit.UIStatusBarStyle { get set }
  var keyboardWindow: UIKit.UIWindow? { get }
  var keyboardView: UIKit.UIView? { get }
  var isApplicationInForeground: Swift.Bool { get }
  func setStatusBarStyle(_ style: UIKit.UIStatusBarStyle, animated: Swift.Bool)
  func setStatusBarHidden(_ value: Swift.Bool, animated: Swift.Bool)
  var shouldChangeStatusBarStyle: ((UIKit.UIStatusBarStyle) -> Swift.Bool)? { get set }
}
extension QuartzCore.CALayer {
  public func addShakeAnimation(amplitude: CoreFoundation.CGFloat = 3.0, duration: Swift.Double = 0.3, count: Swift.Int = 4, decay: Swift.Bool = false)
}
public struct CounterControllerTitle : Swift.Equatable {
  public var title: Swift.String
  public var counter: Swift.String
  public init(title: Swift.String, counter: Swift.String)
  public static func == (a: OpenWeb3Lib.CounterControllerTitle, b: OpenWeb3Lib.CounterControllerTitle) -> Swift.Bool
}
@objc @_Concurrency.MainActor @preconcurrency final public class CounterControllerTitleView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var title: OpenWeb3Lib.CounterControllerTitle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public func updateTextColors(primary: UIKit.UIColor?, secondary: UIKit.UIColor?, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency public init(resourceProvider: any OpenWeb3Lib.IResourceProvider)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @objc deinit
}
final public class ThemeSettings : Swift.Codable, Swift.Equatable {
  final public let currentTheme: OpenWeb3Lib.TelegramTheme?
  public init(currentTheme: OpenWeb3Lib.TelegramTheme?)
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: OpenWeb3Lib.ThemeSettings, rhs: OpenWeb3Lib.ThemeSettings) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ListViewScroller : UIKit.UIScrollView, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesShouldCancel(in view: UIKit.UIView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public var isDecelerating: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public func `catch`<T, E, R>(_ f: @escaping (E) -> OpenWeb3Lib.Signal<T, R>) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, R>
public func restart<T, E>(_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func recurse<T, E>(_ latestValue: T?) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func retry<T, E>(_ delayIncrement: Swift.Double, maxDelay: Swift.Double, onQueue queue: OpenWeb3Lib.Queue) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>
public func retry<T, E>(retryOnError: @escaping (E) -> Swift.Bool, delayIncrement: Swift.Double, maxDelay: Swift.Double, maxRetries: Swift.Int, onQueue queue: OpenWeb3Lib.Queue) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func restartIfError<T, E>(_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>
public func generateIndefiniteActivityIndicatorImage(color: UIKit.UIColor, diameter: CoreFoundation.CGFloat = 22.0, lineWidth: CoreFoundation.CGFloat = 2.0) -> UIKit.UIImage?
public func generatePlayerRateIcon(_ color: UIKit.UIColor) -> UIKit.UIImage?
public struct PresentationResourcesRootController {
  public static func navigationIndefiniteActivityImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationComposeIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationShareIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationCallIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationInfoIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationSearchIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationCompactSearchIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationCompactSearchWhiteIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationCompactTagsSearchIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationCompactTagsSearchWhiteIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationCalendarIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationMoreIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationMoreCircledIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationQrCodeIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationAddIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationPlayerCloseButton(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationPlayerRateActiveIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationPlayerRateInactiveIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationPlayerMaximizedRateActiveIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationPlayerMaximizedRateInactiveIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationLiveLocationIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func inAppNotificationBackground(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func navigationPostStoryIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
}
public enum StatusBarStyle {
  case Black
  case White
  case Ignore
  case Hide
  public init(systemStyle: UIKit.UIStatusBarStyle)
  public var systemStyle: UIKit.UIStatusBarStyle {
    get
  }
  public static func == (a: OpenWeb3Lib.StatusBarStyle, b: OpenWeb3Lib.StatusBarStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImmediateTextNodeLayoutInfo {
  public let size: CoreFoundation.CGSize
  public let truncated: Swift.Bool
  public let numberOfLines: Swift.Int
  public init(size: CoreFoundation.CGSize, truncated: Swift.Bool, numberOfLines: Swift.Int)
}
@objc @_inheritsConvenienceInitializers public class ImmediateTextNode : OpenWeb3Lib.TextNode {
  public var attributedText: Foundation.NSAttributedString?
  public var textAlignment: UIKit.NSTextAlignment
  public var verticalAlignment: OpenWeb3Lib.TextVerticalAlignment
  public var truncationType: CoreText.CTLineTruncationType
  public var maximumNumberOfLines: Swift.Int
  public var lineSpacing: CoreFoundation.CGFloat
  public var insets: UIKit.UIEdgeInsets
  public var textShadowColor: UIKit.UIColor?
  public var textShadowBlur: CoreFoundation.CGFloat?
  public var textStroke: (UIKit.UIColor, CoreFoundation.CGFloat)?
  public var cutout: OpenWeb3Lib.TextNodeCutout?
  public var displaySpoilers: Swift.Bool
  public var truncationMode: UIKit.NSLineBreakMode {
    get
    set(value)
  }
  public var linkHighlightColor: UIKit.UIColor?
  public var trailingLineWidth: CoreFoundation.CGFloat?
  public var highlightAttributeAction: (([Foundation.NSAttributedString.Key : Any]) -> Foundation.NSAttributedString.Key?)? {
    get
    set
  }
  public var tapAttributeAction: (([Foundation.NSAttributedString.Key : Any], Swift.Int) -> Swift.Void)?
  public var longTapAttributeAction: (([Foundation.NSAttributedString.Key : Any], Swift.Int) -> Swift.Void)?
  public func makeCopy() -> OpenWeb3Lib.TextNode
  public func updateLayout(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func updateLayoutInfo(_ constrainedSize: CoreFoundation.CGSize) -> OpenWeb3Lib.ImmediateTextNodeLayoutInfo
  public func updateLayoutFullInfo(_ constrainedSize: CoreFoundation.CGSize) -> OpenWeb3Lib.TextNodeLayout
  public func redrawIfPossible()
  @objc override dynamic open func didLoad()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ASTextNode : OpenWeb3Lib.ImmediateTextNode {
  override public var attributedText: Foundation.NSAttributedString? {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic public func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ImmediateTextView : OpenWeb3Lib.TextView {
  @_Concurrency.MainActor @preconcurrency public var attributedText: Foundation.NSAttributedString?
  @_Concurrency.MainActor @preconcurrency public var textAlignment: UIKit.NSTextAlignment
  @_Concurrency.MainActor @preconcurrency public var verticalAlignment: OpenWeb3Lib.TextVerticalAlignment
  @_Concurrency.MainActor @preconcurrency public var truncationType: CoreText.CTLineTruncationType
  @_Concurrency.MainActor @preconcurrency public var maximumNumberOfLines: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var lineSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var insets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency public var textShadowColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency public var textShadowBlur: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency public var textStroke: (UIKit.UIColor, CoreFoundation.CGFloat)?
  @_Concurrency.MainActor @preconcurrency public var cutout: OpenWeb3Lib.TextNodeCutout?
  @_Concurrency.MainActor @preconcurrency public var displaySpoilers: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var truncationMode: UIKit.NSLineBreakMode {
    get
    set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var linkHighlightColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency public var trailingLineWidth: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency public var highlightAttributeAction: (([Foundation.NSAttributedString.Key : Any]) -> Foundation.NSAttributedString.Key?)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tapAttributeAction: (([Foundation.NSAttributedString.Key : Any], Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var longTapAttributeAction: (([Foundation.NSAttributedString.Key : Any], Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public func updateLayout(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public func updateLayoutInfo(_ constrainedSize: CoreFoundation.CGSize) -> OpenWeb3Lib.ImmediateTextNodeLayoutInfo
  @_Concurrency.MainActor @preconcurrency public func updateLayoutFullInfo(_ constrainedSize: CoreFoundation.CGSize) -> OpenWeb3Lib.TextNodeLayout
  @_Concurrency.MainActor @preconcurrency public func redrawIfPossible()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public func setPostboxLogger(_ f: @escaping (Swift.String) -> Swift.Void, sync: @escaping () -> Swift.Void)
public func postboxLog(_ what: @autoclosure () -> Swift.String)
public func postboxLogSync()
public func horizontalContainerFillingSizeForLayout(layout: OpenWeb3Lib.ContainerViewLayout, sideInset: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public enum ActionSheetCheckboxStyle {
  case `default`
  case alignRight
  public static func == (a: OpenWeb3Lib.ActionSheetCheckboxStyle, b: OpenWeb3Lib.ActionSheetCheckboxStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ActionSheetCheckboxItem : OpenWeb3Lib.ActionSheetItem {
  final public let title: Swift.String
  final public let label: Swift.String
  final public let value: Swift.Bool
  final public let style: OpenWeb3Lib.ActionSheetCheckboxStyle
  final public let action: (Swift.Bool) -> Swift.Void
  public init(title: Swift.String, label: Swift.String, value: Swift.Bool, style: OpenWeb3Lib.ActionSheetCheckboxStyle = .default, action: @escaping (Swift.Bool) -> Swift.Void)
  public func node(theme: OpenWeb3Lib.ActionSheetControllerTheme) -> OpenWeb3Lib.ActionSheetItemNode
  public func updateNode(_ node: OpenWeb3Lib.ActionSheetItemNode)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ActionSheetCheckboxItemNode : OpenWeb3Lib.ActionSheetItemNode {
  override public init(theme: OpenWeb3Lib.ActionSheetControllerTheme)
  override public func updateLayout(constrainedSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGSize
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class PortalSourceView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var needsGlobalPortal: Swift.Bool {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func addPortal(view: OpenWeb3Lib.PortalView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum LocalizationEntry : Swift.Equatable {
  case string(key: Swift.String, value: Swift.String)
  case pluralizedString(key: Swift.String, zero: Swift.String?, one: Swift.String?, two: Swift.String?, few: Swift.String?, many: Swift.String?, other: Swift.String)
  public var key: Swift.String {
    get
  }
  public static func == (a: OpenWeb3Lib.LocalizationEntry, b: OpenWeb3Lib.LocalizationEntry) -> Swift.Bool
}
final public class Localization : Swift.Codable, Swift.Equatable {
  final public let version: Swift.Int32
  final public let entries: [OpenWeb3Lib.LocalizationEntry]
  public init(version: Swift.Int32, entries: [OpenWeb3Lib.LocalizationEntry])
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: OpenWeb3Lib.Localization, rhs: OpenWeb3Lib.Localization) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class UITracingLayerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open func schedule(layout f: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var autoresizingMask: UIKit.UIView.AutoresizingMask {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.String {
  public func rightJustified(width: Swift.Int, pad: Swift.String = " ", truncate: Swift.Bool = false) -> Swift.String
  public func leftJustified(width: Swift.Int, pad: Swift.String = " ", truncate: Swift.Bool = false) -> Swift.String
}
@objc open class ASImageNode : OpenWeb3LibPrivite.ASDisplayNode {
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var displayWithoutProcessing: Swift.Bool
  @objc override dynamic public init()
  @objc override dynamic open func didLoad()
  @objc override dynamic public func calculateSizeThatFits(_ contrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
@objc final public class NavigationModalFrame : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override dynamic public init()
  final public func update(layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  final public func updateDismissal(transition: OpenWeb3Lib.ContainedViewLayoutTransition, progress: CoreFoundation.CGFloat, additionalProgress: CoreFoundation.CGFloat, completion: @escaping () -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ThreadPoolTaskState {
  final public let cancelled: OpenWeb3Lib.Atomic<Swift.Bool>
  @objc deinit
}
final public class ThreadPoolTask {
  public init(_ action: @escaping (OpenWeb3Lib.ThreadPoolTaskState) -> ())
  final public func execute()
  final public func cancel()
  @objc deinit
}
final public class ThreadPoolQueue : Swift.Equatable {
  public init(threadPool: OpenWeb3Lib.ThreadPool)
  final public func addTask(_ task: OpenWeb3Lib.ThreadPoolTask)
  @objc deinit
}
public func == (lhs: OpenWeb3Lib.ThreadPoolQueue, rhs: OpenWeb3Lib.ThreadPoolQueue) -> Swift.Bool
@objc final public class ThreadPool : ObjectiveC.NSObject {
  public init(threadCount: Swift.Int, threadPriority: Swift.Double)
  @objc deinit
  final public func addTask(_ task: OpenWeb3Lib.ThreadPoolTask)
  final public func nextQueue() -> OpenWeb3Lib.ThreadPoolQueue
  final public func isCurrentThreadInPool() -> Swift.Bool
}
public protocol NavigationBarTitleTransitionNode {
  func makeTransitionMirrorNode() -> OpenWeb3LibPrivite.ASDisplayNode
}
public let KEY_BG_COLOR: Swift.String
public let KEY_SECONDARY_BG_COLOR: Swift.String
public let KEY_TEXT_COLOR: Swift.String
public let KEY_HINT_COLOR: Swift.String
public let KEY_LINK_COLOR: Swift.String
public let KEY_BUTTON_COLOR: Swift.String
public let KEY_BUTTON_TEXT_COLOR: Swift.String
public let KEY_HEADER_BG_COLOR: Swift.String
public let KEY_ACCENT_TEXT_COLOR: Swift.String
public let KEY_SECTION_BG_COLOR: Swift.String
public let KEY_SECTION_HEADER_TEXT_COLOR: Swift.String
public let KEY_SUBTITLE_TEXT_COLOR: Swift.String
public let KEY_DESTRUCTIVE_TEXT_COLOR: Swift.String
public let KEY_SECTION_SEPARATOR_COLOR: Swift.String
public let KEY_ITEM_CHECK_FILL_COLOR: Swift.String
public let KEY_ITEM_CHECK_STROKE_COLOR: Swift.String
public let KEY_ITEM_CHECK_FOREGROUND_COLOR: Swift.String
public let KEY_ITEM_CHECK_DISCLOSURE_ARROW_COLOR: Swift.String
public let KEY_ITEM_BLOCKS_BACKGROUND_COLOR: Swift.String
public let KEY_ITEM_SWITCH_FRAME_COLOR: Swift.String
public let KEY_ITEM_SWITCH_HANDLE_COLOR: Swift.String
public let KEY_ITEM_SWITCH_CONTENT_COLOR: Swift.String
public let KEY_ITEM_SWITCH_POSITIVE_COLOR: Swift.String
public let KEY_ITEM_SWITCH_NEGATIVE_COLOR: Swift.String
public let KEY_TAB_BAR_BACKGROUND_COLOR: Swift.String
public let KEY_TAB_BAR_SEPARATOR_COLOR: Swift.String
public let KEY_TAB_BAR_ICON_COLOR: Swift.String
public let KEY_TAB_BAR_SELECTED_ICON_COLOR: Swift.String
public let KEY_TAB_BAR_TEXT_COLOR: Swift.String
public let KEY_TAB_BAR_SELECTED_TEXT_COLOR: Swift.String
public let KEY_TAB_BAR_BADGE_BACKGROUND_COLOR: Swift.String
public let KEY_TAB_BAR_BADGE_STROKE_COLOR: Swift.String
public let KEY_TAB_BAR_BADGE_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BUTTON_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_DISABLED_BUTTON_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_PRIMARY_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SECONDARY_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_CONTROL_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_ACCENT_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BLURRED_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_OPAQUE_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEPARATOR_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BADGE_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BADGE_STROKE_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_BADGE_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_FOREGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_TEXT_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_SEGMENTED_DIVIDER_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_CLEAR_BUTTON_BACKGROUND_COLOR: Swift.String
public let KEY_NAVIGATION_BAR_CLEAR_BUTTON_FOREGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_DIM_COLOR: Swift.String
public let KEY_ACTION_SHEET_OPAQUE_ITEM_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_ITEM_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_OPAQUE_ITEM_HIGHLIGHTED_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_ITEM_HIGHLIGHTED_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_OPAQUE_ITEM_SEPARATOR_COLOR: Swift.String
public let KEY_ACTION_SHEET_STANDARD_ACTION_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_DESTRUCTIVE_ACTION_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_DISABLED_ACTION_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_PRIMARY_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_SECONDARY_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_CONTROL_ACCENT_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_HOLLOW_BACKGROUND_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_BORDER_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_PLACEHOLDER_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_TEXT_COLOR: Swift.String
public let KEY_ACTION_SHEET_INPUT_CLEAR_BUTTON_COLOR: Swift.String
public let KEY_ACTION_SHEET_CHECK_CONTENT_COLOR: Swift.String
public struct PresentationDateTimeFormat : Swift.Equatable {
  public let timeFormat: OpenWeb3Lib.PresentationTimeFormat
  public let dateFormat: OpenWeb3Lib.PresentationDateFormat
  public let dateSeparator: Swift.String
  public let dateSuffix: Swift.String
  public let requiresFullYear: Swift.Bool
  public let decimalSeparator: Swift.String
  public let groupingSeparator: Swift.String
  public init()
  public init(timeFormat: OpenWeb3Lib.PresentationTimeFormat, dateFormat: OpenWeb3Lib.PresentationDateFormat, dateSeparator: Swift.String, dateSuffix: Swift.String, requiresFullYear: Swift.Bool, decimalSeparator: Swift.String, groupingSeparator: Swift.String)
  public static func == (a: OpenWeb3Lib.PresentationDateTimeFormat, b: OpenWeb3Lib.PresentationDateTimeFormat) -> Swift.Bool
}
public struct PresentationAppIcon : Swift.Equatable {
  public let name: Swift.String
  public let imageName: Swift.String
  public let isDefault: Swift.Bool
  public let isPremium: Swift.Bool
  public init(name: Swift.String, imageName: Swift.String, isDefault: Swift.Bool = false, isPremium: Swift.Bool = false)
  public static func == (a: OpenWeb3Lib.PresentationAppIcon, b: OpenWeb3Lib.PresentationAppIcon) -> Swift.Bool
}
public enum PresentationTimeFormat {
  case regular
  case military
  public static func == (a: OpenWeb3Lib.PresentationTimeFormat, b: OpenWeb3Lib.PresentationTimeFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PresentationDateFormat {
  case monthFirst
  case dayFirst
  public static func == (a: OpenWeb3Lib.PresentationDateFormat, b: OpenWeb3Lib.PresentationDateFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PresentationChatBubbleCorners : Swift.Equatable, Swift.Hashable {
  public var mainRadius: CoreFoundation.CGFloat
  public var auxiliaryRadius: CoreFoundation.CGFloat
  public var mergeBubbleCorners: Swift.Bool
  public init(mainRadius: CoreFoundation.CGFloat, auxiliaryRadius: CoreFoundation.CGFloat, mergeBubbleCorners: Swift.Bool)
  public static func == (a: OpenWeb3Lib.PresentationChatBubbleCorners, b: OpenWeb3Lib.PresentationChatBubbleCorners) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class PresentationData : Swift.Equatable {
  final public let theme: OpenWeb3Lib.PresentationTheme
  final public let autoNightModeTriggered: Swift.Bool
  final public let chatFontSize: OpenWeb3Lib.PresentationFontSize
  final public let chatBubbleCorners: OpenWeb3Lib.PresentationChatBubbleCorners
  final public let listsFontSize: OpenWeb3Lib.PresentationFontSize
  final public let dateTimeFormat: OpenWeb3Lib.PresentationDateTimeFormat
  final public let reduceMotion: Swift.Bool
  final public let largeEmoji: Swift.Bool
  public init(theme: OpenWeb3Lib.PresentationTheme, autoNightModeTriggered: Swift.Bool, chatFontSize: OpenWeb3Lib.PresentationFontSize, chatBubbleCorners: OpenWeb3Lib.PresentationChatBubbleCorners, listsFontSize: OpenWeb3Lib.PresentationFontSize, dateTimeFormat: OpenWeb3Lib.PresentationDateTimeFormat, reduceMotion: Swift.Bool, largeEmoji: Swift.Bool)
  final public func withUpdated(theme: OpenWeb3Lib.PresentationTheme) -> OpenWeb3Lib.PresentationData
  final public func withUpdated() -> OpenWeb3Lib.PresentationData
  public static func == (lhs: OpenWeb3Lib.PresentationData, rhs: OpenWeb3Lib.PresentationData) -> Swift.Bool
  @objc deinit
}
public func dictFromLocalization(_ value: OpenWeb3Lib.Localization) -> [Swift.String : Swift.String]
final public class InitialPresentationDataAndSettings {
  final public let presentationData: OpenWeb3Lib.PresentationData
  public init(presentationData: OpenWeb3Lib.PresentationData)
  @objc deinit
}
public func currentPresentationDataAndSettings(queue: OpenWeb3Lib.Queue, systemUserInterfaceStyle: OpenWeb3Lib.WindowUserInterfaceStyle = WindowUserInterfaceStyle.light) -> OpenWeb3Lib.Signal<OpenWeb3Lib.InitialPresentationDataAndSettings, OpenWeb3Lib.NoError>
public func automaticThemeShouldSwitchNow(settings: OpenWeb3Lib.AutomaticThemeSwitchSetting, systemUserInterfaceStyle: OpenWeb3Lib.WindowUserInterfaceStyle) -> Swift.Bool
public func averageColor(from image: UIKit.UIImage) -> UIKit.UIColor
public func serviceColor(from image: OpenWeb3Lib.Signal<UIKit.UIImage?, OpenWeb3Lib.NoError>) -> OpenWeb3Lib.Signal<UIKit.UIColor, OpenWeb3Lib.NoError>
public func serviceColor(with color: UIKit.UIColor) -> UIKit.UIColor
open class Table {
  final public let valueBox: any OpenWeb3Lib.ValueBox
  final public let table: OpenWeb3Lib.ValueBoxTable
  final public let useCaches: Swift.Bool
  public init(valueBox: any OpenWeb3Lib.ValueBox, table: OpenWeb3Lib.ValueBoxTable, useCaches: Swift.Bool)
  open func clearMemoryCache()
  open func beforeCommit()
  @objc deinit
}
@objc public class DisplayLinkDispatcher : ObjectiveC.NSObject {
  public init(limit: Swift.Int = 0)
  public func dispatch(f: @escaping () -> Swift.Void)
  @objc deinit
}
public func printOpenFiles()
@objc final public class PageControlNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var dotColor: UIKit.UIColor {
    get
    set
  }
  final public var inactiveDotColor: UIKit.UIColor {
    get
    set
  }
  public init(dotSize: CoreFoundation.CGFloat = 7.0, dotSpacing: CoreFoundation.CGFloat = 9.0, dotColor: UIKit.UIColor, inactiveDotColor: UIKit.UIColor)
  final public var pagesCount: Swift.Int {
    get
    set
  }
  final public func setPage(_ pageValue: CoreFoundation.CGFloat)
  @objc override final public func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc override final public func layout()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static func animationDurationFactor() -> Swift.Double
}
public func makeSpringAnimation(_ keyPath: Swift.String) -> QuartzCore.CABasicAnimation
public func makeSpringBounceAnimation(_ keyPath: Swift.String, _ initialVelocity: CoreFoundation.CGFloat, _ damping: CoreFoundation.CGFloat) -> QuartzCore.CABasicAnimation
public func springAnimationValueAt(_ animation: QuartzCore.CABasicAnimation, _ t: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public func makeCustomZoomBlurEffect(isLight: Swift.Bool) -> UIKit.UIBlurEffect?
public func applySmoothRoundedCorners(_ layer: QuartzCore.CALayer)
public func dumpViews(_ view: UIKit.UIView)
public func dumpLayers(_ layer: QuartzCore.CALayer)
public let UIScreenScale: CoreFoundation.CGFloat
public func floorToScreenPixels(_ value: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public func ceilToScreenPixels(_ value: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public let UIScreenPixel: CoreFoundation.CGFloat
extension CoreFoundation.CGSize {
  public func fitted(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func cropped(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func fittedToArea(_ area: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public func aspectFilled(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func aspectFitted(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func aspectFittedOrSmaller(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func aspectFittedWithOverflow(_ size: CoreFoundation.CGSize, leeway: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public func fittedToWidthOrSmaller(_ width: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public func multipliedByScreenScale() -> CoreFoundation.CGSize
  public func dividedByScreenScale() -> CoreFoundation.CGSize
  public var integralFloor: CoreFoundation.CGSize {
    get
  }
}
public func assertNotOnMainThread(_ file: Swift.String = #file, line: Swift.Int = #line)
extension UIKit.UIImage {
  public func precomposed() -> UIKit.UIImage
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func snapshotContentTree(unhide: Swift.Bool = false, keepPortals: Swift.Bool = false, keepTransform: Swift.Bool = false) -> UIKit.UIView?
}
extension QuartzCore.CALayer {
  public func snapshotContentTree(unhide: Swift.Bool = false) -> QuartzCore.CALayer?
}
extension QuartzCore.CALayer {
  public static func blur() -> ObjectiveC.NSObject?
  public static func luminanceToAlpha() -> ObjectiveC.NSObject?
}
extension QuartzCore.CALayer {
  public var layerTintColor: CoreGraphics.CGColor? {
    get
    set(value)
  }
}
extension QuartzCore.CALayer {
  public func snapshotContentTreeAsView(unhide: Swift.Bool = false) -> UIKit.UIView?
}
extension CoreFoundation.CGRect {
  public var topLeft: CoreFoundation.CGPoint {
    get
  }
  public var topRight: CoreFoundation.CGPoint {
    get
  }
  public var bottomLeft: CoreFoundation.CGPoint {
    get
  }
  public var bottomRight: CoreFoundation.CGPoint {
    get
  }
}
extension CoreFoundation.CGPoint {
  public func offsetBy(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
}
extension OpenWeb3Lib.Gesture {
  public enum PanGestureState {
    case began
    case updated(offset: CoreFoundation.CGPoint)
    case ended(velocity: CoreFoundation.CGPoint)
  }
  public static func pan(_ action: @escaping (OpenWeb3Lib.Gesture.PanGestureState) -> Swift.Void) -> OpenWeb3Lib.Gesture
}
public struct MediaResourceId : Swift.Equatable, Swift.Hashable {
  public var stringRepresentation: Swift.String
  public init(_ stringRepresentation: Swift.String)
  public static func == (a: OpenWeb3Lib.MediaResourceId, b: OpenWeb3Lib.MediaResourceId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MediaResource : AnyObject {
  var id: OpenWeb3Lib.MediaResourceId { get }
  var size: Swift.Int64? { get }
  var streamable: Swift.Bool { get }
  var headerSize: Swift.Int32 { get }
  func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
}
extension OpenWeb3Lib.MediaResource {
  public var streamable: Swift.Bool {
    get
  }
  public var headerSize: Swift.Int32 {
    get
  }
}
public protocol MediaResourceFetchTag {
}
public protocol MediaResourceFetchInfo {
}
public enum ContactsSortOrder : Swift.Int32 {
  case presence
  case natural
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum PresentationPersonNameOrder : Swift.Int32 {
  case firstLast
  case lastFirst
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct TextRangeRectEdge : Swift.Equatable {
  public var x: CoreFoundation.CGFloat
  public var y: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  public static func == (a: OpenWeb3Lib.TextRangeRectEdge, b: OpenWeb3Lib.TextRangeRectEdge) -> Swift.Bool
}
@objc final public class TextNodeBlockQuoteData : ObjectiveC.NSObject {
  public enum Kind : Swift.Equatable {
    case quote
    case code(language: Swift.String?)
    public static func == (a: OpenWeb3Lib.TextNodeBlockQuoteData.Kind, b: OpenWeb3Lib.TextNodeBlockQuoteData.Kind) -> Swift.Bool
  }
  final public let kind: OpenWeb3Lib.TextNodeBlockQuoteData.Kind
  final public let title: Foundation.NSAttributedString?
  final public let color: UIKit.UIColor
  final public let secondaryColor: UIKit.UIColor?
  final public let tertiaryColor: UIKit.UIColor?
  final public let backgroundColor: UIKit.UIColor
  public init(kind: OpenWeb3Lib.TextNodeBlockQuoteData.Kind, title: Foundation.NSAttributedString?, color: UIKit.UIColor, secondaryColor: UIKit.UIColor?, tertiaryColor: UIKit.UIColor?, backgroundColor: UIKit.UIColor)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public enum TextNodeCutoutPosition {
  case TopLeft
  case TopRight
  case BottomRight
  public static func == (a: OpenWeb3Lib.TextNodeCutoutPosition, b: OpenWeb3Lib.TextNodeCutoutPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TextNodeCutout : Swift.Equatable {
  public var topLeft: CoreFoundation.CGSize?
  public var topRight: CoreFoundation.CGSize?
  public var bottomRight: CoreFoundation.CGSize?
  public init(topLeft: CoreFoundation.CGSize? = nil, topRight: CoreFoundation.CGSize? = nil, bottomRight: CoreFoundation.CGSize? = nil)
  public static func == (a: OpenWeb3Lib.TextNodeCutout, b: OpenWeb3Lib.TextNodeCutout) -> Swift.Bool
}
public enum TextVerticalAlignment {
  case top
  case middle
  case bottom
  public static func == (a: OpenWeb3Lib.TextVerticalAlignment, b: OpenWeb3Lib.TextVerticalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class TextNodeLayoutArguments {
  final public let attributedString: Foundation.NSAttributedString?
  final public let backgroundColor: UIKit.UIColor?
  final public let minimumNumberOfLines: Swift.Int
  final public let maximumNumberOfLines: Swift.Int
  final public let truncationType: CoreText.CTLineTruncationType
  final public let constrainedSize: CoreFoundation.CGSize
  final public let alignment: UIKit.NSTextAlignment
  final public let verticalAlignment: OpenWeb3Lib.TextVerticalAlignment
  final public let lineSpacing: CoreFoundation.CGFloat
  final public let cutout: OpenWeb3Lib.TextNodeCutout?
  final public let insets: UIKit.UIEdgeInsets
  final public let lineColor: UIKit.UIColor?
  final public let textShadowColor: UIKit.UIColor?
  final public let textShadowBlur: CoreFoundation.CGFloat?
  final public let textStroke: (UIKit.UIColor, CoreFoundation.CGFloat)?
  final public let displaySpoilers: Swift.Bool
  final public let displayEmbeddedItemsUnderSpoilers: Swift.Bool
  final public let customTruncationToken: Foundation.NSAttributedString?
  public init(attributedString: Foundation.NSAttributedString?, backgroundColor: UIKit.UIColor? = nil, minimumNumberOfLines: Swift.Int = 0, maximumNumberOfLines: Swift.Int, truncationType: CoreText.CTLineTruncationType, constrainedSize: CoreFoundation.CGSize, alignment: UIKit.NSTextAlignment = .natural, verticalAlignment: OpenWeb3Lib.TextVerticalAlignment = .top, lineSpacing: CoreFoundation.CGFloat = 0.12, cutout: OpenWeb3Lib.TextNodeCutout? = nil, insets: UIKit.UIEdgeInsets = UIEdgeInsets(), lineColor: UIKit.UIColor? = nil, textShadowColor: UIKit.UIColor? = nil, textShadowBlur: CoreFoundation.CGFloat? = nil, textStroke: (UIKit.UIColor, CoreFoundation.CGFloat)? = nil, displaySpoilers: Swift.Bool = false, displayEmbeddedItemsUnderSpoilers: Swift.Bool = false, customTruncationToken: Foundation.NSAttributedString? = nil)
  final public func withAttributedString(_ attributedString: Foundation.NSAttributedString?) -> OpenWeb3Lib.TextNodeLayoutArguments
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class TextNodeLayout : ObjectiveC.NSObject {
  final public class EmbeddedItem : Swift.Equatable {
    final public let range: Foundation.NSRange
    final public let rect: CoreFoundation.CGRect
    final public let value: Swift.AnyHashable
    final public let textColor: UIKit.UIColor
    public init(range: Foundation.NSRange, rect: CoreFoundation.CGRect, value: Swift.AnyHashable, textColor: UIKit.UIColor)
    public static func == (lhs: OpenWeb3Lib.TextNodeLayout.EmbeddedItem, rhs: OpenWeb3Lib.TextNodeLayout.EmbeddedItem) -> Swift.Bool
    @objc deinit
  }
  final public let attributedString: Foundation.NSAttributedString?
  final public let insets: UIKit.UIEdgeInsets
  final public let size: CoreFoundation.CGSize
  final public let rawTextSize: CoreFoundation.CGSize
  final public let truncated: Swift.Bool
  final public let hasRTL: Swift.Bool
  final public let spoilers: [(Foundation.NSRange, CoreFoundation.CGRect)]
  final public let spoilerWords: [(Foundation.NSRange, CoreFoundation.CGRect)]
  final public let embeddedItems: [OpenWeb3Lib.TextNodeLayout.EmbeddedItem]
  final public func areLinesEqual(to other: OpenWeb3Lib.TextNodeLayout) -> Swift.Bool
  final public var numberOfLines: Swift.Int {
    get
  }
  final public var trailingLineWidth: CoreFoundation.CGFloat {
    get
  }
  final public var trailingLineIsRTL: Swift.Bool {
    get
  }
  final public func attributesAtPoint(_ point: CoreFoundation.CGPoint, orNearest: Swift.Bool) -> (Swift.Int, [Foundation.NSAttributedString.Key : Any])?
  final public func linesRects() -> [CoreFoundation.CGRect]
  final public func textRangesRects(text: Swift.String) -> [[CoreFoundation.CGRect]]
  final public func attributeSubstring(name: Swift.String, index: Swift.Int) -> (Swift.String, Swift.String)?
  final public func attributeSubstringWithRange(name: Swift.String, index: Swift.Int) -> (Swift.String, Swift.String, Foundation.NSRange)?
  final public func allAttributeRects(name: Swift.String) -> [(Any, CoreFoundation.CGRect)]
  final public func lineAndAttributeRects(name: Swift.String, at index: Swift.Int) -> [(CoreFoundation.CGRect, CoreFoundation.CGRect)]?
  final public func rangeRects(in range: Foundation.NSRange) -> (rects: [CoreFoundation.CGRect], start: OpenWeb3Lib.TextRangeRectEdge, end: OpenWeb3Lib.TextRangeRectEdge)?
  @objc deinit
}
@objc final public class TextAccessibilityOverlayNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var cachedLayout: OpenWeb3Lib.TextNodeLayout? {
    get
    set
  }
  final public var openUrl: ((Swift.String) -> Swift.Void)?
  @objc override dynamic public init()
  @objc override final public func didLoad()
  @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc open class TextNode : OpenWeb3LibPrivite.ASDisplayNode {
  public struct RenderContentTypes : Swift.OptionSet {
    public var rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let text: OpenWeb3Lib.TextNode.RenderContentTypes
    public static let emoji: OpenWeb3Lib.TextNode.RenderContentTypes
    public static let all: OpenWeb3Lib.TextNode.RenderContentTypes
    public typealias ArrayLiteralElement = OpenWeb3Lib.TextNode.RenderContentTypes
    public typealias Element = OpenWeb3Lib.TextNode.RenderContentTypes
    public typealias RawValue = Swift.Int
  }
  public var cachedLayout: OpenWeb3Lib.TextNodeLayout? {
    get
  }
  public var renderContentTypes: OpenWeb3Lib.TextNode.RenderContentTypes
  @objc override dynamic public init()
  @objc override dynamic open func didLoad()
  public func attributesAtPoint(_ point: CoreFoundation.CGPoint, orNearest: Swift.Bool = false) -> (Swift.Int, [Foundation.NSAttributedString.Key : Any])?
  public func textRangesRects(text: Swift.String) -> [[CoreFoundation.CGRect]]
  public func attributeSubstring(name: Swift.String, index: Swift.Int) -> (Swift.String, Swift.String)?
  public func attributeSubstringWithRange(name: Swift.String, index: Swift.Int) -> (Swift.String, Swift.String, Foundation.NSRange)?
  public func attributeRects(name: Swift.String, at index: Swift.Int) -> [CoreFoundation.CGRect]?
  public func rangeRects(in range: Foundation.NSRange) -> (rects: [CoreFoundation.CGRect], start: OpenWeb3Lib.TextRangeRectEdge, end: OpenWeb3Lib.TextRangeRectEdge)?
  public func lineAndAttributeRects(name: Swift.String, at index: Swift.Int) -> [(CoreFoundation.CGRect, CoreFoundation.CGRect)]?
  @objc override dynamic public func drawParameters(forAsyncLayer layer: OpenWeb3LibPrivite._ASDisplayLayer) -> (any ObjectiveC.NSObjectProtocol)?
  @objc override dynamic public class func draw(_ bounds: CoreFoundation.CGRect, withParameters parameters: Any?, isCancelled: () -> Swift.Bool, isRasterizing: Swift.Bool)
  public static func asyncLayout(_ maybeNode: OpenWeb3Lib.TextNode?) -> (OpenWeb3Lib.TextNodeLayoutArguments) -> (OpenWeb3Lib.TextNodeLayout, () -> OpenWeb3Lib.TextNode)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class TextView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var cachedLayout: OpenWeb3Lib.TextNodeLayout? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func attributesAtPoint(_ point: CoreFoundation.CGPoint, orNearest: Swift.Bool = false) -> (Swift.Int, [Foundation.NSAttributedString.Key : Any])?
  @_Concurrency.MainActor @preconcurrency public func textRangesRects(text: Swift.String) -> [[CoreFoundation.CGRect]]
  @_Concurrency.MainActor @preconcurrency public func attributeSubstring(name: Swift.String, index: Swift.Int) -> (Swift.String, Swift.String)?
  @_Concurrency.MainActor @preconcurrency public func attributeRects(name: Swift.String, at index: Swift.Int) -> [CoreFoundation.CGRect]?
  @_Concurrency.MainActor @preconcurrency public func rangeRects(in range: Foundation.NSRange) -> (rects: [CoreFoundation.CGRect], start: OpenWeb3Lib.TextRangeRectEdge, end: OpenWeb3Lib.TextRangeRectEdge)?
  @_Concurrency.MainActor @preconcurrency public func lineAndAttributeRects(name: Swift.String, at index: Swift.Int) -> [(CoreFoundation.CGRect, CoreFoundation.CGRect)]?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public static func asyncLayout(_ maybeView: OpenWeb3Lib.TextView?) -> (OpenWeb3Lib.TextNodeLayoutArguments) -> (OpenWeb3Lib.TextNodeLayout, () -> OpenWeb3Lib.TextView)
  @objc deinit
}
public struct ListViewItemAnimationOptions {
  public let short: Swift.Bool
  public let invertOffsetDirection: Swift.Bool
  public init(short: Swift.Bool = false, invertOffsetDirection: Swift.Bool = false)
}
public struct ListViewItemNodeLayout {
  public let contentSize: CoreFoundation.CGSize
  public let insets: UIKit.UIEdgeInsets
  public init()
  public init(contentSize: CoreFoundation.CGSize, insets: UIKit.UIEdgeInsets)
  public var size: CoreFoundation.CGSize {
    get
  }
}
public enum ListViewItemNodeVisibility : Swift.Equatable {
  case none
  case visible(CoreFoundation.CGFloat, CoreFoundation.CGRect)
  public static func == (a: OpenWeb3Lib.ListViewItemNodeVisibility, b: OpenWeb3Lib.ListViewItemNodeVisibility) -> Swift.Bool
}
public struct ListViewItemLayoutParams : Swift.Equatable {
  public let width: CoreFoundation.CGFloat
  public let leftInset: CoreFoundation.CGFloat
  public let rightInset: CoreFoundation.CGFloat
  public let availableHeight: CoreFoundation.CGFloat
  public let isStandalone: Swift.Bool
  public init(width: CoreFoundation.CGFloat, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat, availableHeight: CoreFoundation.CGFloat, isStandalone: Swift.Bool = false)
  public static func == (a: OpenWeb3Lib.ListViewItemLayoutParams, b: OpenWeb3Lib.ListViewItemLayoutParams) -> Swift.Bool
}
@objc open class ListViewItemNode : OpenWeb3LibPrivite.ASDisplayNode, OpenWeb3Lib.AccessibilityFocusableNode {
  public struct HeaderId : Swift.Hashable {
    public var space: Swift.AnyHashable
    public var id: Swift.AnyHashable
    public init(space: Swift.AnyHashable, id: Swift.AnyHashable)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: OpenWeb3Lib.ListViewItemNode.HeaderId, b: OpenWeb3Lib.ListViewItemNode.HeaderId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var index: Swift.Int? {
    get
  }
  public var isHighlightedInOverlay: Swift.Bool
  public var accessoryItemNode: OpenWeb3Lib.ListViewAccessoryItemNode? {
    get
  }
  open func addAccessoryItemNode(_ accessoryItemNode: OpenWeb3Lib.ListViewAccessoryItemNode)
  open var extractedBackgroundNode: OpenWeb3LibPrivite.ASDisplayNode? {
    get
  }
  public var attachedHeaderNodes: [OpenWeb3Lib.ListViewItemHeaderNode] {
    get
  }
  open func attachedHeaderNodesUpdated()
  open var preferredAnimationCurve: (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat {
    get
  }
  final public var wantsTrailingItemSpaceUpdates: Swift.Bool
  final public var scrollPositioningInsets: UIKit.UIEdgeInsets
  final public var canBeUsedAsScrollToItemAnchor: Swift.Bool
  open var visibility: OpenWeb3Lib.ListViewItemNodeVisibility
  open var canBeSelected: Swift.Bool {
    get
  }
  open func visibleForSelection(at point: CoreFoundation.CGPoint) -> Swift.Bool
  open var canBeLongTapped: Swift.Bool {
    get
  }
  open var preventsTouchesToOtherItems: Swift.Bool {
    get
  }
  open func touchesToOtherItemsPrevented()
  open func tapped()
  open func longTapped()
  final public var insets: UIKit.UIEdgeInsets {
    get
    set
  }
  final public var contentSize: CoreFoundation.CGSize {
    get
    set(value)
  }
  public var transitionOffset: CoreFoundation.CGFloat {
    get
    set
  }
  public var layout: OpenWeb3Lib.ListViewItemNodeLayout {
    get
  }
  public var displayResourcesReady: OpenWeb3Lib.Signal<Swift.Void, OpenWeb3Lib.NoError> {
    get
  }
  public init(layerBacked: Swift.Bool, dynamicBounce: Swift.Bool = true, rotated: Swift.Bool = false, seeThrough: Swift.Bool = false)
  open var apparentHeight: CoreFoundation.CGFloat
  public var apparentHeightTransition: (CoreFoundation.CGFloat, CoreFoundation.CGFloat)? {
    get
  }
  @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set(value)
  }
  public var contentBounds: CoreFoundation.CGRect {
    get
  }
  @objc override dynamic open var position: CoreFoundation.CGPoint {
    @objc get
    @objc set(value)
  }
  final public var apparentFrame: CoreFoundation.CGRect {
    get
  }
  final public var apparentContentFrame: CoreFoundation.CGRect {
    get
  }
  final public var apparentBounds: CoreFoundation.CGRect {
    get
  }
  open func layoutAccessoryItemNode(_ accessoryItemNode: OpenWeb3Lib.ListViewAccessoryItemNode, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat)
  open func layoutHeaderAccessoryItemNode(_ accessoryItemNode: OpenWeb3Lib.ListViewAccessoryItemNode)
  open func reuse()
  public func animate(timestamp: Swift.Double, invertOffsetDirection: inout Swift.Bool) -> Swift.Bool
  open func layoutForParams(_ params: OpenWeb3Lib.ListViewItemLayoutParams, item: any OpenWeb3Lib.ListViewItem, previousItem: (any OpenWeb3Lib.ListViewItem)?, nextItem: (any OpenWeb3Lib.ListViewItem)?)
  public func animationForKey(_ key: Swift.String) -> OpenWeb3Lib.ListViewAnimation?
  final public func setAnimationForKey(_ key: Swift.String, animation: OpenWeb3Lib.ListViewAnimation?)
  final public func removeAllAnimations()
  public func addInsetsAnimationToValue(_ value: UIKit.UIEdgeInsets, duration: Swift.Double, beginAt: Swift.Double)
  public func addHeightAnimation(_ value: CoreFoundation.CGFloat, duration: Swift.Double, beginAt: Swift.Double, update: ((CoreFoundation.CGFloat, CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  public func addApparentHeightAnimation(_ value: CoreFoundation.CGFloat, duration: Swift.Double, beginAt: Swift.Double, invertOffsetDirection: Swift.Bool = false, update: ((CoreFoundation.CGFloat, CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  public func modifyApparentHeightAnimation(_ value: CoreFoundation.CGFloat, beginAt: Swift.Double)
  public func removeApparentHeightAnimation()
  public func addTransitionOffsetAnimation(_ value: CoreFoundation.CGFloat, duration: Swift.Double, beginAt: Swift.Double)
  open func animateInsertion(_ currentTimestamp: Swift.Double, duration: Swift.Double, options: OpenWeb3Lib.ListViewItemAnimationOptions)
  open func animateAdded(_ currentTimestamp: Swift.Double, duration: Swift.Double)
  open func animateRemoved(_ currentTimestamp: Swift.Double, duration: Swift.Double)
  open func setHighlighted(_ highlighted: Swift.Bool, at point: CoreFoundation.CGPoint, animated: Swift.Bool)
  open func selected()
  open func secondaryAction(at point: CoreFoundation.CGPoint)
  open func isReorderable(at point: CoreFoundation.CGPoint) -> Swift.Bool
  open func animateFrameTransition(_ progress: CoreFoundation.CGFloat, _ currentValue: CoreFoundation.CGFloat)
  open func shouldAnimateHorizontalFrameTransition() -> Swift.Bool
  open func headers() -> [any OpenWeb3Lib.ListViewItemHeader]?
  open func updateTrailingItemSpace(_ height: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc override dynamic open func accessibilityElementDidBecomeFocused()
  public func updateFrame(_ frame: CoreFoundation.CGRect, within containerSize: CoreFoundation.CGSize, updateFrame: Swift.Bool = true)
  open func updateAbsoluteRect(_ rect: CoreFoundation.CGRect, within containerSize: CoreFoundation.CGSize)
  open func applyAbsoluteOffset(value: CoreFoundation.CGPoint, animationCurve: OpenWeb3Lib.ContainedViewLayoutTransitionCurve, duration: Swift.Double)
  open func snapshotForReordering() -> UIKit.UIView?
  @objc deinit
}
public enum PromptControllerTitleFont {
  case regular
  case bold
  public static func == (a: OpenWeb3Lib.PromptControllerTitleFont, b: OpenWeb3Lib.PromptControllerTitleFont) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func promptController(sharedContext: any OpenWeb3Lib.AccountContext, text: Swift.String, titleFont: OpenWeb3Lib.PromptControllerTitleFont = .regular, value: Swift.String?, characterLimit: Swift.Int = 1000, apply: @escaping (Swift.String?) -> Swift.Void) -> OpenWeb3Lib.AlertController
final public class MarkdownAttributeSet : Swift.Equatable {
  final public let font: UIKit.UIFont
  final public let textColor: UIKit.UIColor
  final public let additionalAttributes: [Swift.String : Any]
  public init(font: UIKit.UIFont, textColor: UIKit.UIColor, additionalAttributes: [Swift.String : Any] = [:])
  public static func == (lhs: OpenWeb3Lib.MarkdownAttributeSet, rhs: OpenWeb3Lib.MarkdownAttributeSet) -> Swift.Bool
  @objc deinit
}
final public class MarkdownAttributes : Swift.Equatable {
  final public let body: OpenWeb3Lib.MarkdownAttributeSet
  final public let bold: OpenWeb3Lib.MarkdownAttributeSet
  final public let link: OpenWeb3Lib.MarkdownAttributeSet
  final public let linkAttribute: (Swift.String) -> (Swift.String, Any)?
  public init(body: OpenWeb3Lib.MarkdownAttributeSet, bold: OpenWeb3Lib.MarkdownAttributeSet, link: OpenWeb3Lib.MarkdownAttributeSet, linkAttribute: @escaping (Swift.String) -> (Swift.String, Any)?)
  public static func == (lhs: OpenWeb3Lib.MarkdownAttributes, rhs: OpenWeb3Lib.MarkdownAttributes) -> Swift.Bool
  @objc deinit
}
public func escapedPlaintextForMarkdown(_ string: Swift.String) -> Swift.String
public func paragraphStyleWithAlignment(_ alignment: UIKit.NSTextAlignment) -> UIKit.NSParagraphStyle
public func parseMarkdownIntoAttributedString(_ string: Swift.String, attributes: OpenWeb3Lib.MarkdownAttributes, textAlignment: UIKit.NSTextAlignment = .natural) -> Foundation.NSAttributedString
public func foldMultipleLineBreaks(_ string: Swift.String) -> Swift.String
public enum TransformImageResizeMode {
  case fill(UIKit.UIColor)
  case aspectFill
  case blurBackground
}
public protocol TransformImageCustomArguments {
  func serialized() -> Foundation.NSArray
}
public struct TransformImageArguments : Swift.Equatable {
  public var corners: OpenWeb3Lib.ImageCorners
  public var imageSize: CoreFoundation.CGSize
  public var boundingSize: CoreFoundation.CGSize
  public var intrinsicInsets: UIKit.UIEdgeInsets
  public var resizeMode: OpenWeb3Lib.TransformImageResizeMode
  public var emptyColor: UIKit.UIColor?
  public var custom: (any OpenWeb3Lib.TransformImageCustomArguments)?
  public var scale: CoreFoundation.CGFloat?
  public init(corners: OpenWeb3Lib.ImageCorners, imageSize: CoreFoundation.CGSize, boundingSize: CoreFoundation.CGSize, intrinsicInsets: UIKit.UIEdgeInsets, resizeMode: OpenWeb3Lib.TransformImageResizeMode = .fill(.black), emptyColor: UIKit.UIColor? = nil, custom: (any OpenWeb3Lib.TransformImageCustomArguments)? = nil, scale: CoreFoundation.CGFloat? = nil)
  public var drawingSize: CoreFoundation.CGSize {
    get
  }
  public var drawingRect: CoreFoundation.CGRect {
    get
  }
  public var imageRect: CoreFoundation.CGRect {
    get
  }
  public var insets: UIKit.UIEdgeInsets {
    get
  }
  public static func == (lhs: OpenWeb3Lib.TransformImageArguments, rhs: OpenWeb3Lib.TransformImageArguments) -> Swift.Bool
}
public protocol NavigationBarTitleView {
  func animateLayoutTransition()
  func updateLayout(size: CoreFoundation.CGSize, clearBounds: CoreFoundation.CGRect, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGRect
}
@objc final public class CollectionIndexNode : OpenWeb3LibPrivite.ASDisplayNode {
  public static let searchIndex: Swift.String
  final public var indexSelected: ((Swift.String) -> Swift.Void)?
  @objc override dynamic public init()
  @objc override final public func didLoad()
  final public func update(size: CoreFoundation.CGSize, color: UIKit.UIColor, sections: [Swift.String], transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc open class SwitchNode : OpenWeb3LibPrivite.ASDisplayNode {
  public var valueUpdated: ((Swift.Bool) -> Swift.Void)?
  public var frameColor: UIKit.UIColor {
    get
    set
  }
  public var handleColor: UIKit.UIColor {
    get
    set
  }
  public var contentColor: UIKit.UIColor {
    get
    set
  }
  public var isOn: Swift.Bool {
    get
    set(value)
  }
  @objc override dynamic public init()
  @objc override dynamic open func didLoad()
  public func setOn(_ value: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
public func addWebAppToAttachmentController(context: any OpenWeb3Lib.AccountContext, peerName: Swift.String, requestWriteAccess: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void) -> OpenWeb3Lib.AlertController
public enum PluralizationForm : Swift.Int32 {
  case zero
  case one
  case two
  case few
  case many
  case other
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public func getPluralizationForm(_ lc: Swift.UInt32, _ value: Swift.Int32) -> OpenWeb3Lib.PluralizationForm
public struct ContainerViewLayoutInsetOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public init()
  public static let statusBar: OpenWeb3Lib.ContainerViewLayoutInsetOptions
  public static let input: OpenWeb3Lib.ContainerViewLayoutInsetOptions
  public typealias ArrayLiteralElement = OpenWeb3Lib.ContainerViewLayoutInsetOptions
  public typealias Element = OpenWeb3Lib.ContainerViewLayoutInsetOptions
  public typealias RawValue = Swift.Int
}
public enum ContainerViewLayoutSizeClass {
  case compact
  case regular
  public static func == (a: OpenWeb3Lib.ContainerViewLayoutSizeClass, b: OpenWeb3Lib.ContainerViewLayoutSizeClass) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LayoutMetrics : Swift.Equatable {
  public let widthClass: OpenWeb3Lib.ContainerViewLayoutSizeClass
  public let heightClass: OpenWeb3Lib.ContainerViewLayoutSizeClass
  public let orientation: UIKit.UIInterfaceOrientation?
  public init(widthClass: OpenWeb3Lib.ContainerViewLayoutSizeClass, heightClass: OpenWeb3Lib.ContainerViewLayoutSizeClass, orientation: UIKit.UIInterfaceOrientation?)
  public init()
  public static func == (a: OpenWeb3Lib.LayoutMetrics, b: OpenWeb3Lib.LayoutMetrics) -> Swift.Bool
}
extension OpenWeb3Lib.LayoutMetrics {
  public var isTablet: Swift.Bool {
    get
  }
}
public enum LayoutOrientation {
  case portrait
  case landscape
  public static func == (a: OpenWeb3Lib.LayoutOrientation, b: OpenWeb3Lib.LayoutOrientation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ContainerViewLayout : Swift.Equatable {
  public var size: CoreFoundation.CGSize
  public var metrics: OpenWeb3Lib.LayoutMetrics
  public var deviceMetrics: OpenWeb3Lib.DeviceMetrics
  public var intrinsicInsets: UIKit.UIEdgeInsets
  public var safeInsets: UIKit.UIEdgeInsets
  public var additionalInsets: UIKit.UIEdgeInsets
  public var statusBarHeight: CoreFoundation.CGFloat?
  public var inputHeight: CoreFoundation.CGFloat?
  public var inputHeightIsInteractivellyChanging: Swift.Bool
  public var inVoiceOver: Swift.Bool
  public init(size: CoreFoundation.CGSize, metrics: OpenWeb3Lib.LayoutMetrics, deviceMetrics: OpenWeb3Lib.DeviceMetrics, intrinsicInsets: UIKit.UIEdgeInsets, safeInsets: UIKit.UIEdgeInsets, additionalInsets: UIKit.UIEdgeInsets, statusBarHeight: CoreFoundation.CGFloat?, inputHeight: CoreFoundation.CGFloat?, inputHeightIsInteractivellyChanging: Swift.Bool, inVoiceOver: Swift.Bool)
  public func addedInsets(insets: UIKit.UIEdgeInsets) -> OpenWeb3Lib.ContainerViewLayout
  public func withUpdatedSize(_ size: CoreFoundation.CGSize) -> OpenWeb3Lib.ContainerViewLayout
  public func withUpdatedIntrinsicInsets(_ intrinsicInsets: UIKit.UIEdgeInsets) -> OpenWeb3Lib.ContainerViewLayout
  public func withUpdatedInputHeight(_ inputHeight: CoreFoundation.CGFloat?) -> OpenWeb3Lib.ContainerViewLayout
  public func withUpdatedMetrics(_ metrics: OpenWeb3Lib.LayoutMetrics) -> OpenWeb3Lib.ContainerViewLayout
  public static func == (a: OpenWeb3Lib.ContainerViewLayout, b: OpenWeb3Lib.ContainerViewLayout) -> Swift.Bool
}
extension OpenWeb3Lib.ContainerViewLayout {
  public func insets(options: OpenWeb3Lib.ContainerViewLayoutInsetOptions) -> UIKit.UIEdgeInsets
  public var isModalOverlay: Swift.Bool {
    get
  }
  public var isNonExclusive: Swift.Bool {
    get
  }
  public var inSplitView: Swift.Bool {
    get
  }
  public var inSlideOver: Swift.Bool {
    get
  }
  public var orientation: OpenWeb3Lib.LayoutOrientation {
    get
  }
  public var standardKeyboardHeight: CoreFoundation.CGFloat {
    get
  }
  public var standardInputHeight: CoreFoundation.CGFloat {
    get
  }
}
@_hasMissingDesignatedInitializers public class Gesture {
  @objc deinit
}
public func addAttributesToStringWithRanges(_ stringWithRanges: (Swift.String, [(Swift.Int, Foundation.NSRange)]), body: OpenWeb3Lib.MarkdownAttributeSet, argumentAttributes: [Swift.Int : OpenWeb3Lib.MarkdownAttributeSet], textAlignment: UIKit.NSTextAlignment = .natural) -> Foundation.NSAttributedString
public func attachmentDefaultTopInset(layout: OpenWeb3Lib.ContainerViewLayout?) -> CoreFoundation.CGFloat
public enum ContextMenuActionContent {
  case text(title: Swift.String, accessibilityLabel: Swift.String)
  case icon(UIKit.UIImage)
  case textWithIcon(title: Swift.String, icon: UIKit.UIImage?)
}
public struct ContextMenuAction {
  public let content: OpenWeb3Lib.ContextMenuActionContent
  public let action: () -> Swift.Void
  public init(content: OpenWeb3Lib.ContextMenuActionContent, action: @escaping () -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class Queue {
  final public var queue: Dispatch.DispatchQueue {
    get
  }
  final public class func mainQueue() -> OpenWeb3Lib.Queue
  final public class func concurrentDefaultQueue() -> OpenWeb3Lib.Queue
  final public class func concurrentBackgroundQueue() -> OpenWeb3Lib.Queue
  public init(queue: Dispatch.DispatchQueue)
  public init(name: Swift.String? = nil, qos: Dispatch.DispatchQoS = .default)
  final public func isCurrent() -> Swift.Bool
  final public func async(_ f: @escaping () -> Swift.Void)
  final public func sync(_ f: () -> Swift.Void)
  final public func justDispatch(_ f: @escaping () -> Swift.Void)
  final public func justDispatchWithQoS(qos: Dispatch.DispatchQoS, _ f: @escaping () -> Swift.Void)
  final public func after(_ delay: Swift.Double, _ f: @escaping () -> Swift.Void)
  @objc deinit
}
public enum NavigationBarContentMode {
  case replacement
  case expansion
  public static func == (a: OpenWeb3Lib.NavigationBarContentMode, b: OpenWeb3Lib.NavigationBarContentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class NavigationBarContentNode : OpenWeb3LibPrivite.ASDisplayNode {
  open var requestContainerLayout: (OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void
  open var height: CoreFoundation.CGFloat {
    get
  }
  open var clippedHeight: CoreFoundation.CGFloat {
    get
  }
  open var nominalHeight: CoreFoundation.CGFloat {
    get
  }
  open var mode: OpenWeb3Lib.NavigationBarContentMode {
    get
  }
  open func updateLayout(size: CoreFoundation.CGSize, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
public enum ToolbarActionOption {
  case left
  case right
  case middle
  public static func == (a: OpenWeb3Lib.ToolbarActionOption, b: OpenWeb3Lib.ToolbarActionOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class ToolbarTheme {
  final public let barBackgroundColor: UIKit.UIColor
  final public let barSeparatorColor: UIKit.UIColor
  final public let barTextColor: UIKit.UIColor
  final public let barSelectedTextColor: UIKit.UIColor
  public init(barBackgroundColor: UIKit.UIColor, barSeparatorColor: UIKit.UIColor, barTextColor: UIKit.UIColor, barSelectedTextColor: UIKit.UIColor)
  @objc deinit
}
@objc final public class ToolbarNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var left: () -> Swift.Void
  final public var right: () -> Swift.Void
  final public var middle: () -> Swift.Void
  public init(theme: OpenWeb3Lib.ToolbarTheme, displaySeparator: Swift.Bool = false, left: @escaping () -> Swift.Void = {}, right: @escaping () -> Swift.Void = {}, middle: @escaping () -> Swift.Void = {})
  final public func updateTheme(_ theme: OpenWeb3Lib.ToolbarTheme)
  final public func updateLayout(size: CoreFoundation.CGSize, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat, additionalSideInsets: UIKit.UIEdgeInsets, bottomInset: CoreFoundation.CGFloat, toolbar: OpenWeb3Lib.Toolbar, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc deinit
}
extension OpenWeb3LibPrivite.ASGestureRecognizerDelegate {
  public var wrappedGestureRecognizerDelegate: any UIKit.UIGestureRecognizerDelegate {
    get
  }
}
extension OpenWeb3LibPrivite.ASScrollViewDelegate {
  public var wrappedScrollViewDelegate: any UIKit.UIScrollViewAccessibilityDelegate {
    get
  }
}
public struct CompletionRequest {
  @_hasMissingDesignatedInitializers public class Builder {
    public func promptId(_ promptId: Swift.Int) -> OpenWeb3Lib.CompletionRequest.Builder
    public func args(key: Swift.String, value: Swift.String) -> OpenWeb3Lib.CompletionRequest.Builder
    public func build() -> OpenWeb3Lib.CompletionRequest
    @objc deinit
  }
}
public protocol AIService {
  func load() -> Swift.Bool
  func unLoad()
  func completion(_ req: OpenWeb3Lib.CompletionRequest)
}
public struct AttachmentMainButtonState {
  public enum Background {
    case color(UIKit.UIColor)
    case premium
  }
  public enum Progress : Swift.Equatable {
    case none
    case side
    case center
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: OpenWeb3Lib.AttachmentMainButtonState.Progress, b: OpenWeb3Lib.AttachmentMainButtonState.Progress) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Font : Swift.Equatable {
    case regular
    case bold
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: OpenWeb3Lib.AttachmentMainButtonState.Font, b: OpenWeb3Lib.AttachmentMainButtonState.Font) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public let text: Swift.String?
  public let font: OpenWeb3Lib.AttachmentMainButtonState.Font
  public let background: OpenWeb3Lib.AttachmentMainButtonState.Background
  public let textColor: UIKit.UIColor
  public let isVisible: Swift.Bool
  public let progress: OpenWeb3Lib.AttachmentMainButtonState.Progress
  public let isEnabled: Swift.Bool
  public init(text: Swift.String?, font: OpenWeb3Lib.AttachmentMainButtonState.Font, background: OpenWeb3Lib.AttachmentMainButtonState.Background, textColor: UIKit.UIColor, isVisible: Swift.Bool, progress: OpenWeb3Lib.AttachmentMainButtonState.Progress, isEnabled: Swift.Bool)
  public static var initial: OpenWeb3Lib.AttachmentMainButtonState {
    get
  }
}
public func dateFillNeedsBlur(theme: OpenWeb3Lib.PresentationTheme) -> Swift.Bool
public let defaultServiceBackgroundColor: UIKit.UIColor
public let defaultPresentationTheme: OpenWeb3Lib.PresentationTheme
public let defaultDayAccentColor: UIKit.UIColor
public func customizeDefaultDayTheme(theme: OpenWeb3Lib.PresentationTheme, editing: Swift.Bool, title: Swift.String?, accentColor: UIKit.UIColor?, outgoingAccentColor: UIKit.UIColor?, backgroundColors: [Swift.UInt32], bubbleColors: [Swift.UInt32], animateBubbleColors: Swift.Bool?, serviceBackgroundColor: UIKit.UIColor?) -> OpenWeb3Lib.PresentationTheme
public func makeDefaultDayPresentationTheme(extendingThemeReference: OpenWeb3Lib.PresentationThemeReference? = nil, serviceBackgroundColor: UIKit.UIColor?, day: Swift.Bool, preview: Swift.Bool) -> OpenWeb3Lib.PresentationTheme
public let legacyBuiltinWallpaperGradientColors: [UIKit.UIColor]
public let defaultBuiltinWallpaperGradientColors: [UIKit.UIColor]
extension OpenWeb3Lib.Transition.Appear {
  public static func `default`(scale: Swift.Bool = false, alpha: Swift.Bool = false) -> OpenWeb3Lib.Transition.Appear
  public static func scaleIn() -> OpenWeb3Lib.Transition.Appear
}
extension OpenWeb3Lib.Transition.AppearWithGuide {
  public static func `default`(scale: Swift.Bool = false, alpha: Swift.Bool = false) -> OpenWeb3Lib.Transition.AppearWithGuide
}
extension OpenWeb3Lib.Transition.Disappear {
  public static func `default`(scale: Swift.Bool = false, alpha: Swift.Bool = true) -> OpenWeb3Lib.Transition.Disappear
}
extension OpenWeb3Lib.Transition.DisappearWithGuide {
  public static func `default`(alpha: Swift.Bool = true) -> OpenWeb3Lib.Transition.DisappearWithGuide
}
extension OpenWeb3Lib.Transition.Update {
  public static let `default`: OpenWeb3Lib.Transition.Update
}
@objc final public class ContextContentContainerNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var contentNode: OpenWeb3Lib.ContextContentNode?
  @objc override dynamic public init()
  final public func updateLayout(size: CoreFoundation.CGSize, scaledSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class WindowPanRecognizer : UIKit.UIGestureRecognizer {
  @_Concurrency.MainActor @preconcurrency final public var began: ((CoreFoundation.CGPoint) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var moved: ((CoreFoundation.CGPoint) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var ended: ((CoreFoundation.CGPoint, CoreFoundation.CGPoint?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override final public func reset()
  @_Concurrency.MainActor @preconcurrency final public func cancel()
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
@objc final public class NavigationContainer : OpenWeb3LibPrivite.ASDisplayNode, OpenWeb3LibPrivite.ASGestureRecognizerDelegate {
  final public var controllers: [OpenWeb3Lib.ViewController] {
    get
  }
  final public var isReady: Swift.Bool {
    get
  }
  final public var isReadyUpdated: (() -> Swift.Void)?
  final public var controllerRemoved: (OpenWeb3Lib.ViewController) -> Swift.Void
  final public var requestFilterController: (OpenWeb3Lib.ViewController) -> Swift.Void
  final public var keyboardViewManager: OpenWeb3Lib.KeyboardViewManager? {
    get
    set
  }
  final public var canHaveKeyboardFocus: Swift.Bool {
    get
    set
  }
  final public var isInFocus: Swift.Bool {
    get
    set
  }
  final public func inFocusUpdated(isInFocus: Swift.Bool)
  final public var overflowInset: CoreFoundation.CGFloat
  public init(isFlat: Swift.Bool, controllerRemoved: @escaping (OpenWeb3Lib.ViewController) -> Swift.Void)
  @objc override final public func didLoad()
  @objc override final public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  final public func update(layout: OpenWeb3Lib.ContainerViewLayout, canBeClosed: Swift.Bool, controllers: [OpenWeb3Lib.ViewController], transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  final public var shouldAnimateDisappearance: Swift.Bool
  final public func updateAdditionalKeyboardLeftEdgeOffset(_ offset: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc open class ViewControllerTracingNode : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override dynamic public init()
  @objc override dynamic open func didLoad()
  @objc deinit
}
public protocol Interpolatable {
  static func interpolator() -> (any OpenWeb3Lib.Interpolatable, any OpenWeb3Lib.Interpolatable, CoreFoundation.CGFloat) -> (any OpenWeb3Lib.Interpolatable)
}
extension CoreFoundation.CGFloat : OpenWeb3Lib.Interpolatable {
  public static func interpolator() -> (any OpenWeb3Lib.Interpolatable, any OpenWeb3Lib.Interpolatable, CoreFoundation.CGFloat) -> any OpenWeb3Lib.Interpolatable
}
extension UIKit.UIEdgeInsets : OpenWeb3Lib.Interpolatable {
  public static func interpolator() -> (any OpenWeb3Lib.Interpolatable, any OpenWeb3Lib.Interpolatable, CoreFoundation.CGFloat) -> any OpenWeb3Lib.Interpolatable
}
extension CoreFoundation.CGRect : OpenWeb3Lib.Interpolatable {
  public static func interpolator() -> (any OpenWeb3Lib.Interpolatable, any OpenWeb3Lib.Interpolatable, CoreFoundation.CGFloat) -> any OpenWeb3Lib.Interpolatable
}
extension CoreFoundation.CGPoint : OpenWeb3Lib.Interpolatable {
  public static func interpolator() -> (any OpenWeb3Lib.Interpolatable, any OpenWeb3Lib.Interpolatable, CoreFoundation.CGFloat) -> any OpenWeb3Lib.Interpolatable
}
public let listViewAnimationCurveSystem: (_ t: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public let listViewAnimationCurveLinear: (_ t: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public let listViewAnimationCurveEaseInOut: (_ t: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public func listViewAnimationCurveFromAnimationOptions(animationOptions: UIKit.UIView.AnimationOptions) -> (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
@_hasMissingDesignatedInitializers final public class ListViewAnimation {
  public init<T>(from: T, to: T, duration: Swift.Double, invertOffsetDirection: Swift.Bool = false, curve: @escaping (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat, beginAt: Swift.Double, update: @escaping (CoreFoundation.CGFloat, T) -> Swift.Void, completed: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where T : OpenWeb3Lib.Interpolatable
  final public func completeAt(_ timestamp: Swift.Double) -> Swift.Bool
  final public func cancel()
  final public func applyAt(_ timestamp: Swift.Double)
  @objc deinit
}
public func listViewAnimationDurationAndCurve(transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> (Swift.Double, OpenWeb3Lib.ListViewAnimationCurve)
public func scrollingRubberBandingOffset(offset: CoreFoundation.CGFloat, bandingStart: CoreFoundation.CGFloat, range: CoreFoundation.CGFloat, coefficient: CoreFoundation.CGFloat = 0.4) -> CoreFoundation.CGFloat
public func switchToLatest<T, E>(_ signal: OpenWeb3Lib.Signal<OpenWeb3Lib.Signal<T, E>, E>) -> OpenWeb3Lib.Signal<T, E>
public func queue<T, E>(_ signal: OpenWeb3Lib.Signal<OpenWeb3Lib.Signal<T, E>, E>) -> OpenWeb3Lib.Signal<T, E>
public func throttled<T, E>(_ signal: OpenWeb3Lib.Signal<OpenWeb3Lib.Signal<T, E>, E>) -> OpenWeb3Lib.Signal<T, E>
public func mapToSignal<T, R, E>(_ f: @escaping (T) -> OpenWeb3Lib.Signal<R, E>) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<R, E>
public func ignoreValues<T, E>(_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<Swift.Never, E>
public func mapToSignalPromotingError<T, R, E>(_ f: @escaping (T) -> OpenWeb3Lib.Signal<R, E>) -> (OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>) -> OpenWeb3Lib.Signal<R, E>
public func mapToQueue<T, R, E>(_ f: @escaping (T) -> OpenWeb3Lib.Signal<R, E>) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<R, E>
public func mapToThrottled<T, R, E>(_ f: @escaping (T) -> OpenWeb3Lib.Signal<R, E>) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<R, E>
public func then<T, E>(_ nextSignal: OpenWeb3Lib.Signal<T, E>) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func deferred<T, E>(_ generator: @escaping () -> OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
final public class ContextMenuControllerPresentationArguments {
  final public let sourceNodeAndRect: () -> (OpenWeb3LibPrivite.ASDisplayNode, CoreFoundation.CGRect, OpenWeb3LibPrivite.ASDisplayNode, CoreFoundation.CGRect)?
  final public let bounce: Swift.Bool
  public init(sourceNodeAndRect: @escaping () -> (OpenWeb3LibPrivite.ASDisplayNode, CoreFoundation.CGRect, OpenWeb3LibPrivite.ASDisplayNode, CoreFoundation.CGRect)?, bounce: Swift.Bool = true)
  @objc deinit
}
public protocol ContextMenuController : OpenWeb3Lib.StandalonePresentableController {
  var centerHorizontally: Swift.Bool { get set }
  var dismissed: (() -> Swift.Void)? { get set }
  var dismissOnTap: ((UIKit.UIView, CoreFoundation.CGPoint) -> Swift.Bool)? { get set }
}
public struct ContextMenuControllerArguments {
  public var actions: [OpenWeb3Lib.ContextMenuAction]
  public var catchTapsOutside: Swift.Bool
  public var hasHapticFeedback: Swift.Bool
  public var blurred: Swift.Bool
  public var skipCoordnateConversion: Swift.Bool
  public var isDark: Swift.Bool
  public init(actions: [OpenWeb3Lib.ContextMenuAction], catchTapsOutside: Swift.Bool, hasHapticFeedback: Swift.Bool, blurred: Swift.Bool, skipCoordnateConversion: Swift.Bool, isDark: Swift.Bool)
}
public func setContextMenuControllerProvider(_ f: @escaping (OpenWeb3Lib.ContextMenuControllerArguments) -> any OpenWeb3Lib.ContextMenuController)
public func makeContextMenuController(actions: [OpenWeb3Lib.ContextMenuAction], catchTapsOutside: Swift.Bool = false, hasHapticFeedback: Swift.Bool = false, blurred: Swift.Bool = false, isDark: Swift.Bool = true, skipCoordnateConversion: Swift.Bool = false) -> any OpenWeb3Lib.ContextMenuController
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ListViewBackingView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak final public var target: OpenWeb3Lib.ListView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func setNeedsLayout()
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override final public func setNeedsDisplay()
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override final public func accessibilityScroll(_ direction: UIKit.UIAccessibilityScrollDirection) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ListViewVisibleContentOffset {
  case known(CoreFoundation.CGFloat)
  case unknown
  case none
}
public enum ListViewScrollDirection {
  case up
  case down
  public static func == (a: OpenWeb3Lib.ListViewScrollDirection, b: OpenWeb3Lib.ListViewScrollDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ListViewKeepTopItemOverscrollBackground {
  public let color: UIKit.UIColor
  public let direction: Swift.Bool
  public init(color: UIKit.UIColor, direction: Swift.Bool)
}
public enum GeneralScrollDirection {
  case up
  case down
  public static func == (a: OpenWeb3Lib.GeneralScrollDirection, b: OpenWeb3Lib.GeneralScrollDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc open class ListView : OpenWeb3LibPrivite.ASDisplayNode, OpenWeb3LibPrivite.ASScrollViewDelegate, OpenWeb3LibPrivite.ASGestureRecognizerDelegate {
  public struct ScrollingIndicatorState {
    public struct Item {
      public var index: Swift.Int
      public var offset: CoreFoundation.CGFloat
      public var height: CoreFoundation.CGFloat
      public init(index: Swift.Int, offset: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    }
    public var insets: UIKit.UIEdgeInsets
    public var topItem: OpenWeb3Lib.ListView.ScrollingIndicatorState.Item
    public var bottomItem: OpenWeb3Lib.ListView.ScrollingIndicatorState.Item
    public var itemCount: Swift.Int
    public init(insets: UIKit.UIEdgeInsets, topItem: OpenWeb3Lib.ListView.ScrollingIndicatorState.Item, bottomItem: OpenWeb3Lib.ListView.ScrollingIndicatorState.Item, itemCount: Swift.Int)
  }
  final public let scroller: OpenWeb3Lib.ListViewScroller
  final public var visibleSize: CoreFoundation.CGSize {
    get
  }
  final public var insets: UIKit.UIEdgeInsets {
    get
  }
  final public var visualInsets: UIKit.UIEdgeInsets?
  final public var dynamicVisualInsets: (() -> UIKit.UIEdgeInsets)?
  final public var headerInsets: UIKit.UIEdgeInsets {
    get
  }
  final public var scrollIndicatorInsets: UIKit.UIEdgeInsets {
    get
  }
  final public var globalIgnoreScrollingEvents: Swift.Bool
  final public var ignoreStopScrolling: Swift.Bool
  final public var dynamicBounceEnabled: Swift.Bool
  final public var rotated: Swift.Bool
  final public var experimentalSnapScrollToItem: Swift.Bool
  final public var useMainQueueTransactions: Swift.Bool
  final public var scrollEnabled: Swift.Bool {
    get
    set
  }
  public var preloadPages: Swift.Bool {
    get
    set
  }
  final public var keepMinimalScrollHeightWithTopInset: CoreFoundation.CGFloat?
  final public var itemNodeHitTest: ((CoreFoundation.CGPoint) -> Swift.Bool)?
  final public var stackFromBottom: Swift.Bool
  final public var stackFromBottomInsetItemFactor: CoreFoundation.CGFloat
  final public var limitHitTestToNodes: Swift.Bool
  final public var keepTopItemOverscrollBackground: OpenWeb3Lib.ListViewKeepTopItemOverscrollBackground? {
    get
    set
  }
  final public var keepBottomItemOverscrollBackground: UIKit.UIColor? {
    get
    set
  }
  final public var snapToBottomInsetUntilFirstInteraction: Swift.Bool
  final public var allowInsetFixWhileTracking: Swift.Bool
  final public var updateFloatingHeaderOffset: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  final public var didScrollWithOffset: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContainedViewLayoutTransition, OpenWeb3Lib.ListViewItemNode?, Swift.Bool) -> Swift.Void)?
  final public var addContentOffset: ((CoreFoundation.CGFloat, OpenWeb3Lib.ListViewItemNode?) -> Swift.Void)?
  final public var shouldStopScrolling: ((CoreFoundation.CGFloat) -> Swift.Bool)?
  final public var updateScrollingIndicator: ((OpenWeb3Lib.ListView.ScrollingIndicatorState?, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  public var verticalScrollIndicatorColor: UIKit.UIColor? {
    get
    set
  }
  final public var verticalScrollIndicatorFollowsOverscroll: Swift.Bool
  public var isTracking: Swift.Bool {
    get
  }
  public var trackingOffset: CoreFoundation.CGFloat {
    get
  }
  public var beganTrackingAtTopOrigin: Swift.Bool {
    get
  }
  public var isDragging: Swift.Bool {
    get
  }
  public var isDeceleratingAfterTracking: Swift.Bool {
    get
  }
  final public var synchronousNodes: Swift.Bool
  final public var debugInfo: Swift.Bool
  final public var useSingleDimensionTouchPoint: Swift.Bool
  public var enableExtractedBackgrounds: Swift.Bool {
    get
    set
  }
  final public var itemHeaderNodesAlpha: CoreFoundation.CGFloat
  final public var displayedItemRangeChanged: (OpenWeb3Lib.ListViewDisplayedItemRange, Any?) -> Swift.Void
  final public var displayedItemRange: OpenWeb3Lib.ListViewDisplayedItemRange {
    get
  }
  final public var internalDisplayedItemRange: OpenWeb3Lib.ListViewDisplayedItemRange? {
    get
  }
  final public var opaqueTransactionState: Any? {
    get
  }
  final public var visibleContentOffsetChanged: (OpenWeb3Lib.ListViewVisibleContentOffset) -> Swift.Void
  final public var visibleBottomContentOffsetChanged: (OpenWeb3Lib.ListViewVisibleContentOffset) -> Swift.Void
  final public var beganInteractiveDragging: (CoreFoundation.CGPoint) -> Swift.Void
  final public var endedInteractiveDragging: (CoreFoundation.CGPoint) -> Swift.Void
  final public var didEndScrolling: ((Swift.Bool) -> Swift.Void)?
  final public var generalScrollDirectionUpdated: (OpenWeb3Lib.GeneralScrollDirection) -> Swift.Void
  public var isReordering: Swift.Bool {
    get
  }
  final public var willBeginReorder: (CoreFoundation.CGPoint) -> Swift.Void
  final public var reorderBegan: () -> Swift.Void
  final public var reorderItem: (Swift.Int, Swift.Int, Any?) -> OpenWeb3Lib.Signal<Swift.Bool, OpenWeb3Lib.NoError>
  final public var reorderCompleted: (Any?) -> Swift.Void
  final public var tapped: (() -> Swift.Void)? {
    get
    set
  }
  public var reorderedItemHasShadow: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  public func flashHeaderItems(duration: Swift.Double = 2.0)
  @objc public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @objc public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  public func transferVelocity(_ velocity: CoreFoundation.CGFloat)
  public var defaultToSynchronousTransactionWhileScrolling: Swift.Bool
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  public var tempTopInset: CoreFoundation.CGFloat {
    get
    set
  }
  public func visibleContentOffset() -> OpenWeb3Lib.ListViewVisibleContentOffset
  public func visibleBottomContentOffset() -> OpenWeb3Lib.ListViewVisibleContentOffset
  public func stopScrolling()
  public func cancelTracking()
  public func addAfterTransactionsCompleted(_ f: @escaping () -> Swift.Void)
  public func transaction(deleteIndices: [OpenWeb3Lib.ListViewDeleteItem], insertIndicesAndItems: [OpenWeb3Lib.ListViewInsertItem], updateIndicesAndItems: [OpenWeb3Lib.ListViewUpdateItem], options: OpenWeb3Lib.ListViewDeleteAndInsertOptions, scrollToItem: OpenWeb3Lib.ListViewScrollToItem? = nil, additionalScrollDistance: CoreFoundation.CGFloat = 0.0, updateSizeAndInsets: OpenWeb3Lib.ListViewUpdateSizeAndInsets? = nil, stationaryItemRange: (Swift.Int, Swift.Int)? = nil, updateOpaqueState: Any?, completion: @escaping (OpenWeb3Lib.ListViewDisplayedItemRange) -> Swift.Void = { _ in })
  public func updateVisibleItemRange(force: Swift.Bool = false)
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  public func clearHighlightAnimated(_ animated: Swift.Bool)
  public func updateNodeHighlightsAnimated(_ animated: Swift.Bool)
  public func itemIndexAtPoint(_ point: CoreFoundation.CGPoint) -> Swift.Int?
  public func itemNodeAtIndex(_ index: Swift.Int) -> OpenWeb3Lib.ListViewItemNode?
  public func indexOf(itemNode: OpenWeb3Lib.ListViewItemNode) -> Swift.Int?
  public func forEachItemNode(_ f: (OpenWeb3LibPrivite.ASDisplayNode) -> Swift.Void)
  public func forEachRemovedItemNode(_ f: (OpenWeb3LibPrivite.ASDisplayNode) -> Swift.Void)
  public func enumerateItemNodes(_ f: (OpenWeb3LibPrivite.ASDisplayNode) -> Swift.Bool)
  public func forEachVisibleItemNode(_ f: (OpenWeb3LibPrivite.ASDisplayNode) -> Swift.Void)
  public func forEachItemHeaderNode(_ f: (OpenWeb3Lib.ListViewItemHeaderNode) -> Swift.Void)
  public func forEachAccessoryItemNode(_ f: (OpenWeb3Lib.ListViewAccessoryItemNode) -> Swift.Void)
  public func ensureItemNodeVisible(_ node: OpenWeb3Lib.ListViewItemNode, animated: Swift.Bool = true, overflow: CoreFoundation.CGFloat = 0.0, allowIntersection: Swift.Bool = false, atTop: Swift.Bool = false, curve: OpenWeb3Lib.ListViewAnimationCurve = .Default(duration: 0.25))
  public func ensureItemNodeVisibleAtTopInset(_ node: OpenWeb3Lib.ListViewItemNode)
  public func itemNodeRelativeOffset(_ node: OpenWeb3Lib.ListViewItemNode) -> CoreFoundation.CGFloat?
  public func itemNodeVisibleInsideInsets(_ node: OpenWeb3Lib.ListViewItemNode) -> Swift.Bool
  @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  public func cancelSelection()
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>?, with event: UIKit.UIEvent?)
  @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  public func withTransaction(_ f: @escaping () -> Swift.Void)
  public func scrollToOffsetFromTop(_ offset: CoreFoundation.CGFloat, animated: Swift.Bool) -> Swift.Bool
  public var accessibilityPageScrolledString: ((Swift.String, Swift.String) -> Swift.String)?
  public func scrollWithDirection(_ direction: OpenWeb3Lib.ListViewScrollDirection, distance: CoreFoundation.CGFloat) -> Swift.Bool
  @objc override dynamic open func accessibilityScroll(_ direction: UIKit.UIAccessibilityScrollDirection) -> Swift.Bool
  open func customItemDeleteAnimationDuration(itemNode: OpenWeb3Lib.ListViewItemNode) -> Swift.Double?
}
extension OpenWeb3Lib.Transition.Animation {
  public var isImmediate: Swift.Bool {
    get
  }
}
public struct Transition {
  public enum Animation {
    public enum Curve {
      case easeInOut
      case spring
      case linear
      case custom(Swift.Float, Swift.Float, Swift.Float, Swift.Float)
      public func solve(at offset: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
      public static var slide: OpenWeb3Lib.Transition.Animation.Curve {
        get
      }
    }
    case none
    case curve(duration: Swift.Double, curve: OpenWeb3Lib.Transition.Animation.Curve)
  }
  public var animation: OpenWeb3Lib.Transition.Animation
  public func userData<T>(_ type: T.Type) -> T?
  public func withUserData(_ userData: Any) -> OpenWeb3Lib.Transition
  public func withAnimation(_ animation: OpenWeb3Lib.Transition.Animation) -> OpenWeb3Lib.Transition
  public func withAnimationIfAnimated(_ animation: OpenWeb3Lib.Transition.Animation) -> OpenWeb3Lib.Transition
  public static var immediate: OpenWeb3Lib.Transition
  public static func easeInOut(duration: Swift.Double) -> OpenWeb3Lib.Transition
  public static func spring(duration: Swift.Double) -> OpenWeb3Lib.Transition
  public init(animation: OpenWeb3Lib.Transition.Animation)
  public func setFrame(view: UIKit.UIView, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setFrame(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setFrameWithAdditivePosition(view: UIKit.UIView, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setFrameWithAdditivePosition(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setBounds(view: UIKit.UIView, bounds: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setBoundsOrigin(view: UIKit.UIView, origin: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setBoundsSize(view: UIKit.UIView, size: CoreFoundation.CGSize, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setPosition(view: UIKit.UIView, position: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setBounds(layer: QuartzCore.CALayer, bounds: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setPosition(layer: QuartzCore.CALayer, position: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setAnchorPoint(layer: QuartzCore.CALayer, anchorPoint: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func attachAnimation(view: UIKit.UIView, id: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func setAlpha(view: UIKit.UIView, alpha: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setAlpha(layer: QuartzCore.CALayer, alpha: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setScale(view: UIKit.UIView, scale: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setScaleWithSpring(view: UIKit.UIView, scale: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setScale(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setScaleWithSpring(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setTransform(view: UIKit.UIView, transform: QuartzCore.CATransform3D, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setTransformAsKeyframes(view: UIKit.UIView, transform: (CoreFoundation.CGFloat, Swift.Bool) -> QuartzCore.CATransform3D, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setTransform(layer: QuartzCore.CALayer, transform: QuartzCore.CATransform3D, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setTransformAsKeyframes(layer: QuartzCore.CALayer, transform: (CoreFoundation.CGFloat, Swift.Bool) -> QuartzCore.CATransform3D, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setSublayerTransform(view: UIKit.UIView, transform: QuartzCore.CATransform3D, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setSublayerTransform(layer: QuartzCore.CALayer, transform: QuartzCore.CATransform3D, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setZPosition(layer: QuartzCore.CALayer, zPosition: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateScale(view: UIKit.UIView, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateSublayerScale(view: UIKit.UIView, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateAlpha(view: UIKit.UIView, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateAlpha(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePosition(view: UIKit.UIView, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBounds(view: UIKit.UIView, from fromValue: CoreFoundation.CGRect, to toValue: CoreFoundation.CGRect, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBoundsOrigin(view: UIKit.UIView, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBoundsSize(view: UIKit.UIView, from fromValue: CoreFoundation.CGSize, to toValue: CoreFoundation.CGSize, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePosition(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateAnchorPoint(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBounds(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGRect, to toValue: CoreFoundation.CGRect, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBoundsOrigin(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBoundsSize(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGSize, to toValue: CoreFoundation.CGSize, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setCornerRadius(layer: QuartzCore.CALayer, cornerRadius: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setShapeLayerPath(layer: QuartzCore.CAShapeLayer, path: CoreGraphics.CGPath, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setShapeLayerLineWidth(layer: QuartzCore.CAShapeLayer, lineWidth: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setShapeLayerLineDashPattern(layer: QuartzCore.CAShapeLayer, pattern: [Foundation.NSNumber], completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setShapeLayerStrokeStart(layer: QuartzCore.CAShapeLayer, strokeStart: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setShapeLayerStrokeEnd(layer: QuartzCore.CAShapeLayer, strokeEnd: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setShapeLayerFillColor(layer: QuartzCore.CAShapeLayer, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setBackgroundColor(view: UIKit.UIView, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setBackgroundColor(layer: QuartzCore.CALayer, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setTintColor(view: UIKit.UIView, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func setTintColor(layer: QuartzCore.CALayer, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateContentsImage(layer: QuartzCore.CALayer, from fromImage: CoreGraphics.CGImage, to toImage: CoreGraphics.CGImage, duration: Swift.Double, curve: OpenWeb3Lib.Transition.Animation.Curve, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
final public class Lock {
  public init()
  @objc deinit
  final public func locked(_ f: () -> ())
  final public func throwingLocked(_ f: () throws -> Swift.Void) throws
}
extension OpenWeb3Lib.Gesture {
  public enum LongPressGestureState {
    case began
    case ended
    public static func == (a: OpenWeb3Lib.Gesture.LongPressGestureState, b: OpenWeb3Lib.Gesture.LongPressGestureState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func longPress(duration: Swift.Double = 0.2, _ action: @escaping (OpenWeb3Lib.Gesture.LongPressGestureState) -> Swift.Void) -> OpenWeb3Lib.Gesture
}
@_hasMissingDesignatedInitializers final public class Empty : Swift.Equatable {
  public static func == (lhs: OpenWeb3Lib.Empty, rhs: OpenWeb3Lib.Empty) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class _Environment {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class _EnvironmentValue {
  @objc deinit
}
@_hasMissingDesignatedInitializers @dynamicMemberLookup final public class EnvironmentValue<T> : OpenWeb3Lib._EnvironmentValue, Swift.Equatable where T : Swift.Equatable {
  final public var value: T {
    get
  }
  public static func == (lhs: OpenWeb3Lib.EnvironmentValue<T>, rhs: OpenWeb3Lib.EnvironmentValue<T>) -> Swift.Bool
  final public subscript<V>(dynamicMember keyPath: Swift.KeyPath<T, V>) -> V {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Environment<T> : OpenWeb3Lib._Environment {
  public init(_ file: Swift.StaticString = #file, _ line: Swift.Int = #line)
  @objc deinit
}
extension OpenWeb3Lib.Environment where T == OpenWeb3Lib.Empty {
  public static let value: OpenWeb3Lib.Environment<OpenWeb3Lib.Empty>
}
extension OpenWeb3Lib.Environment {
  public subscript(t1: T.Type) -> OpenWeb3Lib.EnvironmentValue<T> where T : Swift.Equatable {
    get
  }
  public subscript<T1, T2>(t1: T1.Type) -> OpenWeb3Lib.EnvironmentValue<T1> where T == (T1, T2), T1 : Swift.Equatable, T2 : Swift.Equatable {
    get
  }
  public subscript<T1, T2>(t2: T2.Type) -> OpenWeb3Lib.EnvironmentValue<T2> where T == (T1, T2), T1 : Swift.Equatable, T2 : Swift.Equatable {
    get
  }
  public subscript<T1, T2, T3>(t1: T1.Type) -> OpenWeb3Lib.EnvironmentValue<T1> where T == (T1, T2, T3), T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable {
    get
  }
  public subscript<T1, T2, T3>(t2: T2.Type) -> OpenWeb3Lib.EnvironmentValue<T2> where T == (T1, T2, T3), T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable {
    get
  }
  public subscript<T1, T2, T3>(t3: T3.Type) -> OpenWeb3Lib.EnvironmentValue<T3> where T == (T1, T2, T3), T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable {
    get
  }
  public subscript<T1, T2, T3, T4>(t1: T1.Type) -> OpenWeb3Lib.EnvironmentValue<T1> where T == (T1, T2, T3, T4), T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable, T4 : Swift.Equatable {
    get
  }
  public subscript<T1, T2, T3, T4>(t2: T2.Type) -> OpenWeb3Lib.EnvironmentValue<T2> where T == (T1, T2, T3, T4), T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable, T4 : Swift.Equatable {
    get
  }
  public subscript<T1, T2, T3, T4>(t3: T3.Type) -> OpenWeb3Lib.EnvironmentValue<T3> where T == (T1, T2, T3, T4), T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable, T4 : Swift.Equatable {
    get
  }
  public subscript<T1, T2, T3, T4>(t4: T4.Type) -> OpenWeb3Lib.EnvironmentValue<T4> where T == (T1, T2, T3, T4), T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable, T4 : Swift.Equatable {
    get
  }
}
@_functionBuilder public struct EnvironmentBuilder {
  public struct Partial<T> where T : Swift.Equatable {
  }
  public static func buildBlock() -> OpenWeb3Lib.Environment<OpenWeb3Lib.Empty>
  public static func buildExpression<T>(_ expression: T) -> OpenWeb3Lib.EnvironmentBuilder.Partial<T> where T : Swift.Equatable
  public static func buildExpression<T>(_ expression: OpenWeb3Lib.EnvironmentValue<T>) -> OpenWeb3Lib.EnvironmentBuilder.Partial<T> where T : Swift.Equatable
  public static func buildBlock<T1>(_ t1: OpenWeb3Lib.EnvironmentBuilder.Partial<T1>) -> OpenWeb3Lib.Environment<T1> where T1 : Swift.Equatable
  public static func buildBlock<T1, T2>(_ t1: OpenWeb3Lib.EnvironmentBuilder.Partial<T1>, _ t2: OpenWeb3Lib.EnvironmentBuilder.Partial<T2>) -> OpenWeb3Lib.Environment<(T1, T2)> where T1 : Swift.Equatable, T2 : Swift.Equatable
  public static func buildBlock<T1, T2, T3>(_ t1: OpenWeb3Lib.EnvironmentBuilder.Partial<T1>, _ t2: OpenWeb3Lib.EnvironmentBuilder.Partial<T2>, _ t3: OpenWeb3Lib.EnvironmentBuilder.Partial<T3>) -> OpenWeb3Lib.Environment<(T1, T2, T3)> where T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable
  public static func buildBlock<T1, T2, T3, T4>(_ t1: OpenWeb3Lib.EnvironmentBuilder.Partial<T1>, _ t2: OpenWeb3Lib.EnvironmentBuilder.Partial<T2>, _ t3: OpenWeb3Lib.EnvironmentBuilder.Partial<T3>, _ t4: OpenWeb3Lib.EnvironmentBuilder.Partial<T4>) -> OpenWeb3Lib.Environment<(T1, T2, T3, T4)> where T1 : Swift.Equatable, T2 : Swift.Equatable, T3 : Swift.Equatable, T4 : Swift.Equatable
}
@propertyWrapper public struct ZeroEquatable<T> : Swift.Equatable {
  public var wrappedValue: T
  public init(_ wrappedValue: T)
  public static func == (lhs: OpenWeb3Lib.ZeroEquatable<T>, rhs: OpenWeb3Lib.ZeroEquatable<T>) -> Swift.Bool
}
@objc public class NavigationTitleNode : OpenWeb3LibPrivite.ASDisplayNode {
  public var text: Foundation.NSString {
    get
    set(value)
  }
  public var color: UIKit.UIColor {
    get
    set
  }
  public init(text: Foundation.NSString)
  required public init(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc override dynamic public func layout()
  @objc deinit
}
public class AdaptedPostboxEncoder {
  final public class RawObjectData : Swift.Encodable {
    final public let typeHash: Swift.Int32
    final public let data: Foundation.Data
    public init(typeHash: Swift.Int32, data: Foundation.Data)
    final public func encode(to encoder: any Swift.Encoder) throws
    @objc deinit
  }
  public init()
  public func encode(_ value: any Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Swift.Collection {
  public subscript(subranges: OpenWeb3Lib.RangeSet<Self.Index>) -> OpenWeb3Lib.DiscontiguousSlice<Self> {
    get
  }
}
extension Swift.MutableCollection {
  public subscript(subranges: OpenWeb3Lib.RangeSet<Self.Index>) -> OpenWeb3Lib.DiscontiguousSlice<Self> {
    get
    set
  }
}
extension Swift.MutableCollection {
  @discardableResult
  public mutating func moveSubranges(_ subranges: OpenWeb3Lib.RangeSet<Self.Index>, to insertionPoint: Self.Index) -> Swift.Range<Self.Index>
}
extension Swift.RangeReplaceableCollection {
  public mutating func removeSubranges(_ subranges: OpenWeb3Lib.RangeSet<Self.Index>)
}
extension Swift.MutableCollection where Self : Swift.RangeReplaceableCollection {
  public mutating func removeSubranges(_ subranges: OpenWeb3Lib.RangeSet<Self.Index>)
}
extension Swift.Collection {
  public func removingSubranges(_ subranges: OpenWeb3Lib.RangeSet<Self.Index>) -> OpenWeb3Lib.DiscontiguousSlice<Self>
}
extension Swift.Collection {
  public func subranges(where predicate: (Self.Element) throws -> Swift.Bool) rethrows -> OpenWeb3Lib.RangeSet<Self.Index>
}
extension Swift.Collection where Self.Element : Swift.Equatable {
  public func subranges(of element: Self.Element) -> OpenWeb3Lib.RangeSet<Self.Index>
}
public enum ListViewItemHeaderStickDirection {
  case top
  case topEdge
  case bottom
  public static func == (a: OpenWeb3Lib.ListViewItemHeaderStickDirection, b: OpenWeb3Lib.ListViewItemHeaderStickDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ListViewItemHeader : AnyObject {
  var id: OpenWeb3Lib.ListViewItemNode.HeaderId { get }
  var stickDirection: OpenWeb3Lib.ListViewItemHeaderStickDirection { get }
  var height: CoreFoundation.CGFloat { get }
  var stickOverInsets: Swift.Bool { get }
  func combinesWith(other: any OpenWeb3Lib.ListViewItemHeader) -> Swift.Bool
  func node(synchronousLoad: Swift.Bool) -> OpenWeb3Lib.ListViewItemHeaderNode
  func updateNode(_ node: OpenWeb3Lib.ListViewItemHeaderNode, previous: (any OpenWeb3Lib.ListViewItemHeader)?, next: (any OpenWeb3Lib.ListViewItemHeader)?)
}
@objc open class ListViewItemHeaderNode : OpenWeb3LibPrivite.ASDisplayNode {
  public var item: (any OpenWeb3Lib.ListViewItemHeader)?
  open func updateFlashingOnScrolling(_ isFlashingOnScrolling: Swift.Bool, animated: Swift.Bool)
  open func getEffectiveAlpha() -> CoreFoundation.CGFloat
  public init(layerBacked: Swift.Bool = false, dynamicBounce: Swift.Bool = false, isRotated: Swift.Bool = false, seeThrough: Swift.Bool = false)
  open func updateStickDistanceFactor(_ factor: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  public func animate(_ timestamp: Swift.Double) -> Swift.Bool
  open func animateRemoved(duration: Swift.Double)
  open func animateAdded(duration: Swift.Double)
  public func updateLayoutInternal(size: CoreFoundation.CGSize, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat)
  open func updateLayout(size: CoreFoundation.CGSize, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat)
  open func updateAbsoluteRect(_ rect: CoreFoundation.CGRect, within containerSize: CoreFoundation.CGSize)
  public func updateFrame(_ frame: CoreFoundation.CGRect, within containerSize: CoreFoundation.CGSize, updateFrame: Swift.Bool = true)
  @objc deinit
}
public struct RangeSet<Bound> where Bound : Swift.Comparable {
  public init()
  public init(_ range: Swift.Range<Bound>)
  public init<S>(_ ranges: S) where S : Swift.Sequence, S.Element == Swift.Range<Bound>
  public var isEmpty: Swift.Bool {
    get
  }
  public func contains(_ value: Bound) -> Swift.Bool
  public func intersects(_ range: Swift.Range<Bound>) -> Swift.Bool
  public mutating func insert(contentsOf range: Swift.Range<Bound>)
  public mutating func remove(contentsOf range: Swift.Range<Bound>)
}
extension OpenWeb3Lib.RangeSet : Swift.Equatable {
  public static func == (a: OpenWeb3Lib.RangeSet<Bound>, b: OpenWeb3Lib.RangeSet<Bound>) -> Swift.Bool
}
extension OpenWeb3Lib.RangeSet : Swift.Hashable where Bound : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OpenWeb3Lib.RangeSet {
  public struct Ranges : Swift.RandomAccessCollection {
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(i: Swift.Int) -> Swift.Range<Bound> {
      get
    }
    public typealias Element = Swift.Range<Bound>
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    public typealias Iterator = Swift.IndexingIterator<OpenWeb3Lib.RangeSet<Bound>.Ranges>
    public typealias SubSequence = Swift.Slice<OpenWeb3Lib.RangeSet<Bound>.Ranges>
  }
  public var ranges: OpenWeb3Lib.RangeSet<Bound>.Ranges {
    get
  }
}
extension OpenWeb3Lib.RangeSet {
  public init<S, C>(_ indices: S, within collection: C) where Bound == S.Element, S : Swift.Sequence, C : Swift.Collection, S.Element == C.Index
  public mutating func insert<C>(_ index: Bound, within collection: C) where Bound == C.Index, C : Swift.Collection
  public mutating func remove<C>(_ index: Bound, within collection: C) where Bound == C.Index, C : Swift.Collection
}
extension OpenWeb3Lib.RangeSet {
  public mutating func formUnion(_ other: __owned OpenWeb3Lib.RangeSet<Bound>)
  public mutating func formIntersection(_ other: OpenWeb3Lib.RangeSet<Bound>)
  public mutating func formSymmetricDifference(_ other: __owned OpenWeb3Lib.RangeSet<Bound>)
  public mutating func subtract(_ other: OpenWeb3Lib.RangeSet<Bound>)
  public __consuming func union(_ other: __owned OpenWeb3Lib.RangeSet<Bound>) -> OpenWeb3Lib.RangeSet<Bound>
  public __consuming func intersection(_ other: OpenWeb3Lib.RangeSet<Bound>) -> OpenWeb3Lib.RangeSet<Bound>
  public __consuming func symmetricDifference(_ other: __owned OpenWeb3Lib.RangeSet<Bound>) -> OpenWeb3Lib.RangeSet<Bound>
  public func subtracting(_ other: OpenWeb3Lib.RangeSet<Bound>) -> OpenWeb3Lib.RangeSet<Bound>
  public func isSubset(of other: OpenWeb3Lib.RangeSet<Bound>) -> Swift.Bool
  public func isSuperset(of other: OpenWeb3Lib.RangeSet<Bound>) -> Swift.Bool
  public func isStrictSubset(of other: OpenWeb3Lib.RangeSet<Bound>) -> Swift.Bool
  public func isStrictSuperset(of other: OpenWeb3Lib.RangeSet<Bound>) -> Swift.Bool
}
extension OpenWeb3Lib.RangeSet : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BaseWebView : WebKit.WKWebView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PresentationBuiltinThemeReference : Swift.Int32 {
  case dayClassic
  case night
  case day
  case nightAccent
  public init(baseTheme: OpenWeb3Lib.TelegramBaseTheme)
  public var baseTheme: OpenWeb3Lib.TelegramBaseTheme {
    get
  }
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct WallpaperPresentationOptions : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let motion: OpenWeb3Lib.WallpaperPresentationOptions
  public static let blur: OpenWeb3Lib.WallpaperPresentationOptions
  public typealias ArrayLiteralElement = OpenWeb3Lib.WallpaperPresentationOptions
  public typealias Element = OpenWeb3Lib.WallpaperPresentationOptions
  public typealias RawValue = Swift.Int32
}
public struct PresentationLocalTheme : OpenWeb3Lib.PostboxCoding, Swift.Equatable {
  public let title: Swift.String
  public let resource: OpenWeb3Lib.LocalFileMediaResource
  public init(title: Swift.String, resource: OpenWeb3Lib.LocalFileMediaResource)
  public init(decoder: OpenWeb3Lib.PostboxDecoder)
  public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  public static func == (lhs: OpenWeb3Lib.PresentationLocalTheme, rhs: OpenWeb3Lib.PresentationLocalTheme) -> Swift.Bool
}
public enum PresentationThemeReference : OpenWeb3Lib.PostboxCoding, Swift.Equatable {
  case builtin(OpenWeb3Lib.PresentationBuiltinThemeReference)
  case local(OpenWeb3Lib.PresentationLocalTheme)
  public init(decoder: OpenWeb3Lib.PostboxDecoder)
  public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  public static func == (lhs: OpenWeb3Lib.PresentationThemeReference, rhs: OpenWeb3Lib.PresentationThemeReference) -> Swift.Bool
  public var index: Swift.Int64 {
    get
  }
  public var generalThemeReference: OpenWeb3Lib.PresentationThemeReference {
    get
  }
  public var emoticon: Swift.String? {
    get
  }
}
public func coloredThemeIndex(reference: OpenWeb3Lib.PresentationThemeReference, accentColor: OpenWeb3Lib.PresentationThemeAccentColor?) -> Swift.Int64
public enum PresentationFontSize : Swift.Int32, Swift.CaseIterable {
  case extraSmall
  case small
  case regular
  case large
  case extraLarge
  case extraLargeX2
  case medium
  public init?(rawValue: Swift.Int32)
  public typealias AllCases = [OpenWeb3Lib.PresentationFontSize]
  public typealias RawValue = Swift.Int32
  nonisolated public static var allCases: [OpenWeb3Lib.PresentationFontSize] {
    get
  }
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum AutomaticThemeSwitchTimeBasedSetting : Swift.Codable, Swift.Equatable {
  case manual(fromSeconds: Swift.Int32, toSeconds: Swift.Int32)
  case automatic(latitude: Swift.Double, longitude: Swift.Double, localizedName: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: OpenWeb3Lib.AutomaticThemeSwitchTimeBasedSetting, b: OpenWeb3Lib.AutomaticThemeSwitchTimeBasedSetting) -> Swift.Bool
}
public enum AutomaticThemeSwitchTrigger : Swift.Codable, Swift.Equatable {
  case system
  case explicitNone
  case timeBased(setting: OpenWeb3Lib.AutomaticThemeSwitchTimeBasedSetting)
  case brightness(threshold: Swift.Double)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: OpenWeb3Lib.AutomaticThemeSwitchTrigger, b: OpenWeb3Lib.AutomaticThemeSwitchTrigger) -> Swift.Bool
}
public struct AutomaticThemeSwitchSetting : Swift.Codable, Swift.Equatable {
  public var force: Swift.Bool
  public var trigger: OpenWeb3Lib.AutomaticThemeSwitchTrigger
  public var theme: OpenWeb3Lib.PresentationThemeReference
  public init(force: Swift.Bool, trigger: OpenWeb3Lib.AutomaticThemeSwitchTrigger, theme: OpenWeb3Lib.PresentationThemeReference)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: OpenWeb3Lib.AutomaticThemeSwitchSetting, b: OpenWeb3Lib.AutomaticThemeSwitchSetting) -> Swift.Bool
}
public enum PresentationThemeBaseColor : Swift.Int32, Swift.CaseIterable {
  case blue
  case cyan
  case green
  case pink
  case orange
  case purple
  case red
  case yellow
  case gray
  case black
  case white
  case custom
  case preset
  case theme
  public var color: UIKit.UIColor {
    get
  }
  public init?(rawValue: Swift.Int32)
  public typealias AllCases = [OpenWeb3Lib.PresentationThemeBaseColor]
  public typealias RawValue = Swift.Int32
  nonisolated public static var allCases: [OpenWeb3Lib.PresentationThemeBaseColor] {
    get
  }
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct PresentationThemeAccentColor : OpenWeb3Lib.PostboxCoding, Swift.Equatable {
  public static func == (lhs: OpenWeb3Lib.PresentationThemeAccentColor, rhs: OpenWeb3Lib.PresentationThemeAccentColor) -> Swift.Bool
  public var index: Swift.Int32
  public var baseColor: OpenWeb3Lib.PresentationThemeBaseColor
  public var accentColor: Swift.UInt32?
  public var bubbleColors: [Swift.UInt32]
  public var themeIndex: Swift.Int64?
  public init(baseColor: OpenWeb3Lib.PresentationThemeBaseColor)
  public init(index: Swift.Int32, baseColor: OpenWeb3Lib.PresentationThemeBaseColor, accentColor: Swift.UInt32? = nil, bubbleColors: [Swift.UInt32] = [])
  public init(themeIndex: Swift.Int64)
  public init(decoder: OpenWeb3Lib.PostboxDecoder)
  public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  public var color: UIKit.UIColor {
    get
  }
  public func colorFor(baseTheme: OpenWeb3Lib.TelegramBaseTheme) -> UIKit.UIColor
  public var customBubbleColors: [Swift.UInt32] {
    get
  }
  public var plainBubbleColors: [Swift.UInt32] {
    get
  }
}
public struct PresentationChatBubbleSettings : Swift.Codable, Swift.Equatable {
  public var mainRadius: Swift.Int32
  public var auxiliaryRadius: Swift.Int32
  public var mergeBubbleCorners: Swift.Bool
  public static var `default`: OpenWeb3Lib.PresentationChatBubbleSettings
  public init(mainRadius: Swift.Int32, auxiliaryRadius: Swift.Int32, mergeBubbleCorners: Swift.Bool)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: OpenWeb3Lib.PresentationChatBubbleSettings, b: OpenWeb3Lib.PresentationChatBubbleSettings) -> Swift.Bool
}
public struct PresentationThemeSettings : Swift.Codable {
  public var theme: OpenWeb3Lib.PresentationThemeReference
  public var themePreferredBaseTheme: [Swift.Int64 : OpenWeb3Lib.TelegramBaseTheme]
  public var themeSpecificAccentColors: [Swift.Int64 : OpenWeb3Lib.PresentationThemeAccentColor]
  public var useSystemFont: Swift.Bool
  public var fontSize: OpenWeb3Lib.PresentationFontSize
  public var listsFontSize: OpenWeb3Lib.PresentationFontSize
  public var chatBubbleSettings: OpenWeb3Lib.PresentationChatBubbleSettings
  public var automaticThemeSwitchSetting: OpenWeb3Lib.AutomaticThemeSwitchSetting
  public var largeEmoji: Swift.Bool
  public var reduceMotion: Swift.Bool
  public var relatedResources: [OpenWeb3Lib.MediaResourceId] {
    get
  }
  public static var defaultSettings: OpenWeb3Lib.PresentationThemeSettings {
    get
  }
  public init(theme: OpenWeb3Lib.PresentationThemeReference, themePreferredBaseTheme: [Swift.Int64 : OpenWeb3Lib.TelegramBaseTheme], themeSpecificAccentColors: [Swift.Int64 : OpenWeb3Lib.PresentationThemeAccentColor], useSystemFont: Swift.Bool, fontSize: OpenWeb3Lib.PresentationFontSize, listsFontSize: OpenWeb3Lib.PresentationFontSize, chatBubbleSettings: OpenWeb3Lib.PresentationChatBubbleSettings, automaticThemeSwitchSetting: OpenWeb3Lib.AutomaticThemeSwitchSetting, largeEmoji: Swift.Bool, reduceMotion: Swift.Bool)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: OpenWeb3Lib.PresentationThemeSettings, rhs: OpenWeb3Lib.PresentationThemeSettings) -> Swift.Bool
  public func withUpdatedTheme(_ theme: OpenWeb3Lib.PresentationThemeReference) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedThemePreferredBaseTheme(_ themePreferredBaseTheme: [Swift.Int64 : OpenWeb3Lib.TelegramBaseTheme]) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedThemeSpecificAccentColors(_ themeSpecificAccentColors: [Swift.Int64 : OpenWeb3Lib.PresentationThemeAccentColor]) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedUseSystemFont(_ useSystemFont: Swift.Bool) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedFontSizes(fontSize: OpenWeb3Lib.PresentationFontSize, listsFontSize: OpenWeb3Lib.PresentationFontSize) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedChatBubbleSettings(_ chatBubbleSettings: OpenWeb3Lib.PresentationChatBubbleSettings) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedAutomaticThemeSwitchSetting(_ automaticThemeSwitchSetting: OpenWeb3Lib.AutomaticThemeSwitchSetting) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedLargeEmoji(_ largeEmoji: Swift.Bool) -> OpenWeb3Lib.PresentationThemeSettings
  public func withUpdatedReduceMotion(_ reduceMotion: Swift.Bool) -> OpenWeb3Lib.PresentationThemeSettings
}
@objc @_inheritsConvenienceInitializers open class ListViewAccessoryItemNode : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override dynamic open func layout()
  open func updateLayout(size: CoreFoundation.CGSize, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat)
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class DirectionalPanGestureRecognizer : UIKit.UIPanGestureRecognizer {
  public enum Direction {
    case horizontal
    case vertical
    public static func == (a: OpenWeb3Lib.DirectionalPanGestureRecognizer.Direction, b: OpenWeb3Lib.DirectionalPanGestureRecognizer.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var shouldBegin: ((CoreFoundation.CGPoint) -> Swift.Bool)?
  @_Concurrency.MainActor @preconcurrency public var direction: OpenWeb3Lib.DirectionalPanGestureRecognizer.Direction
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func reset()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @objc deinit
}
extension UIKit.UIColor {
  public var hexString: Swift.String {
    get
  }
}
public protocol SharedDisplayLinkDriverLink : AnyObject {
  var isPaused: Swift.Bool { get set }
  func invalidate()
}
@_hasMissingDesignatedInitializers final public class SharedDisplayLinkDriver {
  public enum FramesPerSecond : Swift.Comparable {
    case fps(Swift.Int)
    case max
    public static func < (lhs: OpenWeb3Lib.SharedDisplayLinkDriver.FramesPerSecond, rhs: OpenWeb3Lib.SharedDisplayLinkDriver.FramesPerSecond) -> Swift.Bool
    public static func == (a: OpenWeb3Lib.SharedDisplayLinkDriver.FramesPerSecond, b: OpenWeb3Lib.SharedDisplayLinkDriver.FramesPerSecond) -> Swift.Bool
  }
  public typealias Link = OpenWeb3Lib.SharedDisplayLinkDriverLink
  public static let shared: OpenWeb3Lib.SharedDisplayLinkDriver
  @_hasMissingDesignatedInitializers final public class LinkImpl : OpenWeb3Lib.SharedDisplayLinkDriver.Link {
    final public let framesPerSecond: OpenWeb3Lib.SharedDisplayLinkDriver.FramesPerSecond
    final public var isPaused: Swift.Bool {
      get
      set
    }
    final public func invalidate()
    @objc deinit
  }
  final public func updateForegroundState(_ isActive: Swift.Bool)
  final public func add(framesPerSecond: OpenWeb3Lib.SharedDisplayLinkDriver.FramesPerSecond = .fps(60), _ update: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> any OpenWeb3Lib.SharedDisplayLinkDriverLink
  @objc deinit
}
@objc final public class DisplayLinkTarget : ObjectiveC.NSObject {
  public init(_ f: @escaping (QuartzCore.CADisplayLink) -> Swift.Void)
  @objc final public func event(_ displayLink: QuartzCore.CADisplayLink)
  @objc deinit
}
final public class DisplayLinkAnimator {
  public init(duration: Swift.Double, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, update: @escaping (CoreFoundation.CGFloat) -> Swift.Void, completion: @escaping () -> Swift.Void)
  @objc deinit
  final public func invalidate()
}
final public class ConstantDisplayLinkAnimator {
  final public var frameInterval: Swift.Int {
    get
    set
  }
  final public var isPaused: Swift.Bool {
    get
    set
  }
  public init(update: @escaping () -> Swift.Void)
  @objc deinit
  final public func invalidate()
}
public enum ActionSheetButtonColor {
  case accent
  case destructive
  case disabled
  public static func == (a: OpenWeb3Lib.ActionSheetButtonColor, b: OpenWeb3Lib.ActionSheetButtonColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ActionSheetButtonFont {
  case `default`
  case bold
  public static func == (a: OpenWeb3Lib.ActionSheetButtonFont, b: OpenWeb3Lib.ActionSheetButtonFont) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ActionSheetButtonItem : OpenWeb3Lib.ActionSheetItem {
  final public let title: Swift.String
  final public let color: OpenWeb3Lib.ActionSheetButtonColor
  final public let font: OpenWeb3Lib.ActionSheetButtonFont
  final public let enabled: Swift.Bool
  final public let action: () -> Swift.Void
  public init(title: Swift.String, color: OpenWeb3Lib.ActionSheetButtonColor = .accent, font: OpenWeb3Lib.ActionSheetButtonFont = .default, enabled: Swift.Bool = true, action: @escaping () -> Swift.Void)
  public func node(theme: OpenWeb3Lib.ActionSheetControllerTheme) -> OpenWeb3Lib.ActionSheetItemNode
  public func updateNode(_ node: OpenWeb3Lib.ActionSheetItemNode)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ActionSheetButtonNode : OpenWeb3Lib.ActionSheetItemNode {
  override public init(theme: OpenWeb3Lib.ActionSheetControllerTheme)
  @objc override dynamic public func didLoad()
  override public func updateLayout(constrainedSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGSize
  @objc deinit
}
public func doesViewTreeDisableInteractiveTransitionGestureRecognizer(_ view: UIKit.UIView, keyboardOnly: Swift.Bool = false) -> Swift.Bool
public func getFirstResponderAndAccessoryHeight(_ view: UIKit.UIView, _ accessoryHeight: CoreFoundation.CGFloat? = nil) -> (UIKit.UIView?, CoreFoundation.CGFloat?)
@_hasMissingDesignatedInitializers final public class WindowHostView {
  final public let containerView: UIKit.UIView
  final public let eventView: UIKit.UIView
  final public let isRotating: () -> Swift.Bool
  final public let systemUserInterfaceStyle: OpenWeb3Lib.Signal<OpenWeb3Lib.WindowUserInterfaceStyle, OpenWeb3Lib.NoError>
  final public let currentInterfaceOrientation: () -> UIKit.UIInterfaceOrientation
  @objc deinit
}
public protocol WindowHost {
  func forEachController(_ f: (any OpenWeb3Lib.ContainableController) -> Swift.Void)
  func present(_ controller: any OpenWeb3Lib.ContainableController, on level: OpenWeb3Lib.PresentationSurfaceLevel, blockInteraction: Swift.Bool, completion: @escaping () -> Swift.Void)
  func presentInGlobalOverlay(_ controller: any OpenWeb3Lib.ContainableController)
  func addGlobalPortalHostView(sourceView: OpenWeb3Lib.PortalSourceView)
  func invalidateDeferScreenEdgeGestures()
  func invalidatePrefersOnScreenNavigationHidden()
  func invalidateSupportedOrientations()
  func cancelInteractiveKeyboardGestures()
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var windowHost: (any OpenWeb3Lib.WindowHost)? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class WindowKeyboardGestureRecognizerDelegate : ObjectiveC.NSObject, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
public class Window1 {
  final public let hostView: OpenWeb3Lib.WindowHostView
  final public let badgeView: UIKit.UIImageView
  final public let statusBarHost: (any OpenWeb3Lib.StatusBarHost)?
  public var forceInCallStatusBarText: Swift.String? {
    get
  }
  public var inCallNavigate: (() -> Swift.Void)?
  public var debugAction: (() -> Swift.Void)? {
    get
    set
  }
  final public let systemUserInterfaceStyle: OpenWeb3Lib.Signal<OpenWeb3Lib.WindowUserInterfaceStyle, OpenWeb3Lib.NoError>
  public func getContainedLayoutForWindowLayout() -> OpenWeb3Lib.ContainerViewLayout
  public init(hostView: OpenWeb3Lib.WindowHostView, statusBarHost: (any OpenWeb3Lib.StatusBarHost)?)
  required public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  public func setForceBadgeHidden(_ hidden: Swift.Bool)
  public func setProximityDimHidden(_ hidden: Swift.Bool)
  public func setForceInCallStatusBar(_ forceInCallStatusBarText: Swift.String?, transition: OpenWeb3Lib.ContainedViewLayoutTransition = .animated(duration: 0.3, curve: .easeInOut))
  public func invalidateDeferScreenEdgeGestures()
  public func invalidatePrefersOnScreenNavigationHidden()
  public func invalidateSupportedOrientations()
  public func cancelInteractiveKeyboardGestures()
  public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  public var viewController: (any OpenWeb3Lib.ContainableController)? {
    get
    set(value)
  }
  public var topLevelOverlayControllers: [any OpenWeb3Lib.ContainableController] {
    get
    set(value)
  }
  public var coveringView: OpenWeb3Lib.WindowCoveringView? {
    get
    set
  }
  public func addPostUpdateToInterfaceOrientationBlock(f: @escaping () -> Swift.Void)
  public func present(_ controller: any OpenWeb3Lib.ContainableController, on level: OpenWeb3Lib.PresentationSurfaceLevel, blockInteraction: Swift.Bool = false, completion: @escaping () -> Swift.Void = {})
  public func presentInGlobalOverlay(_ controller: any OpenWeb3Lib.ContainableController)
  public func addGlobalPortalHostView(sourceView: OpenWeb3Lib.PortalSourceView)
  public func presentNative(_ controller: UIKit.UIViewController)
  public func simulateKeyboardDismiss(transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  public func forEachViewController(_ f: (any OpenWeb3Lib.ContainableController) -> Swift.Bool, excludeNavigationSubControllers: Swift.Bool = false)
  public func doNotAnimateLikelyKeyboardAutocorrectionSwitch()
}
public class ActionSheetSwitchItem : OpenWeb3Lib.ActionSheetItem {
  final public let title: Swift.String
  final public let isOn: Swift.Bool
  final public let action: (Swift.Bool) -> Swift.Void
  public init(title: Swift.String, isOn: Swift.Bool, action: @escaping (Swift.Bool) -> Swift.Void)
  public func node(theme: OpenWeb3Lib.ActionSheetControllerTheme) -> OpenWeb3Lib.ActionSheetItemNode
  public func updateNode(_ node: OpenWeb3Lib.ActionSheetItemNode)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ActionSheetSwitchNode : OpenWeb3Lib.ActionSheetItemNode {
  override public init(theme: OpenWeb3Lib.ActionSheetControllerTheme)
  override public func updateLayout(constrainedSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGSize
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class NullActionClass : ObjectiveC.NSObject, QuartzCore.CAAction {
  @objc final public func run(forKey event: Swift.String, object anObject: Any, arguments dict: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init()
  @objc deinit
}
public let nullAction: OpenWeb3Lib.NullActionClass
@objc @_inheritsConvenienceInitializers open class SimpleLayer : QuartzCore.CALayer {
  public var didEnterHierarchy: (() -> Swift.Void)?
  public var didExitHierarchy: (() -> Swift.Void)?
  public var isInHierarchy: Swift.Bool {
    get
  }
  @objc override dynamic open func action(forKey event: Swift.String) -> (any QuartzCore.CAAction)?
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SimpleShapeLayer : QuartzCore.CAShapeLayer {
  public var didEnterHierarchy: (() -> Swift.Void)?
  public var didExitHierarchy: (() -> Swift.Void)?
  @objc override dynamic open func action(forKey event: Swift.String) -> (any QuartzCore.CAAction)?
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SimpleGradientLayer : QuartzCore.CAGradientLayer {
  public var didEnterHierarchy: (() -> Swift.Void)?
  public var didExitHierarchy: (() -> Swift.Void)?
  @objc override dynamic open func action(forKey event: Swift.String) -> (any QuartzCore.CAAction)?
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SimpleTransformLayer : QuartzCore.CATransformLayer {
  public var didEnterHierarchy: (() -> Swift.Void)?
  public var didExitHierarchy: (() -> Swift.Void)?
  public var isInHierarchy: Swift.Bool {
    get
  }
  @objc override dynamic open func action(forKey event: Swift.String) -> (any QuartzCore.CAAction)?
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension OpenWeb3Lib.PresentationFontSize {
  public init(systemFontSize: CoreFoundation.CGFloat)
}
extension OpenWeb3Lib.PresentationFontSize {
  public var baseDisplaySize: CoreFoundation.CGFloat {
    get
  }
}
extension OpenWeb3Lib.ToolbarTheme {
  convenience public init(rootControllerTheme: OpenWeb3Lib.PresentationTheme)
}
extension OpenWeb3Lib.NavigationBarTheme {
  convenience public init(resourceProvider: any OpenWeb3Lib.IResourceProvider, enableBackgroundBlur: Swift.Bool = true, hideBackground: Swift.Bool = false, hideBadge: Swift.Bool = false, hideSeparator: Swift.Bool = false)
}
extension OpenWeb3Lib.NavigationBarStrings {
  convenience public init(resourceProvider: any OpenWeb3Lib.IResourceProvider)
}
extension OpenWeb3Lib.NavigationBarPresentationData {
  convenience public init(presentationData: OpenWeb3Lib.PresentationData, resourceProvider: any OpenWeb3Lib.IResourceProvider)
}
extension OpenWeb3Lib.ActionSheetControllerTheme {
  convenience public init(resourceProvider: any OpenWeb3Lib.IResourceProvider, fontSize: OpenWeb3Lib.PresentationFontSize)
}
extension OpenWeb3Lib.ActionSheetController {
  @_Concurrency.MainActor @preconcurrency convenience public init(resourceProvider: any OpenWeb3Lib.IResourceProvider, allowInputInset: Swift.Bool = false)
}
extension OpenWeb3Lib.AlertControllerTheme {
  convenience public init(resourceProvider: any OpenWeb3Lib.IResourceProvider, fontSize: OpenWeb3Lib.PresentationFontSize)
}
extension OpenWeb3Lib.NavigationControllerTheme {
  convenience public init(resourceProvider: any OpenWeb3Lib.IResourceProvider)
}
public enum LegacyPresentedControllerPresentation {
  case custom
  case modal
  public static func == (a: OpenWeb3Lib.LegacyPresentedControllerPresentation, b: OpenWeb3Lib.LegacyPresentedControllerPresentation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class LegacyPresentedController : OpenWeb3Lib.ViewController {
  @_Concurrency.MainActor @preconcurrency public init(legacyController: UIKit.UIViewController, presentation: OpenWeb3Lib.LegacyPresentedControllerPresentation)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override open func loadDisplayNode()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency override open func dismiss(completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StatusBarSurface {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CallStatusBarNode : OpenWeb3LibPrivite.ASDisplayNode {
  open func update(size: CoreFoundation.CGSize)
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
@objc final public class StatusBar : OpenWeb3LibPrivite.ASDisplayNode {
  final public var statusBarStyle: OpenWeb3Lib.StatusBarStyle {
    get
    set(value)
  }
  final public func updateStatusBarStyle(_ statusBarStyle: OpenWeb3Lib.StatusBarStyle, animated: Swift.Bool)
  final public var ignoreInCall: Swift.Bool
  final public var verticalOffset: CoreFoundation.CGFloat {
    get
    set
  }
  final public func updateAlpha(_ alpha: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc override dynamic public init()
  @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
public func reduceLeft<T, E>(value: T, f: @escaping (T, T) -> T) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func reduceLeft<T, E>(value: T, f: @escaping (T, T, (T) -> Swift.Void) -> T) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public enum Passthrough<T> {
  case None
  case Some(T)
}
public func reduceLeft<T, E>(_ value: T, generator: @escaping (T, T) -> OpenWeb3Lib.Signal<(T, OpenWeb3Lib.Passthrough<T>), E>) -> (_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func matchMinimumSystemVersion(major: Swift.Int, minor: Swift.Int = 0) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class EditableTextNode : OpenWeb3LibPrivite.ASEditableTextNode {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var isRTL: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(textKitComponents: OpenWeb3LibPrivite.ASTextKitComponents, placeholderTextKitComponents: OpenWeb3LibPrivite.ASTextKitComponents)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
extension UIKit.UITextView {
  @_Concurrency.MainActor @preconcurrency public var numberOfLines: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isRTL: Swift.Bool {
    get
  }
}
public func childWindowHostView(parent: UIKit.UIView) -> OpenWeb3Lib.WindowHostView
@objc @_inheritsConvenienceInitializers open class AlertContentNode : OpenWeb3LibPrivite.ASDisplayNode {
  open var requestLayout: ((OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  open var dismissOnOutsideTap: Swift.Bool {
    get
  }
  open func updateLayout(size: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGSize
  open func updateTheme(_ theme: OpenWeb3Lib.AlertControllerTheme)
  open func performHighlightedAction()
  open func decreaseHighlightedIndex()
  open func increaseHighlightedIndex()
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
final public class AdaptedPostboxDecoder {
  final public class RawObjectData : Swift.Decodable {
    final public let data: Foundation.Data
    final public let typeHash: Swift.Int32
    public init(data: Foundation.Data, typeHash: Swift.Int32)
    public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public init()
  final public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  @objc deinit
}
public protocol PresentableController : AnyObject {
  func viewDidAppear(completion: @escaping () -> Swift.Void)
}
public protocol ContainableController : AnyObject {
  var view: UIKit.UIView! { get }
  var displayNode: OpenWeb3LibPrivite.ASDisplayNode { get }
  var isViewLoaded: Swift.Bool { get }
  var isOpaqueWhenInOverlay: Swift.Bool { get }
  var blocksBackgroundWhenInOverlay: Swift.Bool { get }
  var ready: OpenWeb3Lib.Promise<Swift.Bool> { get }
  var updateTransitionWhenPresentedAsModal: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)? { get set }
  func combinedSupportedOrientations(currentOrientationToLock: UIKit.UIInterfaceOrientationMask) -> OpenWeb3Lib.ViewControllerSupportedOrientations
  var deferScreenEdgeGestures: UIKit.UIRectEdge { get }
  var prefersOnScreenNavigationHidden: Swift.Bool { get }
  func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  func updateToInterfaceOrientation(_ orientation: UIKit.UIInterfaceOrientation)
  func preferredContentSizeForLayout(_ layout: OpenWeb3Lib.ContainerViewLayout) -> CoreFoundation.CGSize?
  func viewWillAppear(_ animated: Swift.Bool)
  func viewWillDisappear(_ animated: Swift.Bool)
  func viewDidAppear(_ animated: Swift.Bool)
  func viewDidDisappear(_ animated: Swift.Bool)
}
@objc @_Concurrency.MainActor @preconcurrency final public class ListViewReorderingGestureRecognizer : UIKit.UIGestureRecognizer {
  @_Concurrency.MainActor @preconcurrency public init(shouldBegin: @escaping (CoreFoundation.CGPoint) -> (allowed: Swift.Bool, requiresLongPress: Swift.Bool, itemNode: OpenWeb3Lib.ListViewItemNode?), willBegin: @escaping (CoreFoundation.CGPoint) -> Swift.Void, began: @escaping (OpenWeb3Lib.ListViewItemNode) -> Swift.Void, ended: @escaping () -> Swift.Void, moved: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override final public func reset()
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
}
final public class Weak<T> where T : AnyObject {
  final public var value: T? {
    get
  }
  public init(_ value: T)
  @objc deinit
}
final public class Bag<T> {
  public typealias Index = Swift.Int
  public init()
  final public func add(_ item: T) -> OpenWeb3Lib.Bag<T>.Index
  final public func get(_ index: OpenWeb3Lib.Bag<T>.Index) -> T?
  final public func remove(_ index: OpenWeb3Lib.Bag<T>.Index)
  final public func removeAll()
  final public func copyItems() -> [T]
  final public func copyItemsWithIndices() -> [(OpenWeb3Lib.Bag<T>.Index, T)]
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var first: (OpenWeb3Lib.Bag<T>.Index, T)? {
    get
  }
  @objc deinit
}
final public class SparseBag<T> : Swift.Sequence {
  public typealias Index = Swift.Int
  public init()
  final public func add(_ item: T) -> OpenWeb3Lib.SparseBag<T>.Index
  final public func get(_ index: OpenWeb3Lib.SparseBag<T>.Index) -> T?
  final public func remove(_ index: OpenWeb3Lib.SparseBag<T>.Index)
  final public func removeAll()
  final public var isEmpty: Swift.Bool {
    get
  }
  final public func makeIterator() -> Swift.AnyIterator<T>
  public typealias Element = T
  public typealias Iterator = Swift.AnyIterator<T>
  @objc deinit
}
final public class CounterBag {
  public init()
  final public func add() -> Swift.Int
  final public func remove(_ index: Swift.Int)
  final public var isEmpty: Swift.Bool {
    get
  }
  @objc deinit
}
public struct DiscontiguousSlice<Base> where Base : Swift.Collection {
  public var base: Base
  public var subranges: OpenWeb3Lib.RangeSet<Base.Index>
}
extension OpenWeb3Lib.DiscontiguousSlice {
  public struct Index : Swift.Comparable {
    public var base: Base.Index
    public static func < (lhs: OpenWeb3Lib.DiscontiguousSlice<Base>.Index, rhs: OpenWeb3Lib.DiscontiguousSlice<Base>.Index) -> Swift.Bool
    public static func == (a: OpenWeb3Lib.DiscontiguousSlice<Base>.Index, b: OpenWeb3Lib.DiscontiguousSlice<Base>.Index) -> Swift.Bool
  }
}
extension OpenWeb3Lib.DiscontiguousSlice.Index : Swift.Hashable where Base.Index : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OpenWeb3Lib.DiscontiguousSlice : Swift.Collection {
  public typealias SubSequence = OpenWeb3Lib.DiscontiguousSlice<Base>
  public var startIndex: OpenWeb3Lib.DiscontiguousSlice<Base>.Index {
    get
  }
  public var endIndex: OpenWeb3Lib.DiscontiguousSlice<Base>.Index {
    get
  }
  public func index(after i: OpenWeb3Lib.DiscontiguousSlice<Base>.Index) -> OpenWeb3Lib.DiscontiguousSlice<Base>.Index
  public subscript(i: OpenWeb3Lib.DiscontiguousSlice<Base>.Index) -> Base.Element {
    get
  }
  public subscript(bounds: Swift.Range<OpenWeb3Lib.DiscontiguousSlice<Base>.Index>) -> OpenWeb3Lib.DiscontiguousSlice<Base> {
    get
  }
  public typealias Element = Base.Element
  public typealias Indices = Swift.DefaultIndices<OpenWeb3Lib.DiscontiguousSlice<Base>>
  public typealias Iterator = Swift.IndexingIterator<OpenWeb3Lib.DiscontiguousSlice<Base>>
}
extension OpenWeb3Lib.DiscontiguousSlice {
  public var count: Swift.Int {
    get
  }
  public __consuming func _copyToContiguousArray() -> Swift.ContiguousArray<Base.Element>
}
extension OpenWeb3Lib.DiscontiguousSlice : Swift.BidirectionalCollection where Base : Swift.BidirectionalCollection {
  public func index(before i: OpenWeb3Lib.DiscontiguousSlice<Base>.Index) -> OpenWeb3Lib.DiscontiguousSlice<Base>.Index
}
extension OpenWeb3Lib.DiscontiguousSlice : Swift.MutableCollection where Base : Swift.MutableCollection {
  public subscript(i: OpenWeb3Lib.DiscontiguousSlice<Base>.Index) -> Base.Element {
    get
    set
  }
  public subscript(bounds: Swift.Range<OpenWeb3Lib.DiscontiguousSlice<Base>.Index>) -> OpenWeb3Lib.DiscontiguousSlice<Base> {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class GridItemNode : OpenWeb3LibPrivite.ASDisplayNode {
  open var isVisibleInGrid: Swift.Bool
  open var isGridScrolling: Swift.Bool
  @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set(value)
  }
  open func updateLayout(item: any OpenWeb3Lib.GridItem, size: CoreFoundation.CGSize, isVisible: Swift.Bool, synchronousLoads: Swift.Bool)
  open func updateAbsoluteRect(_ absoluteRect: CoreFoundation.CGRect, within containerSize: CoreFoundation.CGSize)
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
public enum TelegramBaseTheme : Swift.Int32, Swift.Codable {
  case classic
  case day
  case night
  case tinted
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
extension Swift.UInt32 {
  public init(bitPattern: Swift.UInt32)
}
final public class TelegramThemeSettings : Swift.Codable, Swift.Equatable {
  public static func == (lhs: OpenWeb3Lib.TelegramThemeSettings, rhs: OpenWeb3Lib.TelegramThemeSettings) -> Swift.Bool
  final public let baseTheme: OpenWeb3Lib.TelegramBaseTheme
  final public let accentColor: Swift.UInt32
  final public let outgoingAccentColor: Swift.UInt32?
  final public let messageColors: [Swift.UInt32]
  final public let animateMessageColors: Swift.Bool
  public init(baseTheme: OpenWeb3Lib.TelegramBaseTheme, accentColor: Swift.UInt32, outgoingAccentColor: Swift.UInt32?, messageColors: [Swift.UInt32], animateMessageColors: Swift.Bool)
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public struct TelegramThemeNativeCodable : Swift.Codable {
  public let value: OpenWeb3Lib.TelegramTheme
  public init(_ value: OpenWeb3Lib.TelegramTheme)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
final public class TelegramTheme : Swift.Equatable {
  final public let id: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let slug: Swift.String
  final public let emoticon: Swift.String?
  final public let title: Swift.String
  final public let settings: [OpenWeb3Lib.TelegramThemeSettings]?
  final public let isCreator: Swift.Bool
  final public let isDefault: Swift.Bool
  final public let installCount: Swift.Int32?
  public init(id: Swift.Int64, accessHash: Swift.Int64, slug: Swift.String, emoticon: Swift.String?, title: Swift.String, settings: [OpenWeb3Lib.TelegramThemeSettings]?, isCreator: Swift.Bool, isDefault: Swift.Bool, installCount: Swift.Int32?)
  public static func == (lhs: OpenWeb3Lib.TelegramTheme, rhs: OpenWeb3Lib.TelegramTheme) -> Swift.Bool
  @objc deinit
}
public protocol BotService {
  func load() -> Swift.Bool
  func unload()
  func getBotInfo(botId: Swift.String) async -> Swift.Result<OpenWeb3Lib.BotInfo, OpenWeb3Lib.ApiError>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ListViewTapGestureRecognizer : UIKit.UITapGestureRecognizer {
  @_Concurrency.MainActor @preconcurrency final public func cancel()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
public let defaultDarkPresentationTheme: OpenWeb3Lib.PresentationTheme
public let defaultDarkColorPresentationTheme: OpenWeb3Lib.PresentationTheme
public func customizeDefaultDarkPresentationTheme(theme: OpenWeb3Lib.PresentationTheme, editing: Swift.Bool, title: Swift.String?, accentColor: UIKit.UIColor?, backgroundColors: [Swift.UInt32], bubbleColors: [Swift.UInt32], animateBubbleColors: Swift.Bool?, baseColor: OpenWeb3Lib.PresentationThemeBaseColor? = nil) -> OpenWeb3Lib.PresentationTheme
public let defaultDarkWallpaperGradientColors: [UIKit.UIColor]
public func makeDefaultDarkPresentationTheme(extendingThemeReference: OpenWeb3Lib.PresentationThemeReference? = nil, preview: Swift.Bool) -> OpenWeb3Lib.PresentationTheme
public enum TabBarItemSwipeDirection {
  case left
  case right
  public static func == (a: OpenWeb3Lib.TabBarItemSwipeDirection, b: OpenWeb3Lib.TabBarItemSwipeDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TabBarController : OpenWeb3Lib.ViewController {
  var currentController: OpenWeb3Lib.ViewController? { get }
  var controllers: [OpenWeb3Lib.ViewController] { get }
  var selectedIndex: Swift.Int { get set }
  var cameraItemAndAction: (item: UIKit.UITabBarItem, action: () -> Swift.Void)? { get set }
  func setControllers(_ controllers: [OpenWeb3Lib.ViewController], selectedIndex: Swift.Int?)
  func updateBackgroundAlpha(_ alpha: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  func viewForCameraItem() -> UIKit.UIView?
  func frameForControllerTab(controller: OpenWeb3Lib.ViewController) -> CoreFoundation.CGRect?
  func isPointInsideContentArea(point: CoreFoundation.CGPoint) -> Swift.Bool
  func sourceNodesForController(at index: Swift.Int) -> [OpenWeb3LibPrivite.ASDisplayNode]?
  func updateIsTabBarEnabled(_ value: Swift.Bool, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  func updateIsTabBarHidden(_ value: Swift.Bool, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  func updateLayout(transition: OpenWeb3Lib.ContainedViewLayoutTransition)
}
final public class CodableEntry : Swift.Equatable {
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  public init?<T>(_ value: T) where T : Swift.Encodable
  public init(legacyValue: any OpenWeb3Lib.PostboxCoding)
  final public func get<T>(_ type: T.Type) -> T? where T : Swift.Decodable
  final public func getLegacy<T>(_ type: T.Type) -> T? where T : OpenWeb3Lib.PostboxCoding
  final public func getLegacy() -> (any OpenWeb3Lib.PostboxCoding)?
  public static func == (lhs: OpenWeb3Lib.CodableEntry, rhs: OpenWeb3Lib.CodableEntry) -> Swift.Bool
  @objc deinit
}
final public class PreferencesEntry : Swift.Equatable {
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  public init?<T>(_ value: T?) where T : Swift.Encodable
  final public func get<T>(_ type: T.Type) -> T? where T : Swift.Decodable
  public static func == (lhs: OpenWeb3Lib.PreferencesEntry, rhs: OpenWeb3Lib.PreferencesEntry) -> Swift.Bool
  @objc deinit
}
extension OpenWeb3Lib.PreferencesEntry {
  final public var relatedResources: [OpenWeb3Lib.MediaResourceId] {
    get
  }
}
@objc open class ASButtonNode : OpenWeb3LibPrivite.ASControlNode {
  final public let titleNode: OpenWeb3Lib.ImmediateTextNode
  final public let highlightedTitleNode: OpenWeb3Lib.ImmediateTextNode
  final public let disabledTitleNode: OpenWeb3Lib.ImmediateTextNode
  final public let imageNode: OpenWeb3Lib.ASImageNode
  final public let highlightedImageNode: OpenWeb3Lib.ASImageNode
  final public let selectedImageNode: OpenWeb3Lib.ASImageNode
  final public let highlightedSelectedImageNode: OpenWeb3Lib.ASImageNode
  final public let disabledImageNode: OpenWeb3Lib.ASImageNode
  final public let backgroundImageNode: OpenWeb3Lib.ASImageNode
  final public let highlightedBackgroundImageNode: OpenWeb3Lib.ASImageNode
  public var contentEdgeInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  public var contentHorizontalAlignment: OpenWeb3LibPrivite.ASHorizontalAlignment {
    get
    set
  }
  public var laysOutHorizontally: Swift.Bool {
    get
    set
  }
  public var contentSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic open func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  open func setAttributedTitle(_ title: Foundation.NSAttributedString, for state: UIKit.UIControl.State)
  open func attributedTitle(for state: UIKit.UIControl.State) -> Foundation.NSAttributedString?
  open func setTitle(_ title: Swift.String, with font: UIKit.UIFont, with color: UIKit.UIColor, for state: UIKit.UIControl.State)
  open func setImage(_ image: UIKit.UIImage?, for state: UIKit.UIControl.State)
  open func setBackgroundImage(_ image: UIKit.UIImage?, for state: UIKit.UIControl.State)
  open func image(for state: UIKit.UIControl.State) -> UIKit.UIImage?
  open func backgroundImage(for state: UIKit.UIControl.State) -> UIKit.UIImage?
  @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  open var isImplicitlyDisabled: Swift.Bool {
    get
    set
  }
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func layout()
  @objc deinit
}
public func addCorners(_ context: OpenWeb3Lib.DrawingContext, arguments: OpenWeb3Lib.TransformImageArguments)
public enum ActionSheetControllerThemeBackgroundType {
  case light
  case dark
  public static func == (a: OpenWeb3Lib.ActionSheetControllerThemeBackgroundType, b: OpenWeb3Lib.ActionSheetControllerThemeBackgroundType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class ActionSheetControllerTheme : Swift.Equatable {
  final public let dimColor: UIKit.UIColor
  final public let backgroundType: OpenWeb3Lib.ActionSheetControllerThemeBackgroundType
  final public let itemBackgroundColor: UIKit.UIColor
  final public let itemHighlightedBackgroundColor: UIKit.UIColor
  final public let standardActionTextColor: UIKit.UIColor
  final public let destructiveActionTextColor: UIKit.UIColor
  final public let disabledActionTextColor: UIKit.UIColor
  final public let primaryTextColor: UIKit.UIColor
  final public let secondaryTextColor: UIKit.UIColor
  final public let controlAccentColor: UIKit.UIColor
  final public let controlColor: UIKit.UIColor
  final public let switchFrameColor: UIKit.UIColor
  final public let switchContentColor: UIKit.UIColor
  final public let switchHandleColor: UIKit.UIColor
  final public let baseFontSize: CoreFoundation.CGFloat
  public init(dimColor: UIKit.UIColor, backgroundType: OpenWeb3Lib.ActionSheetControllerThemeBackgroundType, itemBackgroundColor: UIKit.UIColor, itemHighlightedBackgroundColor: UIKit.UIColor, standardActionTextColor: UIKit.UIColor, destructiveActionTextColor: UIKit.UIColor, disabledActionTextColor: UIKit.UIColor, primaryTextColor: UIKit.UIColor, secondaryTextColor: UIKit.UIColor, controlAccentColor: UIKit.UIColor, controlColor: UIKit.UIColor, switchFrameColor: UIKit.UIColor, switchContentColor: UIKit.UIColor, switchHandleColor: UIKit.UIColor, baseFontSize: CoreFoundation.CGFloat)
  public static func == (lhs: OpenWeb3Lib.ActionSheetControllerTheme, rhs: OpenWeb3Lib.ActionSheetControllerTheme) -> Swift.Bool
  @objc deinit
}
public struct TransformImageNodeContentAnimations : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let firstUpdate: OpenWeb3Lib.TransformImageNodeContentAnimations
  public static let subsequentUpdates: OpenWeb3Lib.TransformImageNodeContentAnimations
  public typealias ArrayLiteralElement = OpenWeb3Lib.TransformImageNodeContentAnimations
  public typealias Element = OpenWeb3Lib.TransformImageNodeContentAnimations
  public typealias RawValue = Swift.Int32
}
@objc @_inheritsConvenienceInitializers open class TransformImageNode : OpenWeb3LibPrivite.ASDisplayNode {
  public var imageUpdated: ((UIKit.UIImage?) -> Swift.Void)?
  public var contentAnimations: OpenWeb3Lib.TransformImageNodeContentAnimations
  public var currentArguments: OpenWeb3Lib.TransformImageArguments? {
    get
  }
  public var image: UIKit.UIImage? {
    get
  }
  public var captureProtected: Swift.Bool {
    get
    set
  }
  @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic open func didLoad()
  public func reset()
  public func setSignal(_ signal: OpenWeb3Lib.Signal<(OpenWeb3Lib.TransformImageArguments) -> OpenWeb3Lib.DrawingContext?, OpenWeb3Lib.NoError>, attemptSynchronously: Swift.Bool = false, dispatchOnDisplayLink: Swift.Bool = true)
  public func asyncLayout() -> (OpenWeb3Lib.TransformImageArguments) -> (() -> Swift.Void)
  public class func asyncLayout(_ maybeNode: OpenWeb3Lib.TransformImageNode?) -> (OpenWeb3Lib.TransformImageArguments) -> (() -> OpenWeb3Lib.TransformImageNode)
  public func setOverlayColor(_ color: UIKit.UIColor?, animated: Swift.Bool)
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class TransformImageView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var imageUpdated: ((UIKit.UIImage?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var contentAnimations: OpenWeb3Lib.TransformImageNodeContentAnimations
  @_Concurrency.MainActor @preconcurrency public var image: UIKit.UIImage? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var captureProtected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func reset()
  @_Concurrency.MainActor @preconcurrency public func setSignal(_ signal: OpenWeb3Lib.Signal<(OpenWeb3Lib.TransformImageArguments) -> OpenWeb3Lib.DrawingContext?, OpenWeb3Lib.NoError>, attemptSynchronously: Swift.Bool = false, dispatchOnDisplayLink: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func asyncLayout() -> (OpenWeb3Lib.TransformImageArguments) -> (() -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOverlayColor(_ color: UIKit.UIColor?, animated: Swift.Bool)
}
public enum ListViewCenterScrollPositionOverflow : Swift.Equatable {
  case top
  case bottom
  case custom((OpenWeb3Lib.ListViewItemNode) -> CoreFoundation.CGFloat)
  public static func == (lhs: OpenWeb3Lib.ListViewCenterScrollPositionOverflow, rhs: OpenWeb3Lib.ListViewCenterScrollPositionOverflow) -> Swift.Bool
}
public enum ListViewScrollPosition : Swift.Equatable {
  case top(CoreFoundation.CGFloat)
  case bottom(CoreFoundation.CGFloat)
  case center(OpenWeb3Lib.ListViewCenterScrollPositionOverflow)
  case visible
  public static func == (a: OpenWeb3Lib.ListViewScrollPosition, b: OpenWeb3Lib.ListViewScrollPosition) -> Swift.Bool
}
public enum ListViewScrollToItemDirectionHint {
  case Up
  case Down
  public static func == (a: OpenWeb3Lib.ListViewScrollToItemDirectionHint, b: OpenWeb3Lib.ListViewScrollToItemDirectionHint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ListViewAnimationCurve {
  case Spring(duration: Swift.Double)
  case Default(duration: Swift.Double?)
  case Custom(duration: Swift.Double, Swift.Float, Swift.Float, Swift.Float, Swift.Float)
}
public struct ListViewScrollToItem {
  public let index: Swift.Int
  public let position: OpenWeb3Lib.ListViewScrollPosition
  public let animated: Swift.Bool
  public let curve: OpenWeb3Lib.ListViewAnimationCurve
  public let directionHint: OpenWeb3Lib.ListViewScrollToItemDirectionHint
  public let displayLink: Swift.Bool
  public init(index: Swift.Int, position: OpenWeb3Lib.ListViewScrollPosition, animated: Swift.Bool, curve: OpenWeb3Lib.ListViewAnimationCurve, directionHint: OpenWeb3Lib.ListViewScrollToItemDirectionHint, displayLink: Swift.Bool = false)
}
public enum ListViewItemOperationDirectionHint {
  case Up
  case Down
  public static func == (a: OpenWeb3Lib.ListViewItemOperationDirectionHint, b: OpenWeb3Lib.ListViewItemOperationDirectionHint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ListViewDeleteItem {
  public let index: Swift.Int
  public let directionHint: OpenWeb3Lib.ListViewItemOperationDirectionHint?
  public init(index: Swift.Int, directionHint: OpenWeb3Lib.ListViewItemOperationDirectionHint?)
}
public struct ListViewInsertItem {
  public let index: Swift.Int
  public let previousIndex: Swift.Int?
  public let item: any OpenWeb3Lib.ListViewItem
  public let directionHint: OpenWeb3Lib.ListViewItemOperationDirectionHint?
  public let forceAnimateInsertion: Swift.Bool
  public init(index: Swift.Int, previousIndex: Swift.Int?, item: any OpenWeb3Lib.ListViewItem, directionHint: OpenWeb3Lib.ListViewItemOperationDirectionHint?, forceAnimateInsertion: Swift.Bool = false)
}
public struct ListViewUpdateItem {
  public let index: Swift.Int
  public let previousIndex: Swift.Int
  public let item: any OpenWeb3Lib.ListViewItem
  public let directionHint: OpenWeb3Lib.ListViewItemOperationDirectionHint?
  public init(index: Swift.Int, previousIndex: Swift.Int, item: any OpenWeb3Lib.ListViewItem, directionHint: OpenWeb3Lib.ListViewItemOperationDirectionHint?)
}
public struct ListViewDeleteAndInsertOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let AnimateInsertion: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let AnimateAlpha: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let LowLatency: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let Synchronous: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let RequestItemInsertionAnimations: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let AnimateTopItemPosition: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let PreferSynchronousDrawing: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let PreferSynchronousResourceLoading: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let AnimateCrossfade: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let ForceUpdate: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let AnimateFullTransition: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public static let InvertOffsetDirection: OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public typealias ArrayLiteralElement = OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public typealias Element = OpenWeb3Lib.ListViewDeleteAndInsertOptions
  public typealias RawValue = Swift.Int
}
public struct ListViewUpdateSizeAndInsets {
  public var size: CoreFoundation.CGSize
  public var insets: UIKit.UIEdgeInsets
  public var headerInsets: UIKit.UIEdgeInsets?
  public var scrollIndicatorInsets: UIKit.UIEdgeInsets?
  public var duration: Swift.Double
  public var curve: OpenWeb3Lib.ListViewAnimationCurve
  public var ensureTopInsetForOverlayHighlightedItems: CoreFoundation.CGFloat?
  public init(size: CoreFoundation.CGSize, insets: UIKit.UIEdgeInsets, headerInsets: UIKit.UIEdgeInsets? = nil, scrollIndicatorInsets: UIKit.UIEdgeInsets? = nil, duration: Swift.Double, curve: OpenWeb3Lib.ListViewAnimationCurve, ensureTopInsetForOverlayHighlightedItems: CoreFoundation.CGFloat? = nil)
}
public struct ListViewItemRange : Swift.Equatable {
  public let firstIndex: Swift.Int
  public let lastIndex: Swift.Int
  public static func == (a: OpenWeb3Lib.ListViewItemRange, b: OpenWeb3Lib.ListViewItemRange) -> Swift.Bool
}
public struct ListViewVisibleItemRange : Swift.Equatable {
  public let firstIndex: Swift.Int
  public let firstIndexFullyVisible: Swift.Bool
  public let lastIndex: Swift.Int
  public static func == (a: OpenWeb3Lib.ListViewVisibleItemRange, b: OpenWeb3Lib.ListViewVisibleItemRange) -> Swift.Bool
}
public struct ListViewDisplayedItemRange : Swift.Equatable {
  public let loadedRange: OpenWeb3Lib.ListViewItemRange?
  public let visibleRange: OpenWeb3Lib.ListViewVisibleItemRange?
  public static func == (a: OpenWeb3Lib.ListViewDisplayedItemRange, b: OpenWeb3Lib.ListViewDisplayedItemRange) -> Swift.Bool
}
public func decodeTinyThumbnail(data: Foundation.Data) -> Foundation.Data?
public protocol CustomNavigationTransitionNode : OpenWeb3LibPrivite.ASDisplayNode {
  func setup(topNavigationBar: OpenWeb3Lib.NavigationBar, bottomNavigationBar: OpenWeb3Lib.NavigationBar)
  func update(containerSize: CoreFoundation.CGSize, fraction: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  func restore()
}
final public class AlertControllerContext {
  final public let theme: OpenWeb3Lib.AlertControllerTheme
  public init(theme: OpenWeb3Lib.AlertControllerTheme)
  @objc deinit
}
public func textAlertController(alertContext: OpenWeb3Lib.AlertControllerContext, title: Swift.String?, text: Swift.String, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, allowInputInset: Swift.Bool = true, parseMarkdown: Swift.Bool = false, dismissOnOutsideTap: Swift.Bool = true) -> OpenWeb3Lib.AlertController
public func richTextAlertController(alertContext: OpenWeb3Lib.AlertControllerContext, title: Foundation.NSAttributedString?, text: Foundation.NSAttributedString, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, allowInputInset: Swift.Bool = true, dismissAutomatically: Swift.Bool = true) -> OpenWeb3Lib.AlertController
@objc @_inheritsConvenienceInitializers final public class PassthroughContainerNode : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
public func addAccessibilityChildren(of node: OpenWeb3LibPrivite.ASDisplayNode, container: Any, to list: inout [Any])
public func smartInvertColorsEnabled() -> Swift.Bool
public func isReduceMotionEnabled() -> OpenWeb3Lib.Signal<Swift.Bool, OpenWeb3Lib.NoError>
public func isSpeakSelectionEnabled() -> Swift.Bool
public func isSpeakSelectionEnabledSignal() -> OpenWeb3Lib.Signal<Swift.Bool, OpenWeb3Lib.NoError>
public func isBoldTextEnabled() -> OpenWeb3Lib.Signal<Swift.Bool, OpenWeb3Lib.NoError>
public func isReduceTransparencyEnabled() -> Swift.Bool
extension OpenWeb3Lib.Gesture {
  public static func tap(_ action: @escaping () -> Swift.Void) -> OpenWeb3Lib.Gesture
}
final public class Promise<T> {
  final public var onDeinit: (() -> Swift.Void)?
  public init(initializeOnFirstAccess: OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>?)
  public init(_ value: T)
  public init()
  @objc deinit
  final public func set(_ signal: OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>)
  final public func get() -> OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>
}
final public class ValuePromise<T> where T : Swift.Equatable {
  final public let ignoreRepeated: Swift.Bool
  public init(_ value: T, ignoreRepeated: Swift.Bool = false)
  public init(ignoreRepeated: Swift.Bool = false)
  @objc deinit
  final public func set(_ value: T)
  final public func get() -> OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>
}
public enum LocalAuthBiometricAuthentication {
  case touchId
  case faceId
  public static func == (a: OpenWeb3Lib.LocalAuthBiometricAuthentication, b: OpenWeb3Lib.LocalAuthBiometricAuthentication) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LocalAuth {
  public enum DecryptionResult {
    public enum Error {
      case cancelled
      case generic
      public static func == (a: OpenWeb3Lib.LocalAuth.DecryptionResult.Error, b: OpenWeb3Lib.LocalAuth.DecryptionResult.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case result(Foundation.Data)
    case error(OpenWeb3Lib.LocalAuth.DecryptionResult.Error)
  }
  @_hasMissingDesignatedInitializers final public class PrivateKey {
    final public let publicKeyRepresentation: Foundation.Data
    final public func encrypt(data: Foundation.Data) -> Foundation.Data?
    final public func decrypt(data: Foundation.Data) -> OpenWeb3Lib.LocalAuth.DecryptionResult
    @objc deinit
  }
  public static var biometricAuthentication: OpenWeb3Lib.LocalAuthBiometricAuthentication? {
    get
  }
  public static let evaluatedPolicyDomainState: Foundation.Data?
  public static func auth(reason: Swift.String) -> OpenWeb3Lib.Signal<(Swift.Bool, Foundation.Data?), OpenWeb3Lib.NoError>
  public static func getOrCreatePrivateKey(baseAppBundleId: Swift.String, keyId: Foundation.Data) -> OpenWeb3Lib.LocalAuth.PrivateKey?
  public static func removePrivateKey(baseAppBundleId: Swift.String, keyId: Foundation.Data) -> Swift.Bool
}
public struct BotBiometricsState : Swift.Codable, Swift.Equatable {
  public struct OpaqueToken : Swift.Codable, Swift.Equatable {
    public let publicKey: Foundation.Data
    public let data: Foundation.Data
    public init(publicKey: Foundation.Data, data: Foundation.Data)
    public static func == (a: OpenWeb3Lib.BotBiometricsState.OpaqueToken, b: OpenWeb3Lib.BotBiometricsState.OpaqueToken) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var deviceId: Foundation.Data
  public var accessRequested: Swift.Bool
  public var accessGranted: Swift.Bool
  public var opaqueToken: OpenWeb3Lib.BotBiometricsState.OpaqueToken?
  public static func create() -> OpenWeb3Lib.BotBiometricsState
  public init(deviceId: Foundation.Data, accessRequested: Swift.Bool, accessGranted: Swift.Bool, opaqueToken: OpenWeb3Lib.BotBiometricsState.OpaqueToken?)
  public static func == (a: OpenWeb3Lib.BotBiometricsState, b: OpenWeb3Lib.BotBiometricsState) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ValueBoxKeyType : Swift.Int32 {
  case binary
  case int64
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct ValueBoxTable {
  public init(id: Swift.Int32, keyType: OpenWeb3Lib.ValueBoxKeyType, compactValuesOnCreation: Swift.Bool)
}
public struct ValueBoxFullTextTable {
}
public struct ValueBoxEncryptionParameters {
  public struct Key {
    public let data: Foundation.Data
    public init?(data: Foundation.Data)
  }
  public struct Salt {
    public let data: Foundation.Data
    public init?(data: Foundation.Data)
  }
  public let forceEncryptionIfNoSet: Swift.Bool
  public let key: OpenWeb3Lib.ValueBoxEncryptionParameters.Key
  public let salt: OpenWeb3Lib.ValueBoxEncryptionParameters.Salt
  public init(forceEncryptionIfNoSet: Swift.Bool, key: OpenWeb3Lib.ValueBoxEncryptionParameters.Key, salt: OpenWeb3Lib.ValueBoxEncryptionParameters.Salt)
}
public enum ValueBoxFilterResult {
  case accept
  case skip
  case stop
  public static func == (a: OpenWeb3Lib.ValueBoxFilterResult, b: OpenWeb3Lib.ValueBoxFilterResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ValueBox {
  func begin()
  func commit()
  func checkpoint()
  func beginStats()
  func endStats()
  func range(_ table: OpenWeb3Lib.ValueBoxTable, start: OpenWeb3Lib.ValueBoxKey, end: OpenWeb3Lib.ValueBoxKey, values: (OpenWeb3Lib.ValueBoxKey, OpenWeb3Lib.ReadBuffer) -> Swift.Bool, limit: Swift.Int)
  func filteredRange(_ table: OpenWeb3Lib.ValueBoxTable, start: OpenWeb3Lib.ValueBoxKey, end: OpenWeb3Lib.ValueBoxKey, values: (OpenWeb3Lib.ValueBoxKey, OpenWeb3Lib.ReadBuffer) -> OpenWeb3Lib.ValueBoxFilterResult, limit: Swift.Int)
  func filteredRange(_ table: OpenWeb3Lib.ValueBoxTable, start: OpenWeb3Lib.ValueBoxKey, end: OpenWeb3Lib.ValueBoxKey, keys: (OpenWeb3Lib.ValueBoxKey) -> OpenWeb3Lib.ValueBoxFilterResult, limit: Swift.Int)
  func range(_ table: OpenWeb3Lib.ValueBoxTable, start: OpenWeb3Lib.ValueBoxKey, end: OpenWeb3Lib.ValueBoxKey, keys: (OpenWeb3Lib.ValueBoxKey) -> Swift.Bool, limit: Swift.Int)
  func scan(_ table: OpenWeb3Lib.ValueBoxTable, values: (OpenWeb3Lib.ValueBoxKey, OpenWeb3Lib.ReadBuffer) -> Swift.Bool)
  func scan(_ table: OpenWeb3Lib.ValueBoxTable, keys: (OpenWeb3Lib.ValueBoxKey) -> Swift.Bool)
  func scanInt64(_ table: OpenWeb3Lib.ValueBoxTable, values: (Swift.Int64, OpenWeb3Lib.ReadBuffer) -> Swift.Bool)
  func scanInt64(_ table: OpenWeb3Lib.ValueBoxTable, keys: (Swift.Int64) -> Swift.Bool)
  func get(_ table: OpenWeb3Lib.ValueBoxTable, key: OpenWeb3Lib.ValueBoxKey) -> OpenWeb3Lib.ReadBuffer?
  func read(_ table: OpenWeb3Lib.ValueBoxTable, key: OpenWeb3Lib.ValueBoxKey, _ process: (Swift.Int, (Swift.UnsafeMutableRawPointer, Swift.Int, Swift.Int) -> Swift.Void) -> Swift.Void)
  func readWrite(_ table: OpenWeb3Lib.ValueBoxTable, key: OpenWeb3Lib.ValueBoxKey, _ process: (Swift.Int, (Swift.UnsafeMutableRawPointer, Swift.Int, Swift.Int) -> Swift.Void, (Swift.UnsafeRawPointer, Swift.Int, Swift.Int) -> Swift.Void) -> Swift.Void)
  func exists(_ table: OpenWeb3Lib.ValueBoxTable, key: OpenWeb3Lib.ValueBoxKey) -> Swift.Bool
  func set(_ table: OpenWeb3Lib.ValueBoxTable, key: OpenWeb3Lib.ValueBoxKey, value: OpenWeb3Lib.MemoryBuffer)
  func remove(_ table: OpenWeb3Lib.ValueBoxTable, key: OpenWeb3Lib.ValueBoxKey, secure: Swift.Bool)
  func move(_ table: OpenWeb3Lib.ValueBoxTable, from previousKey: OpenWeb3Lib.ValueBoxKey, to updatedKey: OpenWeb3Lib.ValueBoxKey)
  func copy(fromTable: OpenWeb3Lib.ValueBoxTable, fromKey: OpenWeb3Lib.ValueBoxKey, toTable: OpenWeb3Lib.ValueBoxTable, toKey: OpenWeb3Lib.ValueBoxKey)
  func removeRange(_ table: OpenWeb3Lib.ValueBoxTable, start: OpenWeb3Lib.ValueBoxKey, end: OpenWeb3Lib.ValueBoxKey)
  func fullTextSet(_ table: OpenWeb3Lib.ValueBoxFullTextTable, collectionId: Swift.String, itemId: Swift.String, contents: Swift.String, tags: Swift.String)
  func fullTextMatch(_ table: OpenWeb3Lib.ValueBoxFullTextTable, collectionId: Swift.String?, query: Swift.String, tags: Swift.String?, values: (Swift.String, Swift.String) -> Swift.Bool)
  func fullTextRemove(_ table: OpenWeb3Lib.ValueBoxFullTextTable, itemId: Swift.String, secure: Swift.Bool)
  func removeAllFromTable(_ table: OpenWeb3Lib.ValueBoxTable)
  func removeTable(_ table: OpenWeb3Lib.ValueBoxTable)
  func renameTable(_ table: OpenWeb3Lib.ValueBoxTable, to toTable: OpenWeb3Lib.ValueBoxTable)
  func drop()
  func count(_ table: OpenWeb3Lib.ValueBoxTable, start: OpenWeb3Lib.ValueBoxKey, end: OpenWeb3Lib.ValueBoxKey) -> Swift.Int
  func count(_ table: OpenWeb3Lib.ValueBoxTable) -> Swift.Int
  func exportEncrypted(to exportBasePath: Swift.String, encryptionParameters: OpenWeb3Lib.ValueBoxEncryptionParameters)
}
public protocol ListViewAccessoryItem {
  func isEqualToItem(_ other: any OpenWeb3Lib.ListViewAccessoryItem) -> Swift.Bool
  func node(synchronous: Swift.Bool) -> OpenWeb3Lib.ListViewAccessoryItemNode
}
public enum AttachmentButtonType : Swift.Equatable {
  case gallery
  case file
  case location
  case quickReply
  case contact
  case poll
  case gift
  case standalone
  public static func == (lhs: OpenWeb3Lib.AttachmentButtonType, rhs: OpenWeb3Lib.AttachmentButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AttachmentContainable : OpenWeb3Lib.ViewController {
  var requestFullScreen: (Swift.Bool) -> Swift.Void { get set }
  var requestAttachmentMenuExpansion: () -> Swift.Void { get set }
  var updateNavigationStack: (@escaping ([any OpenWeb3Lib.AttachmentContainable]) -> ([any OpenWeb3Lib.AttachmentContainable], (any OpenWeb3Lib.AttachmentMediaPickerContext)?)) -> Swift.Void { get set }
  var parentController: () -> OpenWeb3Lib.ViewController? { get set }
  var updateTabBarAlpha: (CoreFoundation.CGFloat, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void { get set }
  var updateTabBarVisibility: (Swift.Bool, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void { get set }
  var cancelPanGesture: () -> Swift.Void { get set }
  var isContainerPanning: () -> Swift.Bool { get set }
  var isContainerExpanded: () -> Swift.Bool { get set }
  var isPanGestureEnabled: (() -> Swift.Bool)? { get set }
  var mediaPickerContext: (any OpenWeb3Lib.AttachmentMediaPickerContext)? { get }
  var updateContainerHeadColor: (UIKit.UIColor, UIKit.UIColor, UIKit.UIColor, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void { get set }
  var updateContainerHeadAlpha: (Swift.Double, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void { get set }
  func isContainerPanningUpdated(_ panning: Swift.Bool)
  func resetForReuse()
  func prepareForReuse()
  func requestDismiss(completion: @escaping () -> Swift.Void)
  func shouldDismissImmediately() -> Swift.Bool
  func isAutoExpand() -> Swift.Bool
  func isModalStyle() -> Swift.Bool
  func canExpand() -> Swift.Bool
  func isFullScreenMod() -> Swift.Bool
  func isCustomNavitationStyle() -> Swift.Bool
  func onUpdateModalProgress(_ topInset: CoreFoundation.CGFloat)
  func allowVerticalSwipe() -> Swift.Bool
  func allowHorizontalSwipe() -> Swift.Bool
  func isBackButtonVisible() -> Swift.Bool
  func requestBackClick()
}
extension OpenWeb3Lib.AttachmentContainable {
  public func isContainerPanningUpdated(_ panning: Swift.Bool)
  public func resetForReuse()
  public func prepareForReuse()
  public func requestDismiss(completion: @escaping () -> Swift.Void)
  public func shouldDismissImmediately() -> Swift.Bool
  public func isAutoExpand() -> Swift.Bool
  public func canExpand() -> Swift.Bool
  public func onUpdateModalProgress(_ topIns: CoreFoundation.CGFloat)
  public var isPanGestureEnabled: (() -> Swift.Bool)? {
    get
  }
  public func isBackButtonVisible() -> Swift.Bool
  public func requestBackClick()
}
public enum AttachmentMediaPickerSendMode {
  case generic
  case silently
  case whenOnline
  public static func == (a: OpenWeb3Lib.AttachmentMediaPickerSendMode, b: OpenWeb3Lib.AttachmentMediaPickerSendMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AttachmentMediaPickerAttachmentMode {
  case media
  case files
  public static func == (a: OpenWeb3Lib.AttachmentMediaPickerAttachmentMode, b: OpenWeb3Lib.AttachmentMediaPickerAttachmentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AttachmentMediaPickerContext {
  var selectionCount: OpenWeb3Lib.Signal<Swift.Int, OpenWeb3Lib.NoError> { get }
  var caption: OpenWeb3Lib.Signal<Foundation.NSAttributedString?, OpenWeb3Lib.NoError> { get }
  var loadingProgress: OpenWeb3Lib.Signal<CoreFoundation.CGFloat?, OpenWeb3Lib.NoError> { get }
  var mainButtonState: OpenWeb3Lib.Signal<OpenWeb3Lib.AttachmentMainButtonState?, OpenWeb3Lib.NoError> { get }
  func mainButtonAction()
  func setCaption(_ caption: Foundation.NSAttributedString)
  func send(mode: OpenWeb3Lib.AttachmentMediaPickerSendMode, attachmentMode: OpenWeb3Lib.AttachmentMediaPickerAttachmentMode)
  func schedule()
}
@objc @_Concurrency.MainActor @preconcurrency public class AttachmentController : OpenWeb3Lib.ViewController {
  @_Concurrency.MainActor @preconcurrency public var animateAppearance: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var willDismiss: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var didDismiss: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var mediaPickerContext: (any OpenWeb3Lib.AttachmentMediaPickerContext)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public var ready: OpenWeb3Lib.Promise<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var requestController: (OpenWeb3Lib.AttachmentButtonType, _ completion: @escaping ((any OpenWeb3Lib.AttachmentContainable)?, (any OpenWeb3Lib.AttachmentMediaPickerContext)?) -> Swift.Void) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var getInputContainerNode: () -> (CoreFoundation.CGFloat, OpenWeb3LibPrivite.ASDisplayNode?, () -> OpenWeb3Lib.AttachmentController.InputPanelTransition?)?
  @_Concurrency.MainActor @preconcurrency public var getSourceRect: (() -> CoreFoundation.CGRect?)?
  @_Concurrency.MainActor @preconcurrency public init(context: any OpenWeb3Lib.AccountContext, updatedPresentationData: (initial: OpenWeb3Lib.PresentationData, signal: OpenWeb3Lib.Signal<OpenWeb3Lib.PresentationData, OpenWeb3Lib.NoError>)? = nil, isScheduledMessages: Swift.Bool = false, buttons: [OpenWeb3Lib.AttachmentButtonType], initialButton: OpenWeb3Lib.AttachmentButtonType = .gallery, fromMenu: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public var forceSourceRect: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func updateSelectionCount(_ count: Swift.Int)
  @_Concurrency.MainActor @preconcurrency override open func loadDisplayNode()
  @_Concurrency.MainActor @preconcurrency public func _dismiss()
  @_Concurrency.MainActor @preconcurrency public var ensureUnfocused: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency override public func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  final public class InputPanelTransition {
    public init(inputNode: OpenWeb3LibPrivite.ASDisplayNode, accessoryPanelNode: OpenWeb3LibPrivite.ASDisplayNode?, menuButtonNode: OpenWeb3LibPrivite.ASDisplayNode, menuButtonBackgroundNode: OpenWeb3LibPrivite.ASDisplayNode, menuIconNode: OpenWeb3LibPrivite.ASDisplayNode, menuTextNode: OpenWeb3LibPrivite.ASDisplayNode, prepareForDismiss: @escaping () -> Swift.Void)
    @objc deinit
  }
  @_Concurrency.MainActor @preconcurrency public static func preloadAttachBotIcons(context: any OpenWeb3Lib.AccountContext) -> OpenWeb3Lib.DisposableSet
  @objc deinit
}
public protocol AccountContext : AnyObject {
  var appName: Swift.String { get }
  var resourceProvider: any OpenWeb3Lib.IResourceProvider { get }
  var mainWindow: OpenWeb3Lib.Window1? { get }
  var mePaths: [Swift.String] { get }
}
public protocol StandalonePresentableController : OpenWeb3Lib.ViewController {
}
public enum ViewControllerPresentationAnimation {
  case none
  case modalSheet
  public static func == (a: OpenWeb3Lib.ViewControllerPresentationAnimation, b: OpenWeb3Lib.ViewControllerPresentationAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ViewControllerSupportedOrientations : Swift.Equatable {
  public var regularSize: UIKit.UIInterfaceOrientationMask
  public var compactSize: UIKit.UIInterfaceOrientationMask
  public init(regularSize: UIKit.UIInterfaceOrientationMask, compactSize: UIKit.UIInterfaceOrientationMask)
  public func intersection(_ other: OpenWeb3Lib.ViewControllerSupportedOrientations) -> OpenWeb3Lib.ViewControllerSupportedOrientations
  public static func == (a: OpenWeb3Lib.ViewControllerSupportedOrientations, b: OpenWeb3Lib.ViewControllerSupportedOrientations) -> Swift.Bool
}
open class ViewControllerPresentationArguments {
  final public let presentationAnimation: OpenWeb3Lib.ViewControllerPresentationAnimation
  final public let completion: (() -> Swift.Void)?
  public init(presentationAnimation: OpenWeb3Lib.ViewControllerPresentationAnimation, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public enum ViewControllerNavigationPresentation {
  case `default`
  case master
  case modal
  case flatModal
  case standaloneModal
  case modalInLargeLayout
  public static func == (a: OpenWeb3Lib.ViewControllerNavigationPresentation, b: OpenWeb3Lib.ViewControllerNavigationPresentation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TabBarItemContextActionType {
  case none
  case always
  case whenActive
  public static func == (a: OpenWeb3Lib.TabBarItemContextActionType, b: OpenWeb3Lib.TabBarItemContextActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CustomViewControllerNavigationData : AnyObject {
  func combine(summary: (any OpenWeb3Lib.CustomViewControllerNavigationDataSummary)?) -> (any OpenWeb3Lib.CustomViewControllerNavigationDataSummary)?
}
public protocol CustomViewControllerNavigationDataSummary : AnyObject {
}
@objc @_Concurrency.MainActor @preconcurrency open class ViewController : UIKit.UIViewController, OpenWeb3Lib.ContainableController {
  public struct NavigationLayout {
    public var navigationFrame: CoreFoundation.CGRect
    public var defaultContentHeight: CoreFoundation.CGFloat
    public init(navigationFrame: CoreFoundation.CGRect, defaultContentHeight: CoreFoundation.CGFloat)
  }
  @_Concurrency.MainActor @preconcurrency public var currentlyAppliedLayout: OpenWeb3Lib.ContainerViewLayout? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public let presentationContext: OpenWeb3Lib.PresentationContext
  @_Concurrency.MainActor @preconcurrency final public var supportedOrientations: OpenWeb3Lib.ViewControllerSupportedOrientations {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var lockedOrientation: UIKit.UIInterfaceOrientationMask?
  @_Concurrency.MainActor @preconcurrency final public var lockOrientation: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var isOpaqueWhenInOverlay: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var blocksBackgroundWhenInOverlay: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var acceptsFocusWhenInOverlay: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var automaticallyControlPresentationContextLayout: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var updateTransitionWhenPresentedAsModal: ((CoreFoundation.CGFloat, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public func requestUpdateParameters()
  @_Concurrency.MainActor @preconcurrency public func combinedSupportedOrientations(currentOrientationToLock: UIKit.UIInterfaceOrientationMask) -> OpenWeb3Lib.ViewControllerSupportedOrientations
  @_Concurrency.MainActor @preconcurrency final public var deferScreenEdgeGestures: UIKit.UIRectEdge {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var prefersOnScreenNavigationHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency open var previousItem: OpenWeb3Lib.NavigationPreviousAction?
  @_Concurrency.MainActor @preconcurrency open var navigationPresentation: OpenWeb3Lib.ViewControllerNavigationPresentation
  @_Concurrency.MainActor @preconcurrency open var _presentedInModal: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var presentedOverCoveringView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var presentationArguments: Any?
  @_Concurrency.MainActor @preconcurrency public var tabBarItemDebugTapAction: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var modalStyleOverlayTransitionFactor: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var modalStyleOverlayTransitionFactorUpdated: ((OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var customModalStyleOverlayTransitionFactorUpdated: ((OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public func updateModalStyleOverlayTransitionFactor(_ value: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency final public var displayNode: OpenWeb3LibPrivite.ASDisplayNode {
    get
    set(value)
  }
  @_Concurrency.MainActor @preconcurrency final public var isNodeLoaded: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public let statusBar: OpenWeb3Lib.StatusBar
  @_Concurrency.MainActor @preconcurrency final public let navigationBar: OpenWeb3Lib.NavigationBar?
  @_Concurrency.MainActor @preconcurrency open var transitionNavigationBar: OpenWeb3Lib.NavigationBar? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var toolbar: OpenWeb3Lib.Toolbar? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var displayNavigationBar: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var navigationBarRequiresEntireLayoutUpdate: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var hasActiveInput: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var overlayWantsToBeBelowKeyboard: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func overlayWantsToBeBelowKeyboardUpdated(transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency open var interactiveNavivationGestureEdgeWidth: OpenWeb3Lib.InteractiveTransitionGestureRecognizerEdgeWidth? {
    get
  }
  @_Concurrency.MainActor @preconcurrency open func navigationLayout(layout: OpenWeb3Lib.ContainerViewLayout) -> OpenWeb3Lib.ViewController.NavigationLayout
  @_Concurrency.MainActor @preconcurrency open var cleanNavigationHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var additionalNavigationBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var additionalSideInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency open var ready: OpenWeb3Lib.Promise<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var scrollToTop: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var scrollToTopWithTabBar: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var longTapWithTabBar: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var customPresentPreviewingController: ((OpenWeb3Lib.ViewController, OpenWeb3LibPrivite.ASDisplayNode) -> OpenWeb3Lib.ViewController?)?
  @_Concurrency.MainActor @preconcurrency open func updateNavigationCustomData(_ data: Any?, progress: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency open var customData: Any? {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var customNavigationData: (any OpenWeb3Lib.CustomViewControllerNavigationData)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var customNavigationDataSummary: (any OpenWeb3Lib.CustomViewControllerNavigationDataSummary)?
  @_Concurrency.MainActor @preconcurrency public var isInFocus: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open func inFocusUpdated(isInFocus: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var attemptNavigation: (@escaping () -> Swift.Void) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func preferredContentSizeForLayout(_ layout: OpenWeb3Lib.ContainerViewLayout) -> CoreFoundation.CGSize?
  @_Concurrency.MainActor @preconcurrency open func didAppearInContextPreview()
  @_Concurrency.MainActor @preconcurrency public init(navigationBarPresentationData: OpenWeb3Lib.NavigationBarPresentationData?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func updateNavigationBarLayout(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency public func applyNavigationBarLayout(_ layout: OpenWeb3Lib.ContainerViewLayout, navigationLayout: OpenWeb3Lib.ViewController.NavigationLayout, additionalBackgroundHeight: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency open func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency open func navigationStackConfigurationUpdated(next: [OpenWeb3Lib.ViewController])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency open func loadDisplayNode()
  @_Concurrency.MainActor @preconcurrency open func displayNodeDidLoad()
  @_Concurrency.MainActor @preconcurrency public func requestLayout(transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency open func updateToInterfaceOrientation(_ orientation: UIKit.UIInterfaceOrientation)
  @_Concurrency.MainActor @preconcurrency public func setDisplayNavigationBar(_ displayNavigationBar: Swift.Bool, transition: OpenWeb3Lib.ContainedViewLayoutTransition = .immediate)
  @_Concurrency.MainActor @preconcurrency public func setNavigationBarPresentationData(_ presentationData: OpenWeb3Lib.NavigationBarPresentationData, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setStatusBarStyle(_ style: OpenWeb3Lib.StatusBarStyle, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func presentNative(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func dismissNative(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency final public var window: (any OpenWeb3Lib.WindowHost)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func push(_ controller: OpenWeb3Lib.ViewController)
  @_Concurrency.MainActor @preconcurrency open func replace(with controller: OpenWeb3Lib.ViewController)
  @_Concurrency.MainActor @preconcurrency open func present(_ controller: OpenWeb3Lib.ViewController, in context: OpenWeb3Lib.PresentationContextType, with arguments: Any? = nil, blockInteraction: Swift.Bool = false, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func forEachController(_ f: (any OpenWeb3Lib.ContainableController) -> Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func presentInGlobalOverlay(_ controller: OpenWeb3Lib.ViewController, with arguments: Any? = nil)
  @_Concurrency.MainActor @preconcurrency public func addGlobalPortalHostView(sourceView: OpenWeb3Lib.PortalSourceView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func viewWillLeaveNavigation()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func dismiss(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency final public func navigationNextSibling() -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public func traceVisibility() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func setToolbar(_ toolbar: OpenWeb3Lib.Toolbar?, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency open func toolbarActionSelected(action: OpenWeb3Lib.ToolbarActionOption)
  @_Concurrency.MainActor @preconcurrency open var tabBarItemContextActionType: OpenWeb3Lib.TabBarItemContextActionType
  @_Concurrency.MainActor @preconcurrency open func tabBarItemContextAction(sourceNode: OpenWeb3Lib.ContextExtractedContentContainingNode, gesture: OpenWeb3Lib.ContextGesture)
  @_Concurrency.MainActor @preconcurrency open func tabBarDisabledAction()
  @_Concurrency.MainActor @preconcurrency open func tabBarItemSwipeAction(direction: OpenWeb3Lib.TabBarItemSwipeDirection)
  @_Concurrency.MainActor @preconcurrency open func updatePossibleControllerDropContent(content: OpenWeb3Lib.NavigationControllerDropContent?)
  @_Concurrency.MainActor @preconcurrency open func acceptPossibleControllerDropContent(content: OpenWeb3Lib.NavigationControllerDropContent) -> Swift.Bool
}
public enum SignalFeedbackLoopState<T> {
  case initial
  case loop(T)
}
public func feedbackLoop<R1, R, E>(once: @escaping (OpenWeb3Lib.SignalFeedbackLoopState<R1>) -> OpenWeb3Lib.Signal<R1, E>?, reduce: @escaping (R1, R1) -> R1) -> OpenWeb3Lib.Signal<R, E>
public func deliverOn<T, E>(_ queue: OpenWeb3Lib.Queue) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func deliverOnMainQueue<T, E>(_ signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func deliverOn<T, E>(_ threadPool: OpenWeb3Lib.ThreadPool) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func runOn<T, E>(_ queue: OpenWeb3Lib.Queue) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func runOn<T, E>(_ threadPool: OpenWeb3Lib.ThreadPool) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public let LRUCacheMemoryWarningNotification: Foundation.NSNotification.Name
public enum ApiError : Swift.Error {
  case authInvalid
  case invalidURL
  case encodingFailed
  case invalidResponse
  case requestFailed(statusCode: Swift.Int, message: Swift.String?)
  case invalidData
  case decodingFailed
  case invalidParameter(Swift.String)
}
public struct BotInfo : Swift.Codable {
  public let name: Swift.String?
  public let token: Swift.String?
  public let bio: Swift.String?
  public let avatarUrl: Swift.String?
  public let command: [OpenWeb3Lib.Command]?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Command : Swift.Codable {
  public let name: Swift.String?
  public let action: Swift.String?
  public let description: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifierParams : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifierAppDto : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LaunchParams : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ThemeParams : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PeerParams : Swift.Codable {
  public let userId: Swift.String?
  public let roomId: Swift.String?
  public let accessHash: Swift.String?
  public init(userId: Swift.String?, roomId: Swift.String?, accessHash: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DAppDto : Swift.Codable {
  public let id: Swift.String?
  public let title: Swift.String?
  public let url: Swift.String?
  public let description: Swift.String?
  public let iconUrl: Swift.String?
  public let bannerUrl: Swift.String?
  public let createAt: Swift.Int?
  public let updateAt: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppSettings : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MiniAppDto : Swift.Codable {
  public let id: Swift.String?
  public let identifier: Swift.String?
  public let title: Swift.String?
  public let description: Swift.String?
  public let iconUrl: Swift.String?
  public let bannerUrl: Swift.String?
  public let botId: Swift.String?
  public let botName: Swift.String?
  public let createAt: Swift.Int?
  public let updateAt: Swift.Int?
  public let options: OpenWeb3Lib.AppSettings?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MiniAppResponse : Swift.Codable {
  public let items: [OpenWeb3Lib.MiniAppDto]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public func take<T, E>(_ count: Swift.Int) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public struct SignalTakeAction {
  public let passthrough: Swift.Bool
  public let complete: Swift.Bool
  public init(passthrough: Swift.Bool, complete: Swift.Bool)
}
public func take<T, E>(until: @escaping (T) -> OpenWeb3Lib.SignalTakeAction) -> (OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T, E>
public func last<T, E>(signal: OpenWeb3Lib.Signal<T, E>) -> OpenWeb3Lib.Signal<T?, E>
@_hasMissingDesignatedInitializers open class WebAppLaunchParameters {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DAppLaunchParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func parentVC(_ parentVC: UIKit.UIViewController) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func id(_ id: Swift.String?) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func bridgeProvider(_ bridgeProvider: any OpenWeb3Lib.BridgeProvider) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func getActionBarNode(_ getActionBarNode: @escaping (@escaping () -> Swift.Void, @escaping () -> Swift.Void) -> (CoreFoundation.CGSize, UIKit.UIView)?) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func completion(_ completion: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func willDismiss(_ willDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func didDismiss(_ didDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.DAppLaunchParameters.Builder
    public func build() throws -> OpenWeb3Lib.DAppLaunchParameters
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebAppPreloadParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func botId(_ botId: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func botName(_ botName: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func miniAppId(_ miniAppId: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func miniAppName(_ miniAppName: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func startParams(_ startParams: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func peer(_ peer: OpenWeb3Lib.PeerParams?) -> OpenWeb3Lib.WebAppPreloadParameters.Builder
    public func build() -> OpenWeb3Lib.WebAppPreloadParameters
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebAppLaunchWithDialogParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func parentVC(_ parentVC: UIKit.UIViewController) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func botId(_ botId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func botName(_ botName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func miniAppId(_ miniAppId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func miniAppName(_ miniAppName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func startParams(_ startParams: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useWeChatStyle(_ useWeChatStyle: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func isLocalSource(_ isLocalSource: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func isSystem(_ isSystem: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useModalStyle(_ useModalStyle: Swift.Bool?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useCustomNavigation(_ useCustomNavigation: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func isLaunchUrl(_ isLaunchUrl: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func useCache(_ useCache: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func autoExpand(_ autoExpand: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func peer(_ peer: OpenWeb3Lib.PeerParams?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func bridgeProvider(_ bridgeProvider: any OpenWeb3Lib.BridgeProvider) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func getActionBarNode(_ getActionBarNode: @escaping (@escaping () -> Swift.Void, @escaping () -> Swift.Void) -> (CoreFoundation.CGSize, UIKit.UIView)?) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func completion(_ completion: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func willDismiss(_ willDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func didDismiss(_ didDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithDialogParameters.Builder
    public func build() throws -> OpenWeb3Lib.WebAppLaunchWithDialogParameters
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebAppLaunchWithParentParameters : OpenWeb3Lib.WebAppLaunchParameters {
  public class Builder {
    public init()
    public func parentVC(_ parentVC: UIKit.UIViewController) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func botId(_ botId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func botName(_ botName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func miniAppId(_ miniAppId: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func miniAppName(_ miniAppName: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func startParams(_ startParams: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func url(_ url: Swift.String?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func useWeChatStyle(_ useWeChatStyle: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func isLocalSource(_ isLocalSource: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func isSystem(_ isSystem: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func useCache(_ useCache: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func autoExpand(_ autoExpand: Swift.Bool) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func peer(_ peer: OpenWeb3Lib.PeerParams?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func bridgeProvider(_ bridgeProvider: any OpenWeb3Lib.BridgeProvider) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func getActionBarNode(_ getActionBarNode: @escaping (@escaping () -> Swift.Void, @escaping () -> Swift.Void) -> (CoreFoundation.CGSize, UIKit.UIView)?) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func getInputContainerNode(_ getInputContainerNode: @escaping () -> (CoreFoundation.CGFloat, UIKit.UIView?)? = { return nil }) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func completion(_ completion: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func willDismiss(_ willDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func didDismiss(_ didDismiss: @escaping () -> Swift.Void = {}) -> OpenWeb3Lib.WebAppLaunchWithParentParameters.Builder
    public func build() throws -> OpenWeb3Lib.WebAppLaunchWithParentParameters
    @objc deinit
  }
  @objc deinit
}
public enum Source {
  case generic
  case menu
  case attachMenu
  case inline
  case simple
  case settings
  public static func == (a: OpenWeb3Lib.Source, b: OpenWeb3Lib.Source) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IMiniApp : AnyObject {
  func reloadPage()
  func requestDismiss(_ force: Swift.Bool) -> Swift.Bool
  func getVC() -> UIKit.UIViewController?
  func getShareUrl() async -> Swift.String?
  func getShareInfo() async -> OpenWeb3Lib.ShareDto?
  func isSystem() -> Swift.Bool
  func minimization()
  func maximize()
  func clickMenu(type: Swift.String)
}
public protocol IResourceProvider {
  func isDark() -> Swift.Bool
  func getString(key: Swift.String) -> Swift.String?
  func getString(key: Swift.String, withValues values: [any Swift.CVarArg]) -> Swift.String
  func getColor(key: Swift.String) -> UIKit.UIColor
  func getUserInterfaceStyle() -> UIKit.UIUserInterfaceStyle
}
public protocol IAppDelegate {
  var qrcodeProvider: (any OpenWeb3Lib.IMiniApp, Swift.String?, @escaping (Swift.String?) -> Swift.Void) -> UIKit.UINavigationController? { get }
  var customMethodProvider: (any OpenWeb3Lib.IMiniApp, Swift.String, Swift.String?, @escaping (Swift.String?) -> Swift.Void) -> Swift.Bool { get }
  var attachActionProvider: (any OpenWeb3Lib.IMiniApp, Swift.String?, Swift.String) -> Swift.Void { get }
  var schemeProvider: (any OpenWeb3Lib.IMiniApp, Swift.String) async -> Swift.Bool { get }
  func switchInlineQuery(app: any OpenWeb3Lib.IMiniApp, query: Swift.String, types: [Swift.String]) async -> Swift.Bool
  func checkPeerMessageAccess(app: any OpenWeb3Lib.IMiniApp) async -> Swift.Bool
  func requestPeerMessageAccess(app: any OpenWeb3Lib.IMiniApp) async -> Swift.Bool
  func sendMessageToPeer(app: any OpenWeb3Lib.IMiniApp, content: Swift.String?) -> Swift.Bool
  func requestPhoneNumberToPeer(app: any OpenWeb3Lib.IMiniApp) async -> Swift.Bool
  func canUseBiometryAuth(app: any OpenWeb3Lib.IMiniApp) -> Swift.Bool
  func updateBiometryToken(app: any OpenWeb3Lib.IMiniApp, token: Swift.String?, reason: Swift.String?) async -> (Swift.Bool, Swift.String?)
  func openBiometrySettings(app: any OpenWeb3Lib.IMiniApp) async
  func onApiError(error: OpenWeb3Lib.ApiError)
  func onMinimization(app: any OpenWeb3Lib.IMiniApp)
  func onMaximize(app: any OpenWeb3Lib.IMiniApp)
  func onMoreButtonClick(app: any OpenWeb3Lib.IMiniApp, menus: [Swift.String]) -> Swift.Bool
  func onClickMenu(app: any OpenWeb3Lib.IMiniApp, type: Swift.String)
}
public struct ShareDto {
  public let type: Swift.String
  public let id: Swift.String?
  public let identifier: Swift.String?
  public let title: Swift.String?
  public let url: Swift.String?
  public let description: Swift.String?
  public let iconUrl: Swift.String?
  public let bannerUrl: Swift.String?
}
@_hasMissingDesignatedInitializers public class AppConfig {
  public class Builder {
    public init(appName: Swift.String, webAppName: Swift.String, mePath: [Swift.String], window: UIKit.UIWindow, appDelegate: any OpenWeb3Lib.IAppDelegate)
    public func languageCode(_ languageCode: Swift.String) -> OpenWeb3Lib.AppConfig.Builder
    public func userInterfaceStyle(_ userInterfaceStyle: UIKit.UIUserInterfaceStyle) -> OpenWeb3Lib.AppConfig.Builder
    public func maxCachePage(_ maxCachePage: Swift.Int) -> OpenWeb3Lib.AppConfig.Builder
    public func resourceProvider(_ resourceProvider: (any OpenWeb3Lib.IResourceProvider)?) -> OpenWeb3Lib.AppConfig.Builder
    public func floatWindowSize(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> OpenWeb3Lib.AppConfig.Builder
    public func build() -> OpenWeb3Lib.AppConfig
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers open class MiniAppService {
  @objc open func load() -> Swift.Bool
  @objc open func unload()
  open func batchGetMiniApps(appIds: [Swift.String]) async -> Swift.Result<OpenWeb3Lib.MiniAppResponse, OpenWeb3Lib.ApiError>
  open func getMiniAppInfoById(appId: Swift.String) async -> Swift.Result<OpenWeb3Lib.MiniAppDto, OpenWeb3Lib.ApiError>
  open func getMiniAppInfoByNames(botIdOrName: Swift.String, appName: Swift.String) async -> Swift.Result<OpenWeb3Lib.MiniAppDto, OpenWeb3Lib.ApiError>
  open func getDAppInfoById(dappId: Swift.String) async -> Swift.Result<OpenWeb3Lib.DAppDto, OpenWeb3Lib.ApiError>
  open func setup(config: OpenWeb3Lib.AppConfig)
  @objc open func updateTheme(userInterfaceStyle: UIKit.UIUserInterfaceStyle)
  @objc open func updateLanguage(languageCode: Swift.String)
  open func preload(config: OpenWeb3Lib.WebAppLaunchParameters)
  open func launch(config: OpenWeb3Lib.WebAppLaunchParameters) -> (any OpenWeb3Lib.IMiniApp)?
  open func setupInTestDelegate(appDelegate: any OpenWeb3Lib.IAppDelegate)
  open func getContext() -> (any OpenWeb3Lib.AccountContext)?
  @objc open func clearCache()
  @objc open func dismissAll()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class OpenPlatformPlugin : OpenWeb3Lib.Plugin {
  @objc open func load() -> Swift.Bool
  @objc open func unLoad()
  @objc open func getName() -> Swift.String
  open func signIn(verifier: Swift.String, idTokenProvider: @escaping () async -> Swift.String?, onVerifierSuccess: @escaping () -> Swift.Void, onVerifierFailure: @escaping (Swift.Int, Swift.String?) -> Swift.Void)
  @objc open func signOut()
  @objc open func isVerified() -> Swift.Bool
  open func getBotService() -> (any OpenWeb3Lib.BotService)?
  open func getMiniAppService() -> OpenWeb3Lib.MiniAppService?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class GridNodeScrollerView : UIKit.UIScrollView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesShouldCancel(in view: UIKit.UIView) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class GridNodeScroller : OpenWeb3LibPrivite.ASDisplayNode, OpenWeb3LibPrivite.ASGestureRecognizerDelegate {
  public var scrollView: UIKit.UIScrollView {
    get
  }
  required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc open class ActionSheetItemNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public let backgroundNode: OpenWeb3LibPrivite.ASDisplayNode
  public var hasSeparator: Swift.Bool
  public var requestLayout: (() -> Swift.Void)?
  public init(theme: OpenWeb3Lib.ActionSheetControllerTheme)
  open func updateLayout(constrainedSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGSize
  public func updateInternalLayout(_ calculatedSize: CoreFoundation.CGSize, constrainedSize: CoreFoundation.CGSize)
  public func requestLayoutUpdate()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TempBoxFile {
  final public let path: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TempBoxDirectory {
  final public let path: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TempBox {
  public static func initializeShared(basePath: Swift.String, processType: Swift.String, launchSpecificId: Swift.Int64)
  public static var shared: OpenWeb3Lib.TempBox {
    get
  }
  final public func file(path: Swift.String, fileName: Swift.String) -> OpenWeb3Lib.TempBoxFile
  final public func tempFile(fileName: Swift.String) -> OpenWeb3Lib.TempBoxFile
  final public func tempDirectory() -> OpenWeb3Lib.TempBoxDirectory
  final public func dispose(_ file: OpenWeb3Lib.TempBoxFile)
  final public func dispose(_ directory: OpenWeb3Lib.TempBoxDirectory)
  @objc deinit
}
public typealias EngineTempBox = OpenWeb3Lib.TempBox
extension OpenWeb3Lib.TempBox {
  public typealias File = OpenWeb3Lib.TempBoxFile
  public typealias Directory = OpenWeb3Lib.TempBoxDirectory
}
public struct ValueBoxKey : Swift.Equatable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Comparable {
  public let memory: Swift.UnsafeMutableRawPointer
  public let length: Swift.Int
  public init(length: Swift.Int)
  public init(_ value: Swift.String)
  public init(_ buffer: OpenWeb3Lib.MemoryBuffer)
  public func setData(_ offset: Swift.Int, value: Foundation.Data)
  public func setBytes(_ offset: Swift.Int, value: Swift.UnsafeRawBufferPointer)
  public func setInt32(_ offset: Swift.Int, value: Swift.Int32)
  public func setUInt32(_ offset: Swift.Int, value: Swift.UInt32)
  public func setInt64(_ offset: Swift.Int, value: Swift.Int64)
  public func setInt8(_ offset: Swift.Int, value: Swift.Int8)
  public func setUInt8(_ offset: Swift.Int, value: Swift.UInt8)
  public func setUInt16(_ offset: Swift.Int, value: Swift.UInt16)
  public func getData(_ offset: Swift.Int, length: Swift.Int) -> Foundation.Data
  public func getMemoryBuffer(_ offset: Swift.Int, length: Swift.Int) -> OpenWeb3Lib.MemoryBuffer
  public func getInt32(_ offset: Swift.Int) -> Swift.Int32
  public func getUInt32(_ offset: Swift.Int) -> Swift.UInt32
  public func getInt64(_ offset: Swift.Int) -> Swift.Int64
  public func getInt8(_ offset: Swift.Int) -> Swift.Int8
  public func getUInt8(_ offset: Swift.Int) -> Swift.UInt8
  public func getUInt16(_ offset: Swift.Int) -> Swift.UInt16
  public func prefix(_ length: Swift.Int) -> OpenWeb3Lib.ValueBoxKey
  public func isPrefix(to other: OpenWeb3Lib.ValueBoxKey) -> Swift.Bool
  public var reversed: OpenWeb3Lib.ValueBoxKey {
    get
  }
  public var successor: OpenWeb3Lib.ValueBoxKey {
    get
  }
  public var predecessor: OpenWeb3Lib.ValueBoxKey {
    get
  }
  public var description: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public func substringValue(_ range: Swift.Range<Swift.Int>) -> Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: OpenWeb3Lib.ValueBoxKey, rhs: OpenWeb3Lib.ValueBoxKey) -> Swift.Bool
  public static func < (lhs: OpenWeb3Lib.ValueBoxKey, rhs: OpenWeb3Lib.ValueBoxKey) -> Swift.Bool
  public func toMemoryBuffer() -> OpenWeb3Lib.MemoryBuffer
  public static func + (lhs: OpenWeb3Lib.ValueBoxKey, rhs: OpenWeb3Lib.ValueBoxKey) -> OpenWeb3Lib.ValueBoxKey
  public var hashValue: Swift.Int {
    get
  }
}
public protocol KeyShortcutResponder {
  var keyShortcuts: [OpenWeb3Lib.KeyShortcut] { get }
}
@objc @_Concurrency.MainActor @preconcurrency public class KeyShortcutsController : UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public static var isAvailable: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(enumerator: @escaping (@escaping (any OpenWeb3Lib.ContainableController) -> Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func target(forAction action: ObjectiveC.Selector, withSender sender: Any?) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public class PortalView {
  final public let view: any UIKit.UIView & OpenWeb3LibPrivite.UIKitPortalViewProtocol
  weak public var sourceView: UIKit.UIView?
  public init?(matchPosition: Swift.Bool = true)
  @objc deinit
}
public enum OverlayStatusControllerType {
  case loading(cancelled: (() -> Swift.Void)?)
  case success
  case shieldSuccess(Swift.String, Swift.Bool)
  case genericSuccess(Swift.String, Swift.Bool)
  case starSuccess(Swift.String)
}
public enum OverlayStatusControllerStyle {
  case light
  case dark
  public static func == (a: OpenWeb3Lib.OverlayStatusControllerStyle, b: OpenWeb3Lib.OverlayStatusControllerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func OverlayStatusController(style: OpenWeb3Lib.OverlayStatusControllerStyle, type: OpenWeb3Lib.OverlayStatusControllerType) -> OpenWeb3Lib.ViewController
final public class ValuePipe<T> {
  public init()
  final public func signal() -> OpenWeb3Lib.Signal<T, OpenWeb3Lib.NoError>
  final public func putNext(_ next: T)
  @objc deinit
}
public func generateItemListCheckIcon(color: UIKit.UIColor) -> UIKit.UIImage?
public func generateItemListPlusIcon(_ color: UIKit.UIColor) -> UIKit.UIImage?
public struct PresentationResourcesItemList {
  public static func downArrowImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func disclosureArrowImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func disclosureOptionArrowsImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func disclosureLockedImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func checkIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func secondaryCheckIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func plusIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func roundPlusIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func deleteIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func stickerUnreadDotImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func verifiedPeerIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func itemListDeleteIndicatorIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func itemListReorderIndicatorIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func linkIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func addPersonIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func createGroupIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func addChannelIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func voiceCallIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func videoCallIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func addPhoneIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func addPhotoIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func itemListClearInputIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func cloudFetchIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func itemListCloseIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func itemListRemoveIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func makeVisibleIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func makeInvisibleIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func editThemeIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func knobImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func blockAccentIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func blockDestructiveIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func addDeviceIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func resetIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func imageIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func cloudIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func addBoostsIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func premiumIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func cornersImage(_ theme: OpenWeb3Lib.PresentationTheme, top: Swift.Bool, bottom: Swift.Bool) -> UIKit.UIImage?
  public static func uploadToneIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func topicArrowDescriptionIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func statsReactionsIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func statsForwardsIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func sharedLinkIcon(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func hideIconImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func peerStatusLockedImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func expandDownArrowImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
  public static func expandSmallDownArrowImage(_ theme: OpenWeb3Lib.PresentationTheme) -> UIKit.UIImage?
}
final public class SignalTimer {
  public init(timeout: Swift.Double, repeat: Swift.Bool, completion: @escaping () -> Swift.Void, queue: OpenWeb3Lib.Queue)
  public init(timeout: Swift.Double, repeat: Swift.Bool, completion: @escaping (OpenWeb3Lib.SignalTimer) -> Swift.Void, queue: OpenWeb3Lib.Queue)
  @objc deinit
  final public func start()
  final public func invalidate()
}
public struct ApplicationSpecificPreferencesKeys {
  public static let voipDerivedState: OpenWeb3Lib.ValueBoxKey
  public static let chatArchiveSettings: OpenWeb3Lib.ValueBoxKey
  public static let chatListFilterSettings: OpenWeb3Lib.ValueBoxKey
  public static let widgetSettings: OpenWeb3Lib.ValueBoxKey
  public static let mediaAutoSaveSettings: OpenWeb3Lib.ValueBoxKey
}
public struct ApplicationSpecificSharedDataKeys {
  public static let inAppNotificationSettings: OpenWeb3Lib.ValueBoxKey
  public static let presentationPasscodeSettings: OpenWeb3Lib.ValueBoxKey
  public static let automaticMediaDownloadSettings: OpenWeb3Lib.ValueBoxKey
  public static let generatedMediaStoreSettings: OpenWeb3Lib.ValueBoxKey
  public static let voiceCallSettings: OpenWeb3Lib.ValueBoxKey
  public static let presentationThemeSettings: OpenWeb3Lib.ValueBoxKey
  public static let instantPagePresentationSettings: OpenWeb3Lib.ValueBoxKey
  public static let callListSettings: OpenWeb3Lib.ValueBoxKey
  public static let experimentalSettings: OpenWeb3Lib.ValueBoxKey
  public static let musicPlaybackSettings: OpenWeb3Lib.ValueBoxKey
  public static let mediaInputSettings: OpenWeb3Lib.ValueBoxKey
  public static let experimentalUISettings: OpenWeb3Lib.ValueBoxKey
  public static let stickerSettings: OpenWeb3Lib.ValueBoxKey
  public static let watchPresetSettings: OpenWeb3Lib.ValueBoxKey
  public static let webSearchSettings: OpenWeb3Lib.ValueBoxKey
  public static let contactSynchronizationSettings: OpenWeb3Lib.ValueBoxKey
  public static let webBrowserSettings: OpenWeb3Lib.ValueBoxKey
  public static let intentsSettings: OpenWeb3Lib.ValueBoxKey
  public static let translationSettings: OpenWeb3Lib.ValueBoxKey
  public static let drawingSettings: OpenWeb3Lib.ValueBoxKey
  public static let mediaDisplaySettings: OpenWeb3Lib.ValueBoxKey
}
public struct ApplicationSpecificItemCacheCollectionId {
  public static let instantPageStoredState: Swift.Int8
  public static let cachedInstantPages: Swift.Int8
  public static let cachedWallpapers: Swift.Int8
  public static let mediaPlaybackStoredState: Swift.Int8
  public static let cachedGeocodes: Swift.Int8
  public static let visualMediaStoredState: Swift.Int8
  public static let cachedImageRecognizedContent: Swift.Int8
  public static let pendingInAppPurchaseState: Swift.Int8
  public static let translationState: Swift.Int8
  public static let storySource: Swift.Int8
  public static let mediaEditorState: Swift.Int8
  public static let shareWithPeersState: Swift.Int8
}
public struct ApplicationSpecificOrderedItemListCollectionId {
  public static let webSearchRecentQueries: Swift.Int32
  public static let wallpaperSearchRecentQueries: Swift.Int32
  public static let settingsSearchRecentItems: Swift.Int32
  public static let localThemes: Swift.Int32
  public static let storyDrafts: Swift.Int32
  public static let storySources: Swift.Int32
}
public enum ImpactHapticFeedbackStyle : Swift.Hashable {
  case light
  case medium
  case heavy
  case soft
  case rigid
  case veryLight
  case click05
  case click06
  public static func == (a: OpenWeb3Lib.ImpactHapticFeedbackStyle, b: OpenWeb3Lib.ImpactHapticFeedbackStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class HapticFeedback {
  public init()
  @objc deinit
  final public func prepareTap()
  final public func tap()
  final public func prepareImpact(_ style: OpenWeb3Lib.ImpactHapticFeedbackStyle = .medium)
  final public func impact(_ style: OpenWeb3Lib.ImpactHapticFeedbackStyle = .medium)
  final public func success()
  final public func prepareError()
  final public func error()
  final public func warning()
}
@available(iOS 13.0, *)
final public class ContinuousHaptic {
  public init(duration: Swift.Double) throws
  @objc deinit
}
public protocol ActionSheetItem {
  func node(theme: OpenWeb3Lib.ActionSheetControllerTheme) -> OpenWeb3Lib.ActionSheetItemNode
  func updateNode(_ node: OpenWeb3Lib.ActionSheetItemNode)
}
final public class Subscriber<T, E> : Swift.CustomStringConvertible {
  public init(next: ((T) -> Swift.Void)! = nil, error: ((E) -> Swift.Void)! = nil, completed: (() -> Swift.Void)! = nil)
  final public var description: Swift.String {
    get
  }
  @objc deinit
  final public func putNext(_ next: T)
  final public func putError(_ error: E)
  final public func putCompletion()
  final public func keepAlive(_ object: Swift.AnyObject)
}
public protocol WindowInputAccessoryHeightProvider : AnyObject {
  func getWindowInputAccessoryHeight() -> CoreFoundation.CGFloat
}
public enum ContainedViewLayoutTransitionCurve : Swift.Equatable, Swift.Hashable {
  case linear
  case easeInOut
  case spring
  case customSpring(damping: CoreFoundation.CGFloat, initialVelocity: CoreFoundation.CGFloat)
  case custom(Swift.Float, Swift.Float, Swift.Float, Swift.Float)
  public static var slide: OpenWeb3Lib.ContainedViewLayoutTransitionCurve {
    get
  }
  public static func == (a: OpenWeb3Lib.ContainedViewLayoutTransitionCurve, b: OpenWeb3Lib.ContainedViewLayoutTransitionCurve) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OpenWeb3Lib.ContainedViewLayoutTransitionCurve {
  public func solve(at offset: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
}
extension OpenWeb3Lib.ContainedViewLayoutTransitionCurve {
  public var timingFunction: Swift.String {
    get
  }
  public var mediaTimingFunction: QuartzCore.CAMediaTimingFunction? {
    get
  }
  public var viewAnimationOptions: UIKit.UIView.AnimationOptions {
    get
  }
}
public enum ContainedViewLayoutTransition {
  case immediate
  case animated(duration: Swift.Double, curve: OpenWeb3Lib.ContainedViewLayoutTransitionCurve)
  public var isAnimated: Swift.Bool {
    get
  }
}
extension CoreFoundation.CGRect {
  public var ensuredValid: CoreFoundation.CGRect {
    get
  }
}
extension OpenWeb3Lib.ContainedViewLayoutTransition {
  public func animation() -> QuartzCore.CABasicAnimation?
  public func updateFrame(node: OpenWeb3LibPrivite.ASDisplayNode, frame: CoreFoundation.CGRect, force: Swift.Bool = false, beginWithCurrentState: Swift.Bool = false, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrameAsPositionAndBounds(node: OpenWeb3LibPrivite.ASDisplayNode, frame: CoreFoundation.CGRect, force: Swift.Bool = false, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrameAsPositionAndBounds(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, force: Swift.Bool = false, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrameAdditive(node: OpenWeb3LibPrivite.ASDisplayNode, frame: CoreFoundation.CGRect, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrameAdditive(view: UIKit.UIView, frame: CoreFoundation.CGRect, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrameAdditiveToCenter(node: OpenWeb3LibPrivite.ASDisplayNode, frame: CoreFoundation.CGRect, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrameAdditiveToCenter(view: UIKit.UIView, frame: CoreFoundation.CGRect, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateBounds(node: OpenWeb3LibPrivite.ASDisplayNode, bounds: CoreFoundation.CGRect, force: Swift.Bool = false, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateBounds(layer: QuartzCore.CALayer, bounds: CoreFoundation.CGRect, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updatePosition(node: OpenWeb3LibPrivite.ASDisplayNode, position: CoreFoundation.CGPoint, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updatePosition(layer: QuartzCore.CALayer, position: CoreFoundation.CGPoint, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateAnchorPoint(layer: QuartzCore.CALayer, anchorPoint: CoreFoundation.CGPoint, force: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePosition(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePosition(node: OpenWeb3LibPrivite.ASDisplayNode, from position: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePosition(node: OpenWeb3LibPrivite.ASDisplayNode, to position: CoreFoundation.CGPoint, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePositionWithKeyframes(node: OpenWeb3LibPrivite.ASDisplayNode, keyframes: [CoreFoundation.CGPoint], removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePositionWithKeyframes(layer: QuartzCore.CALayer, keyframes: [CoreFoundation.CGPoint], removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateFrame(node: OpenWeb3LibPrivite.ASDisplayNode, from frame: CoreFoundation.CGRect, to toFrame: CoreFoundation.CGRect? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateFrame(layer: QuartzCore.CALayer, from frame: CoreFoundation.CGRect, to toFrame: CoreFoundation.CGRect? = nil, removeOnCompletion: Swift.Bool = true, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateBounds(layer: QuartzCore.CALayer, from bounds: CoreFoundation.CGRect, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateWidthAdditive(layer: QuartzCore.CALayer, value: CoreFoundation.CGFloat, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateHeightAdditive(layer: QuartzCore.CALayer, value: CoreFoundation.CGFloat, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateOffsetAdditive(node: OpenWeb3LibPrivite.ASDisplayNode, offset: CoreFoundation.CGFloat)
  public func animateHorizontalOffsetAdditive(node: OpenWeb3LibPrivite.ASDisplayNode, offset: CoreFoundation.CGFloat, completion: (() -> Swift.Void)? = nil)
  public func animateHorizontalOffsetAdditive(layer: QuartzCore.CALayer, offset: CoreFoundation.CGFloat, completion: (() -> Swift.Void)? = nil)
  public func animateOffsetAdditive(layer: QuartzCore.CALayer, offset: CoreFoundation.CGFloat, completion: (() -> Swift.Void)? = nil)
  public func animatePositionAdditive(node: OpenWeb3LibPrivite.ASDisplayNode, offset: CoreFoundation.CGFloat, removeOnCompletion: Swift.Bool = true, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func animatePositionAdditive(layer: QuartzCore.CALayer, offset: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, removeOnCompletion: Swift.Bool = true, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func animatePositionAdditive(node: OpenWeb3LibPrivite.ASDisplayNode, offset: CoreFoundation.CGPoint, delay: Swift.Double = 0.0, removeOnCompletion: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func animatePositionAdditive(layer: QuartzCore.CALayer, offset: CoreFoundation.CGPoint, to toOffset: CoreFoundation.CGPoint = CGPoint(), removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateContentsRectPositionAdditive(layer: QuartzCore.CALayer, offset: CoreFoundation.CGPoint, removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrame(view: UIKit.UIView, frame: CoreFoundation.CGRect, force: Swift.Bool = false, beginWithCurrentState: Swift.Bool = false, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrame(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, beginWithCurrentState: Swift.Bool = false, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateAlpha(node: OpenWeb3LibPrivite.ASDisplayNode, alpha: CoreFoundation.CGFloat, beginWithCurrentState: Swift.Bool = false, force: Swift.Bool = false, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateAlpha(layer: QuartzCore.CALayer, alpha: CoreFoundation.CGFloat, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateBackgroundColor(node: OpenWeb3LibPrivite.ASDisplayNode, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateBackgroundColor(layer: QuartzCore.CALayer, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateCornerRadius(node: OpenWeb3LibPrivite.ASDisplayNode, cornerRadius: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateCornerRadius(layer: QuartzCore.CALayer, cornerRadius: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTintColor(layer: QuartzCore.CALayer, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTintColor(view: UIKit.UIView, color: UIKit.UIColor, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateContentsRect(layer: QuartzCore.CALayer, contentsRect: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateTransformScale(node: OpenWeb3LibPrivite.ASDisplayNode, from fromScale: CoreFoundation.CGFloat, additive: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateTransformScale(node: OpenWeb3LibPrivite.ASDisplayNode, from fromScale: CoreFoundation.CGPoint, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateTransformScale(layer: QuartzCore.CALayer, from fromScale: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateTransformScale(layer: QuartzCore.CALayer, from fromScale: CoreFoundation.CGPoint, to toScale: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animateTransformScale(view: UIKit.UIView, from fromScale: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransform(node: OpenWeb3LibPrivite.ASDisplayNode, transform: CoreFoundation.CGAffineTransform, beginWithCurrentState: Swift.Bool = false, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransform(layer: QuartzCore.CALayer, transform: CoreFoundation.CGAffineTransform, beginWithCurrentState: Swift.Bool = false, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransformScale(node: OpenWeb3LibPrivite.ASDisplayNode, scale: CoreFoundation.CGFloat, beginWithCurrentState: Swift.Bool = false, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransformScale(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformScale(node: OpenWeb3LibPrivite.ASDisplayNode, scale: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformScaleAdditive(node: OpenWeb3LibPrivite.ASDisplayNode, scale: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformScaleAdditive(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformScaleAndOffset(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, offset: CoreFoundation.CGPoint, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformScaleAndOffset(node: OpenWeb3LibPrivite.ASDisplayNode, scale: CoreFoundation.CGFloat, offset: CoreFoundation.CGPoint, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformScale(node: OpenWeb3LibPrivite.ASDisplayNode, scale: CoreFoundation.CGPoint, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformScale(layer: QuartzCore.CALayer, scale: CoreFoundation.CGPoint, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransformScale(node: OpenWeb3LibPrivite.ASDisplayNode, scale: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransformScale(layer: QuartzCore.CALayer, scale: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateSublayerTransformOffset(layer: QuartzCore.CALayer, offset: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransformRotation(node: OpenWeb3LibPrivite.ASDisplayNode, angle: CoreFoundation.CGFloat, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransformRotation(view: UIKit.UIView, angle: CoreFoundation.CGFloat, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTransformRotationAndScale(view: UIKit.UIView, angle: CoreFoundation.CGFloat, scale: CoreFoundation.CGPoint, beginWithCurrentState: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updatePath(layer: QuartzCore.CAShapeLayer, path: CoreGraphics.CGPath, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateLineWidth(layer: QuartzCore.CAShapeLayer, lineWidth: CoreFoundation.CGFloat, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateStrokeColor(layer: QuartzCore.CAShapeLayer, strokeColor: UIKit.UIColor, delay: Swift.Double = 0.0, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func attachAnimation(view: UIKit.UIView, id: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
}
public struct CombinedTransition {
  public var horizontal: OpenWeb3Lib.ContainedViewLayoutTransition
  public var vertical: OpenWeb3Lib.ContainedViewLayoutTransition
  public var isAnimated: Swift.Bool {
    get
  }
  public init(horizontal: OpenWeb3Lib.ContainedViewLayoutTransition, vertical: OpenWeb3Lib.ContainedViewLayoutTransition)
  public func animateFrame(layer: QuartzCore.CALayer, from fromFrame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrame(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateFrame(node: OpenWeb3LibPrivite.ASDisplayNode, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updatePosition(layer: QuartzCore.CALayer, position: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func animatePositionAdditive(layer: QuartzCore.CALayer, offset: CoreFoundation.CGPoint, to toOffset: CoreFoundation.CGPoint = CGPoint(), removeOnCompletion: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
extension OpenWeb3Lib.ContainedViewLayoutTransition {
  public func animateView(allowUserInteraction: Swift.Bool = false, delay: Swift.Double = 0.0, _ f: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
public protocol ControlledTransitionAnimator : AnyObject {
  var duration: Swift.Double { get }
  func startAnimation()
  func setAnimationProgress(_ progress: CoreFoundation.CGFloat)
  func finishAnimation()
  func updateAlpha(layer: QuartzCore.CALayer, alpha: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
  func updateScale(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
  func animateScale(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
  func updatePosition(layer: QuartzCore.CALayer, position: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)?)
  func animatePosition(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)?)
  func updateBounds(layer: QuartzCore.CALayer, bounds: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
  func updateFrame(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
  func updateCornerRadius(layer: QuartzCore.CALayer, cornerRadius: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
  func updateContentsRect(layer: QuartzCore.CALayer, contentsRect: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
}
final public class ControlledTransition {
  @_hasMissingDesignatedInitializers final public class NativeAnimator : OpenWeb3Lib.ControlledTransitionAnimator {
    final public let duration: Swift.Double
    final public func startAnimation()
    final public func setAnimationProgress(_ progress: CoreFoundation.CGFloat)
    final public func finishAnimation()
    final public func updateAlpha(layer: QuartzCore.CALayer, alpha: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateScale(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func animateScale(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func animatePosition(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updatePosition(layer: QuartzCore.CALayer, position: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateBounds(layer: QuartzCore.CALayer, bounds: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateFrame(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateCornerRadius(layer: QuartzCore.CALayer, cornerRadius: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateContentsRect(layer: QuartzCore.CALayer, contentsRect: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class LegacyAnimator : OpenWeb3Lib.ControlledTransitionAnimator {
    final public let duration: Swift.Double
    final public let transition: OpenWeb3Lib.ContainedViewLayoutTransition
    final public func startAnimation()
    final public func setAnimationProgress(_ progress: CoreFoundation.CGFloat)
    final public func finishAnimation()
    final public func updateAlpha(layer: QuartzCore.CALayer, alpha: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateScale(layer: QuartzCore.CALayer, scale: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func animateScale(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGFloat, to toValue: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updatePosition(layer: QuartzCore.CALayer, position: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func animatePosition(layer: QuartzCore.CALayer, from fromValue: CoreFoundation.CGPoint, to toValue: CoreFoundation.CGPoint, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateBounds(layer: QuartzCore.CALayer, bounds: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateFrame(layer: QuartzCore.CALayer, frame: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateCornerRadius(layer: QuartzCore.CALayer, cornerRadius: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)?)
    final public func updateContentsRect(layer: QuartzCore.CALayer, contentsRect: CoreFoundation.CGRect, completion: ((Swift.Bool) -> Swift.Void)?)
    @objc deinit
  }
  final public let animator: any OpenWeb3Lib.ControlledTransitionAnimator
  final public let legacyAnimator: OpenWeb3Lib.ControlledTransition.LegacyAnimator
  public init(duration: Swift.Double, curve: OpenWeb3Lib.ContainedViewLayoutTransitionCurve, interactive: Swift.Bool)
  final public func merge(with other: OpenWeb3Lib.ControlledTransition, forceRestart: Swift.Bool)
  @objc deinit
}
@objc public class NavigationBackButtonNode : OpenWeb3LibPrivite.ASControlNode {
  final public let label: OpenWeb3Lib.ImmediateTextNode
  public var text: Swift.String {
    get
    set(value)
  }
  public var color: UIKit.UIColor {
    get
    set
  }
  public var disabledColor: UIKit.UIColor {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic public func calculateSizeThatFits(_ constrainedSize: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc override dynamic public func layout()
  @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>?, with event: UIKit.UIEvent?)
  @objc deinit
}
@objc open class ASTransformLayerNode : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override dynamic public init()
  @objc deinit
}
@objc open class ASTransformViewNode : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override dynamic public init()
  @objc deinit
}
@objc open class ASTransformNode : OpenWeb3LibPrivite.ASDisplayNode {
  public init(layerBacked: Swift.Bool = true)
  @objc deinit
}
public struct CloudFileMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.CloudFileMediaResourceId, b: OpenWeb3Lib.CloudFileMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudFileMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let volumeId: Swift.Int64
  final public let localId: Swift.Int32
  final public let secret: Swift.Int64
  final public let size: Swift.Int64?
  final public let fileReference: Foundation.Data?
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int, volumeId: Swift.Int64, localId: Swift.Int32, secret: Swift.Int64, size: Swift.Int64?, fileReference: Foundation.Data?)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudPhotoSizeMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.CloudPhotoSizeMediaResourceId, b: OpenWeb3Lib.CloudPhotoSizeMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudPhotoSizeMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let photoId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let sizeSpec: Swift.String
  final public let size: Swift.Int64?
  final public let fileReference: Foundation.Data?
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, photoId: Swift.Int64, accessHash: Swift.Int64, sizeSpec: Swift.String, size: Swift.Int64?, fileReference: Foundation.Data?)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudDocumentSizeMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.CloudDocumentSizeMediaResourceId, b: OpenWeb3Lib.CloudDocumentSizeMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudDocumentSizeMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let documentId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let sizeSpec: Swift.String
  final public let fileReference: Foundation.Data?
  final public var size: Swift.Int64? {
    get
  }
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, documentId: Swift.Int64, accessHash: Swift.Int64, sizeSpec: Swift.String, fileReference: Foundation.Data?)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public enum CloudPeerPhotoSizeSpec : Swift.Int32 {
  case small
  case fullSize
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct CloudPeerPhotoSizeMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.CloudPeerPhotoSizeMediaResourceId, b: OpenWeb3Lib.CloudPeerPhotoSizeMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudPeerPhotoSizeMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let photoId: Swift.Int64?
  final public let sizeSpec: OpenWeb3Lib.CloudPeerPhotoSizeSpec
  final public let volumeId: Swift.Int64?
  final public let localId: Swift.Int32?
  final public var size: Swift.Int64? {
    get
  }
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, photoId: Swift.Int64?, sizeSpec: OpenWeb3Lib.CloudPeerPhotoSizeSpec, volumeId: Swift.Int64?, localId: Swift.Int32?)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudStickerPackThumbnailMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.CloudStickerPackThumbnailMediaResourceId, b: OpenWeb3Lib.CloudStickerPackThumbnailMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudStickerPackThumbnailMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let thumbVersion: Swift.Int32?
  final public let volumeId: Swift.Int64?
  final public let localId: Swift.Int32?
  final public var size: Swift.Int64? {
    get
  }
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, thumbVersion: Swift.Int32?, volumeId: Swift.Int64?, localId: Swift.Int32?)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudDocumentMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let datacenterId: Swift.Int
  public let fileId: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.CloudDocumentMediaResourceId, b: OpenWeb3Lib.CloudDocumentMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudDocumentMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let fileId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let size: Swift.Int64?
  final public let fileReference: Foundation.Data?
  final public let fileName: Swift.String?
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int, fileId: Swift.Int64, accessHash: Swift.Int64, size: Swift.Int64?, fileReference: Foundation.Data?, fileName: Swift.String?)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct LocalFileMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let fileId: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.LocalFileMediaResourceId, b: OpenWeb3Lib.LocalFileMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class LocalFileMediaResource : OpenWeb3Lib.TelegramMediaResource, Swift.Codable {
  final public let fileId: Swift.Int64
  final public let size: Swift.Int64?
  final public let isSecretRelated: Swift.Bool
  public init(fileId: Swift.Int64, size: Swift.Int64? = nil, isSecretRelated: Swift.Bool = false)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  public func encode(to encoder: any Swift.Encoder) throws
  public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct LocalFileReferenceMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let randomId: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.LocalFileReferenceMediaResourceId, b: OpenWeb3Lib.LocalFileReferenceMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class LocalFileReferenceMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let localFilePath: Swift.String
  final public let randomId: Swift.Int64
  final public let isUniquelyReferencedTemporaryFile: Swift.Bool
  final public let size: Swift.Int64?
  public init(localFilePath: Swift.String, randomId: Swift.Int64, isUniquelyReferencedTemporaryFile: Swift.Bool = false, size: Swift.Int64? = nil)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct HttpReferenceMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let url: Swift.String
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.HttpReferenceMediaResourceId, b: OpenWeb3Lib.HttpReferenceMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class HttpReferenceMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public let url: Swift.String
  final public let size: Swift.Int64?
  public init(url: Swift.String, size: Swift.Int64?)
  required public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct WebFileReferenceMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let url: Swift.String
  public let accessHash: Swift.Int64
  public let size: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.WebFileReferenceMediaResourceId, b: OpenWeb3Lib.WebFileReferenceMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SecretFileMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let fileId: Swift.Int64
  public let datacenterId: Swift.Int32
  public var uniqueId: Swift.String {
    get
  }
  public init(fileId: Swift.Int64, datacenterId: Swift.Int32)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OpenWeb3Lib.SecretFileMediaResourceId, b: OpenWeb3Lib.SecretFileMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EmptyMediaResourceId {
  public var uniqueId: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
final public class EmptyMediaResource : OpenWeb3Lib.TelegramMediaResource {
  final public var size: Swift.Int64? {
    get
  }
  public init()
  public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct WallpaperDataResourceId {
  public var uniqueId: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
  public var slug: Swift.String
  public init(slug: Swift.String)
}
final public class WallpaperDataResource : OpenWeb3Lib.TelegramMediaResource {
  final public var size: Swift.Int64? {
    get
  }
  final public let slug: Swift.String
  public init(slug: Swift.String)
  public init(decoder: OpenWeb3Lib.PostboxDecoder)
  final public func encode(_ encoder: OpenWeb3Lib.PostboxEncoder)
  final public var id: OpenWeb3Lib.MediaResourceId {
    get
  }
  final public func isEqual(to: any OpenWeb3Lib.MediaResource) -> Swift.Bool
  @objc deinit
}
public let displayLinkDispatcher: OpenWeb3Lib.DisplayLinkDispatcher
public enum ImageCorner : Swift.Equatable {
  case Corner(CoreFoundation.CGFloat)
  case Tail(CoreFoundation.CGFloat, UIKit.UIImage)
  public var extendedInsets: CoreFoundation.CGSize {
    get
  }
  public var withoutTail: OpenWeb3Lib.ImageCorner {
    get
  }
  public var radius: CoreFoundation.CGFloat {
    get
  }
}
public func == (lhs: OpenWeb3Lib.ImageCorner, rhs: OpenWeb3Lib.ImageCorner) -> Swift.Bool
public func isRoundEqualCorners(_ corners: OpenWeb3Lib.ImageCorners) -> Swift.Bool
public struct ImageCorners : Swift.Equatable {
  public let topLeft: OpenWeb3Lib.ImageCorner
  public let topRight: OpenWeb3Lib.ImageCorner
  public let bottomLeft: OpenWeb3Lib.ImageCorner
  public let bottomRight: OpenWeb3Lib.ImageCorner
  public var isEmpty: Swift.Bool {
    get
  }
  public init(radius: CoreFoundation.CGFloat)
  public init(topLeft: OpenWeb3Lib.ImageCorner, topRight: OpenWeb3Lib.ImageCorner, bottomLeft: OpenWeb3Lib.ImageCorner, bottomRight: OpenWeb3Lib.ImageCorner)
  public init()
  public var extendedEdges: UIKit.UIEdgeInsets {
    get
  }
  public func withRemovedTails() -> OpenWeb3Lib.ImageCorners
}
public func == (lhs: OpenWeb3Lib.ImageCorners, rhs: OpenWeb3Lib.ImageCorners) -> Swift.Bool
@objc public class ImageNode : OpenWeb3LibPrivite.ASDisplayNode {
  public var enableAnimatedTransition: Swift.Bool
  public var animateFirstTransition: Swift.Bool
  public var contentReady: OpenWeb3Lib.Signal<Swift.Bool, OpenWeb3Lib.NoError> {
    get
  }
  public var ready: OpenWeb3Lib.Signal<Swift.Bool, OpenWeb3Lib.NoError> {
    get
  }
  public var contentUpdated: ((UIKit.UIImage?) -> Swift.Void)?
  public init(enableHasImage: Swift.Bool = false, enableEmpty: Swift.Bool = false, enableAnimatedTransition: Swift.Bool = false)
  @objc deinit
  public func setSignal(_ signal: OpenWeb3Lib.Signal<UIKit.UIImage?, OpenWeb3Lib.NoError>)
  @objc override dynamic public func clearContents()
  public var image: UIKit.UIImage? {
    get
  }
}
@_hasMissingDesignatedInitializers public class ComponentLayoutResult {
  @objc deinit
}
public protocol _TypeErasedComponentContext : AnyObject {
  var erasedEnvironment: OpenWeb3Lib._Environment { get }
  var erasedState: OpenWeb3Lib.ComponentState { get }
  var layoutResult: OpenWeb3Lib.ComponentLayoutResult { get }
}
open class ComponentState {
  open var _updated: ((OpenWeb3Lib.Transition, Swift.Bool) -> Swift.Void)?
  public init()
  final public func updated(transition: OpenWeb3Lib.Transition = .immediate, isLocal: Swift.Bool = false)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class EmptyComponentState : OpenWeb3Lib.ComponentState {
  override public init()
  @objc deinit
}
public protocol _TypeErasedComponent {
  func _makeView() -> UIKit.UIView
  func _makeContext() -> any OpenWeb3Lib._TypeErasedComponentContext
  func _update(view: UIKit.UIView, availableSize: CoreFoundation.CGSize, environment: Any, transition: OpenWeb3Lib.Transition) -> CoreFoundation.CGSize
  func _isEqual(to other: any OpenWeb3Lib._TypeErasedComponent) -> Swift.Bool
}
public protocol ComponentTaggedView : UIKit.UIView {
  func matches(tag: Any) -> Swift.Bool
}
final public class GenericComponentViewTag {
  public init()
  @objc deinit
}
public protocol Component : OpenWeb3Lib._TypeErasedComponent, Swift.Equatable {
  associatedtype EnvironmentType = OpenWeb3Lib.Empty
  associatedtype View : UIKit.UIView = UIKit.UIView
  associatedtype State : OpenWeb3Lib.ComponentState = OpenWeb3Lib.EmptyComponentState
  func makeView() -> Self.View
  func makeState() -> Self.State
  func update(view: Self.View, availableSize: CoreFoundation.CGSize, state: Self.State, environment: OpenWeb3Lib.Environment<Self.EnvironmentType>, transition: OpenWeb3Lib.Transition) -> CoreFoundation.CGSize
}
extension OpenWeb3Lib.Component {
  public func _makeView() -> UIKit.UIView
  public func _makeContext() -> any OpenWeb3Lib._TypeErasedComponentContext
  public func _update(view: UIKit.UIView, availableSize: CoreFoundation.CGSize, environment: Any, transition: OpenWeb3Lib.Transition) -> CoreFoundation.CGSize
  public func _isEqual(to other: any OpenWeb3Lib._TypeErasedComponent) -> Swift.Bool
}
extension OpenWeb3Lib.Component where Self.View == UIKit.UIView {
  public func makeView() -> UIKit.UIView
}
extension OpenWeb3Lib.Component where Self.State == OpenWeb3Lib.EmptyComponentState {
  public func makeState() -> Self.State
}
@_hasMissingDesignatedInitializers public class ComponentGesture {
  public static func tap(action: @escaping () -> Swift.Void) -> OpenWeb3Lib.ComponentGesture
  @objc deinit
}
public class AnyComponent<EnvironmentType> : OpenWeb3Lib._TypeErasedComponent, Swift.Equatable {
  final public let wrapped: any OpenWeb3Lib._TypeErasedComponent
  public init<ComponentType>(_ component: ComponentType) where EnvironmentType == ComponentType.EnvironmentType, ComponentType : OpenWeb3Lib.Component
  public static func == (lhs: OpenWeb3Lib.AnyComponent<EnvironmentType>, rhs: OpenWeb3Lib.AnyComponent<EnvironmentType>) -> Swift.Bool
  public func _makeView() -> UIKit.UIView
  public func _makeContext() -> any OpenWeb3Lib._TypeErasedComponentContext
  public func _update(view: UIKit.UIView, availableSize: CoreFoundation.CGSize, environment: Any, transition: OpenWeb3Lib.Transition) -> CoreFoundation.CGSize
  public func _isEqual(to other: any OpenWeb3Lib._TypeErasedComponent) -> Swift.Bool
  @objc deinit
}
final public class AnyComponentWithIdentity<Environment> : Swift.Equatable {
  final public let id: Swift.AnyHashable
  final public let component: OpenWeb3Lib.AnyComponent<Environment>
  public init<IdType>(id: IdType, component: OpenWeb3Lib.AnyComponent<Environment>) where IdType : Swift.Hashable
  public static func == (lhs: OpenWeb3Lib.AnyComponentWithIdentity<Environment>, rhs: OpenWeb3Lib.AnyComponentWithIdentity<Environment>) -> Swift.Bool
  @objc deinit
}
public struct PresentationSurfaceLevel : Swift.RawRepresentable {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let root: OpenWeb3Lib.PresentationSurfaceLevel
  public typealias RawValue = Swift.Int32
}
public enum PresentationContextType {
  case current
  case window(OpenWeb3Lib.PresentationSurfaceLevel)
}
@_hasMissingDesignatedInitializers final public class PresentationContext {
  final public var topLevelSubview: () -> UIKit.UIView?
  final public func present(_ controller: any OpenWeb3Lib.ContainableController, on level: OpenWeb3Lib.PresentationSurfaceLevel, blockInteraction: Swift.Bool = false, completion: @escaping () -> Swift.Void)
  @objc deinit
  final public func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  final public func hitTest(view: UIKit.UIView, point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
public func single<T, E>(_ value: T, _ errorType: E.Type) -> OpenWeb3Lib.Signal<T, E>
public func fail<T, E>(_ valueType: T.Type, _ error: E) -> OpenWeb3Lib.Signal<T, E>
public func complete<T, E>(_ valueType: T.Type, _ error: E.Type) -> OpenWeb3Lib.Signal<T, E>
public func never<T, E>(_ valueType: T.Type, _ error: E.Type) -> OpenWeb3Lib.Signal<T, E>
public func makeDefaultPresentationTheme(reference: OpenWeb3Lib.PresentationBuiltinThemeReference, extendingThemeReference: OpenWeb3Lib.PresentationThemeReference? = nil, serviceBackgroundColor: UIKit.UIColor?, preview: Swift.Bool = false) -> OpenWeb3Lib.PresentationTheme
public func customizePresentationTheme(_ theme: OpenWeb3Lib.PresentationTheme, editing: Swift.Bool, title: Swift.String? = nil, accentColor: UIKit.UIColor?, outgoingAccentColor: UIKit.UIColor?, backgroundColors: [Swift.UInt32], bubbleColors: [Swift.UInt32], animateBubbleColors: Swift.Bool?, baseColor: OpenWeb3Lib.PresentationThemeBaseColor? = nil) -> OpenWeb3Lib.PresentationTheme
public func makePresentationTheme(settings: OpenWeb3Lib.TelegramThemeSettings, title: Swift.String? = nil, serviceBackgroundColor: UIKit.UIColor? = nil) -> OpenWeb3Lib.PresentationTheme?
public func makePresentationTheme(cloudTheme: OpenWeb3Lib.TelegramTheme, dark: Swift.Bool = false) -> OpenWeb3Lib.PresentationTheme?
public func makePresentationTheme(cloudTheme: OpenWeb3Lib.TelegramTheme, baseTheme: OpenWeb3Lib.TelegramBaseTheme? = nil) -> OpenWeb3Lib.PresentationTheme?
public func makePresentationTheme(themeReference: OpenWeb3Lib.PresentationThemeReference, baseTheme: OpenWeb3Lib.TelegramBaseTheme? = nil, extendingThemeReference: OpenWeb3Lib.PresentationThemeReference? = nil, accentColor: UIKit.UIColor? = nil, outgoingAccentColor: UIKit.UIColor? = nil, backgroundColors: [Swift.UInt32] = [], bubbleColors: [Swift.UInt32] = [], animateBubbleColors: Swift.Bool? = nil, baseColor: OpenWeb3Lib.PresentationThemeBaseColor? = nil, serviceBackgroundColor: UIKit.UIColor? = nil, preview: Swift.Bool = false) -> OpenWeb3Lib.PresentationTheme?
public protocol TelegramMediaResource : OpenWeb3Lib.MediaResource, OpenWeb3Lib.PostboxCoding {
}
public struct SessionState : Swift.Codable, Swift.Equatable {
  public var token: Foundation.Data
  public init(token: Foundation.Data)
  public static func == (a: OpenWeb3Lib.SessionState, b: OpenWeb3Lib.SessionState) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Namespaces {
  public struct Message {
    public static let Cloud: Swift.Int32
    public static let Local: Swift.Int32
    public static let SecretIncoming: Swift.Int32
    public static let ScheduledCloud: Swift.Int32
    public static let ScheduledLocal: Swift.Int32
    public static let QuickReplyCloud: Swift.Int32
    public static let QuickReplyLocal: Swift.Int32
    public static let allScheduled: Swift.Set<Swift.Int32>
    public static let allQuickReply: Swift.Set<Swift.Int32>
    public static let allNonRegular: Swift.Set<Swift.Int32>
  }
  public struct Media {
    public static let CloudImage: Swift.Int32
    public static let CloudAudio: Swift.Int32
    public static let CloudContact: Swift.Int32
    public static let CloudMap: Swift.Int32
    public static let CloudFile: Swift.Int32
    public static let CloudWebpage: Swift.Int32
    public static let LocalImage: Swift.Int32
    public static let LocalFile: Swift.Int32
    public static let CloudSecretImage: Swift.Int32
    public static let CloudSecretFile: Swift.Int32
    public static let CloudGame: Swift.Int32
    public static let CloudInvoice: Swift.Int32
    public static let LocalWebpage: Swift.Int32
    public static let LocalPoll: Swift.Int32
    public static let CloudPoll: Swift.Int32
  }
  public struct ItemCollection {
    public static let CloudStickerPacks: Swift.Int32
    public static let CloudMaskPacks: Swift.Int32
    public static let EmojiKeywords: Swift.Int32
    public static let CloudAnimatedEmoji: Swift.Int32
    public static let CloudDice: Swift.Int32
    public static let CloudAnimatedEmojiAnimations: Swift.Int32
    public static let CloudAnimatedEmojiReactions: Swift.Int32
    public static let CloudPremiumGifts: Swift.Int32
    public static let CloudEmojiPacks: Swift.Int32
    public static let CloudEmojiGenericAnimations: Swift.Int32
    public static let CloudIconStatusEmoji: Swift.Int32
    public static let CloudIconTopicEmoji: Swift.Int32
    public static let CloudIconChannelStatusEmoji: Swift.Int32
  }
  public struct OrderedItemList {
    public static let CloudRecentStickers: Swift.Int32
    public static let CloudRecentGifs: Swift.Int32
    public static let RecentlySearchedPeerIds: Swift.Int32
    public static let CloudRecentInlineBots: Swift.Int32
    public static let CloudFeaturedStickerPacks: Swift.Int32
    public static let CloudArchivedStickerPacks: Swift.Int32
    public static let CloudWallpapers: Swift.Int32
    public static let CloudSavedStickers: Swift.Int32
    public static let RecentlyUsedHashtags: Swift.Int32
    public static let CloudThemes: Swift.Int32
    public static let CloudGreetingStickers: Swift.Int32
    public static let RecentDownloads: Swift.Int32
    public static let PremiumStickers: Swift.Int32
    public static let CloudPremiumStickers: Swift.Int32
    public static let LocalRecentEmoji: Swift.Int32
    public static let CloudFeaturedEmojiPacks: Swift.Int32
    public static let CloudAllPremiumStickers: Swift.Int32
    public static let CloudRecentStatusEmoji: Swift.Int32
    public static let CloudFeaturedStatusEmoji: Swift.Int32
    public static let CloudRecentReactions: Swift.Int32
    public static let CloudTopReactions: Swift.Int32
    public static let CloudEmojiCategories: Swift.Int32
    public static let CloudEmojiStatusCategories: Swift.Int32
    public static let CloudFeaturedProfilePhotoEmoji: Swift.Int32
    public static let CloudFeaturedGroupPhotoEmoji: Swift.Int32
    public static let NewSessionReviews: Swift.Int32
    public static let CloudFeaturedBackgroundIconEmoji: Swift.Int32
    public static let CloudFeaturedChannelStatusEmoji: Swift.Int32
    public static let CloudDisabledChannelStatusEmoji: Swift.Int32
    public static let CloudDefaultTagReactions: Swift.Int32
  }
  public struct CachedItemCollection {
    public static let resolvedByNamePeers: Swift.Int8
    public static let cachedTwoStepToken: Swift.Int8
    public static let cachedStickerPacks: Swift.Int8
    public static let cachedAvailableLocalizations: Swift.Int8
    public static let cachedSentMediaReferences: Swift.Int8
    public static let cachedStickerQueryResults: Swift.Int8
    public static let cachedSecureIdConfiguration: Swift.Int8
    public static let cachedWallpapersConfiguration: Swift.Int8
    public static let cachedThemesConfiguration: Swift.Int8
    public static let cachedPollResults: Swift.Int8
    public static let cachedContextResults: Swift.Int8
    public static let proximityNotificationStoredState: Swift.Int8
    public static let cachedGroupCallDisplayAsPeers: Swift.Int8
    public static let cachedAdMessageStates: Swift.Int8
    public static let cachedPeerInvitationImporters: Swift.Int8
    public static let cachedPeerExportedInvitations: Swift.Int8
    public static let cachedSendAsPeers: Swift.Int8
    public static let availableReactions: Swift.Int8
    public static let resolvedByPhonePeers: Swift.Int8
    public static let notificationSoundList: Swift.Int8
    public static let attachMenuBots: Swift.Int8
    public static let featuredStickersConfiguration: Swift.Int8
    public static let emojiSearchCategories: Swift.Int8
    public static let cachedEmojiQueryResults: Swift.Int8
    public static let cachedPeerStoryListHeads: Swift.Int8
    public static let displayedStoryNotifications: Swift.Int8
    public static let storySendAsPeerIds: Swift.Int8
    public static let cachedChannelBoosts: Swift.Int8
    public static let displayedMessageNotifications: Swift.Int8
    public static let recommendedChannels: Swift.Int8
    public static let peerColorOptions: Swift.Int8
    public static let savedMessageTags: Swift.Int8
    public static let applicationIcons: Swift.Int8
  }
}
public struct LegacyPeerSummaryCounterTags : Swift.OptionSet, Swift.Sequence, Swift.Hashable {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let regularChatsAndPrivateGroups: OpenWeb3Lib.LegacyPeerSummaryCounterTags
  public static let publicGroups: OpenWeb3Lib.LegacyPeerSummaryCounterTags
  public static let channels: OpenWeb3Lib.LegacyPeerSummaryCounterTags
  public func makeIterator() -> Swift.AnyIterator<OpenWeb3Lib.LegacyPeerSummaryCounterTags>
  public typealias ArrayLiteralElement = OpenWeb3Lib.LegacyPeerSummaryCounterTags.Element
  public typealias Element = OpenWeb3Lib.LegacyPeerSummaryCounterTags
  public typealias Iterator = Swift.AnyIterator<OpenWeb3Lib.LegacyPeerSummaryCounterTags>
  public typealias RawValue = Swift.Int32
}
public func applicationSpecificPreferencesKey(_ value: Swift.Int32) -> OpenWeb3Lib.ValueBoxKey
public func applicationSpecificSharedDataKey(_ value: Swift.Int32) -> OpenWeb3Lib.ValueBoxKey
public struct PreferencesKeys {
  public static let globalNotifications: OpenWeb3Lib.ValueBoxKey
  public static let suggestedLocalization: OpenWeb3Lib.ValueBoxKey
  public static let limitsConfiguration: OpenWeb3Lib.ValueBoxKey
  public static let contentPrivacySettings: OpenWeb3Lib.ValueBoxKey
  public static let networkSettings: OpenWeb3Lib.ValueBoxKey
  public static let remoteStorageConfiguration: OpenWeb3Lib.ValueBoxKey
  public static let voipConfiguration: OpenWeb3Lib.ValueBoxKey
  public static let appChangelogState: OpenWeb3Lib.ValueBoxKey
  public static let localizationListState: OpenWeb3Lib.ValueBoxKey
  public static let appConfiguration: OpenWeb3Lib.ValueBoxKey
  public static let searchBotsConfiguration: OpenWeb3Lib.ValueBoxKey
  public static let contactsSettings: OpenWeb3Lib.ValueBoxKey
  public static let secretChatSettings: OpenWeb3Lib.ValueBoxKey
  public static let contentSettings: OpenWeb3Lib.ValueBoxKey
  public static let chatListFilters: OpenWeb3Lib.ValueBoxKey
  public static let peersNearby: OpenWeb3Lib.ValueBoxKey
  public static let chatListFiltersFeaturedState: OpenWeb3Lib.ValueBoxKey
  public static let reactionSettings: OpenWeb3Lib.ValueBoxKey
  public static let premiumPromo: OpenWeb3Lib.ValueBoxKey
  public static let globalMessageAutoremoveTimeoutSettings: OpenWeb3Lib.ValueBoxKey
  public static let accountSpecificCacheStorageSettings: OpenWeb3Lib.ValueBoxKey
  public static let linksConfiguration: OpenWeb3Lib.ValueBoxKey
  public static let chatListFilterUpdates: OpenWeb3Lib.ValueBoxKey
  public static let globalPrivacySettings: OpenWeb3Lib.ValueBoxKey
  public static let storiesConfiguration: OpenWeb3Lib.ValueBoxKey
  public static let audioTranscriptionTrialState: OpenWeb3Lib.ValueBoxKey
  public static func didCacheSavedMessageTags(threadId: Swift.Int64?) -> OpenWeb3Lib.ValueBoxKey
  public static func displaySavedChatsAsTopics() -> OpenWeb3Lib.ValueBoxKey
  public static func shortcutMessages() -> OpenWeb3Lib.ValueBoxKey
  public static func timezoneList() -> OpenWeb3Lib.ValueBoxKey
  public static func businessLinks() -> OpenWeb3Lib.ValueBoxKey
}
public struct SharedDataKeys {
  public static let loggingSettings: OpenWeb3Lib.ValueBoxKey
  public static let cacheStorageSettings: OpenWeb3Lib.ValueBoxKey
  public static let localizationSettings: OpenWeb3Lib.ValueBoxKey
  public static let proxySettings: OpenWeb3Lib.ValueBoxKey
  public static let autodownloadSettings: OpenWeb3Lib.ValueBoxKey
  public static let themeSettings: OpenWeb3Lib.ValueBoxKey
  public static let countriesList: OpenWeb3Lib.ValueBoxKey
  public static let wallapersState: OpenWeb3Lib.ValueBoxKey
  public static let chatThemes: OpenWeb3Lib.ValueBoxKey
}
public func applicationSpecificItemCacheCollectionId(_ value: Swift.Int8) -> Swift.Int8
public func applicationSpecificOrderedItemListCollectionId(_ value: Swift.Int32) -> Swift.Int32
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class HighlightableButton : OpenWeb3Lib.HighlightTrackingButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc open class HighlightTrackingButtonNode : OpenWeb3Lib.ASButtonNode {
  public var highligthedChanged: (Swift.Bool) -> Swift.Void
  public var pointerInteraction: OpenWeb3Lib.PointerInteraction?
  public init(pointerStyle: OpenWeb3Lib.PointerStyle? = nil)
  @objc override dynamic open func didLoad()
  @objc override dynamic open func beginTracking(with touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func endTracking(with touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>?, with event: UIKit.UIEvent?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class HighlightableButtonNode : OpenWeb3Lib.HighlightTrackingButtonNode {
  override public init(pointerStyle: OpenWeb3Lib.PointerStyle? = nil)
  @objc deinit
}
public enum PluginName : Swift.String {
  case openPlatform
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers public class PluginsManager {
  public static func getInstance() -> OpenWeb3Lib.PluginsManager
  public func registerPlugin(_ plugin: any OpenWeb3Lib.Plugin)
  @objc public func unregisterPlugin(_ pluginName: Swift.String)
  public func getPlugin<T>(_ pluginName: Swift.String) -> T? where T : OpenWeb3Lib.Plugin
  @objc public func auth(verifier: Swift.String, idTokenProvider: (Swift.String) -> Swift.Void)
  @objc deinit
}
public protocol Plugin {
  func load() -> Swift.Bool
  func unLoad()
  func getName() -> Swift.String
}
public typealias ListViewTransaction = (@escaping () -> Swift.Void) -> Swift.Void
final public class ListViewTransactionQueue {
  final public var transactionCompleted: () -> Swift.Void
  public init()
  final public func addTransaction(_ transaction: @escaping OpenWeb3Lib.ListViewTransaction)
  @objc deinit
}
public func findSubstringRanges(in string: Swift.String, query: Swift.String) -> ([Swift.Range<Swift.String.Index>], Swift.String)
extension Swift.Character {
  public var isSimpleEmoji: Swift.Bool {
    get
  }
  public var isCombinedIntoEmoji: Swift.Bool {
    get
  }
  public var isEmoji: Swift.Bool {
    get
  }
}
extension Swift.Unicode.Scalar {
  public var isEmoji: Swift.Bool {
    get
  }
  public var maybeEmoji: Swift.Bool {
    get
  }
  public static var ZeroWidthJoiner: Swift.UnicodeScalar
  public static var VariationSelector: Swift.UnicodeScalar
}
extension Swift.String {
  public func trimmingTrailingSpaces() -> Swift.String
  public var isSingleEmoji: Swift.Bool {
    get
  }
  public var containsEmoji: Swift.Bool {
    get
  }
  public var containsOnlyEmoji: Swift.Bool {
    get
  }
  public var emojis: [Swift.String] {
    get
  }
  public var trimmingEmojis: Swift.String {
    get
  }
  public var normalizedEmoji: Swift.String {
    get
  }
  public var basicEmoji: (Swift.String, Swift.String?) {
    get
  }
  public var strippedEmoji: Swift.String {
    get
  }
}
public func textAlertController(context: any OpenWeb3Lib.AccountContext, title: Swift.String?, text: Swift.String, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, allowInputInset: Swift.Bool = true, parseMarkdown: Swift.Bool = false, dismissOnOutsideTap: Swift.Bool = true) -> OpenWeb3Lib.AlertController
public func textAlertController(sharedContext: any OpenWeb3Lib.AccountContext, title: Swift.String?, text: Swift.String, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, allowInputInset: Swift.Bool = true, parseMarkdown: Swift.Bool = false, dismissOnOutsideTap: Swift.Bool = true) -> OpenWeb3Lib.AlertController
public func textAlertController(sharedContext: any OpenWeb3Lib.AccountContext, title: Swift.String?, text: Swift.String, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, allowInputInset: Swift.Bool = true, dismissOnOutsideTap: Swift.Bool = true) -> OpenWeb3Lib.AlertController
public func richTextAlertController(context: any OpenWeb3Lib.AccountContext, title: Foundation.NSAttributedString?, text: Foundation.NSAttributedString, actions: [OpenWeb3Lib.TextAlertAction], actionLayout: OpenWeb3Lib.TextAlertContentActionLayout = .horizontal, allowInputInset: Swift.Bool = true, dismissAutomatically: Swift.Bool = true) -> OpenWeb3Lib.AlertController
final public class LocalizationComponent : Swift.Equatable, Swift.Codable {
  final public let languageCode: Swift.String
  final public let localizedName: Swift.String
  final public let localization: OpenWeb3Lib.Localization
  final public let customPluralizationCode: Swift.String?
  public init(languageCode: Swift.String, localizedName: Swift.String, localization: OpenWeb3Lib.Localization, customPluralizationCode: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: OpenWeb3Lib.LocalizationComponent, rhs: OpenWeb3Lib.LocalizationComponent) -> Swift.Bool
  @objc deinit
}
final public class LocalizationSettings : Swift.Codable, Swift.Equatable {
  final public let primaryComponent: OpenWeb3Lib.LocalizationComponent
  final public let secondaryComponent: OpenWeb3Lib.LocalizationComponent?
  public init(primaryComponent: OpenWeb3Lib.LocalizationComponent, secondaryComponent: OpenWeb3Lib.LocalizationComponent?)
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: OpenWeb3Lib.LocalizationSettings, rhs: OpenWeb3Lib.LocalizationSettings) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ListViewFloatingHeaderNode : OpenWeb3LibPrivite.ASDisplayNode {
  open func updateLayout(width: CoreFoundation.CGFloat, leftInset: CoreFoundation.CGFloat, rightInset: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
public let deviceColorSpace: CoreGraphics.CGColorSpace
public func generateImagePixel(_ size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat, pixelGenerator: (CoreFoundation.CGSize, Swift.UnsafeMutablePointer<Swift.UInt8>, Swift.Int) -> Swift.Void) -> UIKit.UIImage?
public func generateGrayscaleAlphaMaskImage(image: UIKit.UIImage) -> UIKit.UIImage?
public func generateImage(_ size: CoreFoundation.CGSize, contextGenerator: (CoreFoundation.CGSize, CoreGraphics.CGContext) -> Swift.Void, opaque: Swift.Bool = false, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage?
public func generateImage(_ size: CoreFoundation.CGSize, opaque: Swift.Bool = false, scale: CoreFoundation.CGFloat? = nil, rotatedContext: (CoreFoundation.CGSize, CoreGraphics.CGContext) -> Swift.Void) -> UIKit.UIImage?
public func generateFilledCircleImage(diameter: CoreFoundation.CGFloat, color: UIKit.UIColor?, strokeColor: UIKit.UIColor? = nil, strokeWidth: CoreFoundation.CGFloat? = nil, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateFilledRoundedRectImage(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat, color: UIKit.UIColor?, strokeColor: UIKit.UIColor? = nil, strokeWidth: CoreFoundation.CGFloat? = nil, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateAdjustedStretchableFilledCircleImage(diameter: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIImage?
public func generateCircleImage(diameter: CoreFoundation.CGFloat, lineWidth: CoreFoundation.CGFloat, color: UIKit.UIColor?, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateStretchableFilledCircleImage(radius: CoreFoundation.CGFloat, color: UIKit.UIColor?, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateStretchableFilledCircleImage(diameter: CoreFoundation.CGFloat, color: UIKit.UIColor?, strokeColor: UIKit.UIColor? = nil, strokeWidth: CoreFoundation.CGFloat? = nil, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateVerticallyStretchableFilledCircleImage(radius: CoreFoundation.CGFloat, color: UIKit.UIColor?, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateSmallHorizontalStretchableFilledCircleImage(diameter: CoreFoundation.CGFloat, color: UIKit.UIColor?, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateTintedImage(image: UIKit.UIImage?, color: UIKit.UIColor, backgroundColor: UIKit.UIColor? = nil) -> UIKit.UIImage?
public func generateGradientTintedImage(image: UIKit.UIImage?, colors: [UIKit.UIColor]) -> UIKit.UIImage?
public enum GradientImageDirection {
  case vertical
  case horizontal
  case diagonal
  public static func == (a: OpenWeb3Lib.GradientImageDirection, b: OpenWeb3Lib.GradientImageDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func generateGradientImage(size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat = 0.0, colors: [UIKit.UIColor], locations: [CoreFoundation.CGFloat], direction: OpenWeb3Lib.GradientImageDirection = .vertical) -> UIKit.UIImage?
public func generateGradientFilledCircleImage(diameter: CoreFoundation.CGFloat, colors: Foundation.NSArray, direction: OpenWeb3Lib.GradientImageDirection = .vertical) -> UIKit.UIImage?
public func generateScaledImage(image: UIKit.UIImage?, size: CoreFoundation.CGSize, opaque: Swift.Bool = true, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage?
public func generateSingleColorImage(size: CoreFoundation.CGSize, color: UIKit.UIColor, scale: CoreFoundation.CGFloat = 0.0) -> UIKit.UIImage?
public enum DrawingContextBltMode {
  case Alpha
  public static func == (a: OpenWeb3Lib.DrawingContextBltMode, b: OpenWeb3Lib.DrawingContextBltMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func getSharedDevideGraphicsContextSettings() -> OpenWeb3Lib.DeviceGraphicsContextSettings
public struct DeviceGraphicsContextSettings {
  public static let shared: OpenWeb3Lib.DeviceGraphicsContextSettings
  public let rowAlignment: Swift.Int
  public let bitsPerPixel: Swift.Int
  public let bitsPerComponent: Swift.Int
  public let opaqueBitmapInfo: CoreGraphics.CGBitmapInfo
  public let transparentBitmapInfo: CoreGraphics.CGBitmapInfo
  public let colorSpace: CoreGraphics.CGColorSpace
  public func bytesPerRow(forWidth width: Swift.Int) -> Swift.Int
}
public class DrawingContext {
  final public let size: CoreFoundation.CGSize
  final public let scale: CoreFoundation.CGFloat
  final public let scaledSize: CoreFoundation.CGSize
  final public let bytesPerRow: Swift.Int
  final public let length: Swift.Int
  public var bytes: Swift.UnsafeMutableRawPointer {
    get
  }
  public func withContext(_ f: (CoreGraphics.CGContext) -> ())
  public func withFlippedContext(_ f: (CoreGraphics.CGContext) -> ())
  public init?(size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat = 0.0, opaque: Swift.Bool = false, clear: Swift.Bool = false, bytesPerRow: Swift.Int? = nil, colorSpace: CoreGraphics.CGColorSpace? = nil)
  public func generateImage(colorSpace: CoreGraphics.CGColorSpace? = nil) -> UIKit.UIImage?
  public func generatePixelBuffer() -> CoreVideo.CVPixelBuffer?
  public func colorAt(_ point: CoreFoundation.CGPoint) -> UIKit.UIColor
  public func blt(_ other: OpenWeb3Lib.DrawingContext, at: CoreFoundation.CGPoint, mode: OpenWeb3Lib.DrawingContextBltMode = .Alpha)
  @objc deinit
}
extension UIKit.UIImage {
  public var cvPixelBuffer: CoreVideo.CVPixelBuffer? {
    get
  }
  public var cmSampleBuffer: CoreMedia.CMSampleBuffer? {
    get
  }
}
public enum ParsingError : Swift.Error {
  case Generic
  public static func == (a: OpenWeb3Lib.ParsingError, b: OpenWeb3Lib.ParsingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func readCGFloat(_ index: inout Swift.UnsafePointer<Swift.UInt8>, end: Swift.UnsafePointer<Swift.UInt8>, separator: Swift.UInt8) throws -> CoreFoundation.CGFloat
public func drawSvgPath(_ context: CoreGraphics.CGContext, path: Swift.StaticString, strokeOnMove: Swift.Bool = false) throws
public func convertSvgPath(_ path: Swift.StaticString) throws -> CoreGraphics.CGPath
public struct ToolbarAction : Swift.Equatable {
  public enum Color : Swift.Equatable {
    case accent
    case custom(UIKit.UIColor)
    public static func == (a: OpenWeb3Lib.ToolbarAction.Color, b: OpenWeb3Lib.ToolbarAction.Color) -> Swift.Bool
  }
  public let title: Swift.String
  public let isEnabled: Swift.Bool
  public let color: OpenWeb3Lib.ToolbarAction.Color
  public init(title: Swift.String, isEnabled: Swift.Bool, color: OpenWeb3Lib.ToolbarAction.Color = .accent)
  public static func == (a: OpenWeb3Lib.ToolbarAction, b: OpenWeb3Lib.ToolbarAction) -> Swift.Bool
}
public struct Toolbar : Swift.Equatable {
  public let leftAction: OpenWeb3Lib.ToolbarAction?
  public let rightAction: OpenWeb3Lib.ToolbarAction?
  public let middleAction: OpenWeb3Lib.ToolbarAction?
  public init(leftAction: OpenWeb3Lib.ToolbarAction?, rightAction: OpenWeb3Lib.ToolbarAction?, middleAction: OpenWeb3Lib.ToolbarAction?)
  public static func == (a: OpenWeb3Lib.Toolbar, b: OpenWeb3Lib.Toolbar) -> Swift.Bool
}
public class ActionSheetTextItem : OpenWeb3Lib.ActionSheetItem {
  public enum Font {
    case `default`
    case large
    public static func == (a: OpenWeb3Lib.ActionSheetTextItem.Font, b: OpenWeb3Lib.ActionSheetTextItem.Font) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let title: Swift.String
  final public let font: OpenWeb3Lib.ActionSheetTextItem.Font
  final public let parseMarkdown: Swift.Bool
  public init(title: Swift.String, font: OpenWeb3Lib.ActionSheetTextItem.Font = .default, parseMarkdown: Swift.Bool = true)
  public func node(theme: OpenWeb3Lib.ActionSheetControllerTheme) -> OpenWeb3Lib.ActionSheetItemNode
  public func updateNode(_ node: OpenWeb3Lib.ActionSheetItemNode)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ActionSheetTextNode : OpenWeb3Lib.ActionSheetItemNode {
  override public init(theme: OpenWeb3Lib.ActionSheetControllerTheme)
  override public func updateLayout(constrainedSize: CoreFoundation.CGSize, transition: OpenWeb3Lib.ContainedViewLayoutTransition) -> CoreFoundation.CGSize
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SparseNode : OpenWeb3LibPrivite.ASDisplayNode {
  @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc override dynamic public init()
  @objc override dynamic public init(viewBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeViewBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc override dynamic public init(layerBlock: @escaping OpenWeb3LibPrivite.ASDisplayNodeLayerBlock, didLoad didLoadBlock: OpenWeb3LibPrivite.ASDisplayNodeDidLoadBlock? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class SparseContainerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class NavigationBarTheme {
  public static func generateBackArrowImage(color: UIKit.UIColor) -> UIKit.UIImage?
  final public let buttonColor: UIKit.UIColor
  final public let disabledButtonColor: UIKit.UIColor
  final public let primaryTextColor: UIKit.UIColor
  final public let backgroundColor: UIKit.UIColor
  final public let enableBackgroundBlur: Swift.Bool
  final public let separatorColor: UIKit.UIColor
  final public let badgeBackgroundColor: UIKit.UIColor
  final public let badgeStrokeColor: UIKit.UIColor
  final public let badgeTextColor: UIKit.UIColor
  public init(buttonColor: UIKit.UIColor, disabledButtonColor: UIKit.UIColor, primaryTextColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, enableBackgroundBlur: Swift.Bool, separatorColor: UIKit.UIColor, badgeBackgroundColor: UIKit.UIColor, badgeStrokeColor: UIKit.UIColor, badgeTextColor: UIKit.UIColor)
  final public func withUpdatedBackgroundColor(_ color: UIKit.UIColor) -> OpenWeb3Lib.NavigationBarTheme
  final public func withUpdatedSeparatorColor(_ color: UIKit.UIColor) -> OpenWeb3Lib.NavigationBarTheme
  @objc deinit
}
final public class NavigationBarStrings {
  final public let back: Swift.String
  final public let close: Swift.String
  public init(back: Swift.String, close: Swift.String)
  @objc deinit
}
final public class NavigationBarPresentationData {
  final public let resourceProvider: any OpenWeb3Lib.IResourceProvider
  final public let strings: OpenWeb3Lib.NavigationBarStrings
  final public let theme: OpenWeb3Lib.NavigationBarTheme?
  public init(resourceProvider: any OpenWeb3Lib.IResourceProvider, strings: OpenWeb3Lib.NavigationBarStrings, theme: OpenWeb3Lib.NavigationBarTheme? = nil)
  @objc deinit
}
public enum NavigationPreviousAction : Swift.Equatable {
  case item(UIKit.UINavigationItem)
  case close
  public static func == (lhs: OpenWeb3Lib.NavigationPreviousAction, rhs: OpenWeb3Lib.NavigationPreviousAction) -> Swift.Bool
}
@objc final public class NavigationBackgroundNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var bgColor: UIKit.UIColor {
    get
  }
  final public var effectView: UIKit.UIVisualEffectView?
  final public var backgroundView: UIKit.UIView {
    get
  }
  final public var backgroundCornerRadius: CoreFoundation.CGFloat {
    get
  }
  public init(color: UIKit.UIColor, enableBlur: Swift.Bool = true, enableSaturation: Swift.Bool = true)
  @objc override final public func didLoad()
  final public func updateColor(color: UIKit.UIColor, enableBlur: Swift.Bool? = nil, enableSaturation: Swift.Bool? = nil, forceKeepBlur: Swift.Bool = false, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  final public func update(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat = 0.0, transition: OpenWeb3Lib.ContainedViewLayoutTransition, beginWithCurrentState: Swift.Bool = true)
  final public func update(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat = 0.0, animator: any OpenWeb3Lib.ControlledTransitionAnimator)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class BlurredBackgroundView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var effectView: UIKit.UIVisualEffectView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var backgroundCornerRadius: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(color: UIKit.UIColor?, enableBlur: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func updateColor(color: UIKit.UIColor, enableBlur: Swift.Bool? = nil, forceKeepBlur: Swift.Bool = false, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency public func update(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat = 0.0, maskedCorners: QuartzCore.CACornerMask = [.layerMaxXMaxYCorner, .layerMaxXMinYCorner, .layerMinXMaxYCorner, .layerMinXMinYCorner], transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency public func update(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat = 0.0, animator: any OpenWeb3Lib.ControlledTransitionAnimator)
  @objc deinit
}
public protocol NavigationBarHeaderView : UIKit.UIView {
}
@objc open class NavigationBar : OpenWeb3LibPrivite.ASDisplayNode {
  public static var defaultSecondaryContentHeight: CoreFoundation.CGFloat {
    get
  }
  public static func backArrowImage(color: UIKit.UIColor) -> UIKit.UIImage?
  public static let thinBackArrowImage: UIKit.UIImage?
  public static let titleFont: UIKit.UIFont
  public var backPressed: () -> ()
  public var userInfo: Any?
  public var makeCustomTransitionNode: ((OpenWeb3Lib.NavigationBar, Swift.Bool) -> (any OpenWeb3Lib.CustomNavigationTransitionNode)?)?
  public var allowsCustomTransition: (() -> Swift.Bool)?
  public var customSetContentNode: ((OpenWeb3Lib.NavigationBarContentNode?, Swift.Bool) -> Swift.Void)?
  final public let stripeNode: OpenWeb3LibPrivite.ASDisplayNode
  final public let clippingNode: OpenWeb3Lib.SparseNode
  public var contentNode: OpenWeb3Lib.NavigationBarContentNode? {
    get
  }
  public var secondaryContentNode: OpenWeb3LibPrivite.ASDisplayNode? {
    get
  }
  public var secondaryContentNodeDisplayFraction: CoreFoundation.CGFloat
  public var item: UIKit.UINavigationItem? {
    get
    set(value)
  }
  public var customBackButtonText: Swift.String?
  public var titleView: UIKit.UIView? {
    get
  }
  public var customHeaderContentView: (any OpenWeb3Lib.NavigationBarHeaderView)? {
    get
    set
  }
  public var layoutSuspended: Swift.Bool
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open func didLoad()
  public var enableAutomaticBackButton: Swift.Bool
  public var previousItem: OpenWeb3Lib.NavigationPreviousAction? {
    get
  }
  final public let backgroundNode: OpenWeb3Lib.NavigationBackgroundNode
  final public let backButtonNode: OpenWeb3Lib.NavigationButtonNode
  final public let badgeNode: OpenWeb3Lib.NavigationBarBadgeNode
  final public let backButtonArrow: OpenWeb3Lib.ASImageNode
  final public let leftButtonNode: OpenWeb3Lib.NavigationButtonNode
  final public let rightButtonNode: OpenWeb3Lib.NavigationButtonNode
  final public let additionalContentNode: OpenWeb3Lib.SparseNode
  public func reattachAdditionalContentNode()
  public var secondaryContentHeight: CoreFoundation.CGFloat
  public init(presentationData: OpenWeb3Lib.NavigationBarPresentationData)
  public var isBackgroundVisible: Swift.Bool {
    get
  }
  public func updateBackgroundAlpha(_ alpha: CoreFoundation.CGFloat, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  public func updatePresentationData(_ presentationData: OpenWeb3Lib.NavigationBarPresentationData, transition: OpenWeb3Lib.ContainedViewLayoutTransition = .immediate)
  @objc override dynamic open func layout()
  public func makeTransitionTitleNode(foregroundColor: UIKit.UIColor) -> OpenWeb3LibPrivite.ASDisplayNode?
  public func makeTransitionBackButtonNode(accentColor: UIKit.UIColor) -> OpenWeb3Lib.NavigationButtonNode?
  public func makeTransitionBackButtonView(accentColor: UIKit.UIColor) -> UIKit.UIView?
  public func makeTransitionRightButtonNode(accentColor: UIKit.UIColor) -> OpenWeb3Lib.NavigationButtonNode?
  public func makeTransitionBackArrowNode(accentColor: UIKit.UIColor) -> OpenWeb3LibPrivite.ASDisplayNode?
  public func makeTransitionBackArrowView(accentColor: UIKit.UIColor) -> UIKit.UIView?
  public func makeTransitionBadgeNode() -> OpenWeb3LibPrivite.ASDisplayNode?
  public var intrinsicCanTransitionInline: Swift.Bool
  public var shouldTransitionInline: (() -> Swift.Bool)?
  public var passthroughTouches: Swift.Bool
  public var canTransitionInline: Swift.Bool {
    get
  }
  public func contentHeight(defaultHeight: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public func setContentNode(_ contentNode: OpenWeb3Lib.NavigationBarContentNode?, animated: Swift.Bool)
  public func setSecondaryContentNode(_ secondaryContentNode: OpenWeb3LibPrivite.ASDisplayNode?, animated: Swift.Bool = false)
  public func executeBack() -> Swift.Bool
  public func setHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
public protocol TooltipControllerCustomContentNode : OpenWeb3LibPrivite.ASDisplayNode {
  func animateIn()
  func updateLayout(size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
}
public enum TooltipControllerContent : Swift.Equatable {
  case text(Swift.String)
  case attributedText(Foundation.NSAttributedString)
  case iconAndText(UIKit.UIImage, Swift.String)
  case custom(any OpenWeb3Lib.TooltipControllerCustomContentNode)
  public static func == (lhs: OpenWeb3Lib.TooltipControllerContent, rhs: OpenWeb3Lib.TooltipControllerContent) -> Swift.Bool
}
public enum SourceAndRect {
  case node(() -> (OpenWeb3LibPrivite.ASDisplayNode, CoreFoundation.CGRect)?)
  case view(() -> (UIKit.UIView, CoreFoundation.CGRect)?)
}
final public class TooltipControllerPresentationArguments {
  final public let sourceAndRect: OpenWeb3Lib.SourceAndRect
  public init(sourceNodeAndRect: @escaping () -> (OpenWeb3LibPrivite.ASDisplayNode, CoreFoundation.CGRect)?)
  public init(sourceViewAndRect: @escaping () -> (UIKit.UIView, CoreFoundation.CGRect)?)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class TooltipController : OpenWeb3Lib.ViewController, OpenWeb3Lib.StandalonePresentableController {
  @_Concurrency.MainActor @preconcurrency public var content: OpenWeb3Lib.TooltipControllerContent {
    get
  }
  @_Concurrency.MainActor @preconcurrency open func updateContent(_ content: OpenWeb3Lib.TooltipControllerContent, animated: Swift.Bool, extendTimer: Swift.Bool, arrowOnBottom: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public var dismissed: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(content: OpenWeb3Lib.TooltipControllerContent, baseFontSize: CoreFoundation.CGFloat, balancedTextLayout: Swift.Bool = false, isBlurred: Swift.Bool = false, timeout: Swift.Double = 2.0, dismissByTapOutside: Swift.Bool = false, dismissByTapOutsideSource: Swift.Bool = false, dismissImmediatelyOnLayoutUpdate: Swift.Bool = false, arrowOnBottom: Swift.Bool = true, padding: CoreFoundation.CGFloat = 8.0, innerPadding: UIKit.UIEdgeInsets = UIEdgeInsets())
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency override open func loadDisplayNode()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open func containerLayoutUpdated(_ layout: OpenWeb3Lib.ContainerViewLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open func dismiss(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func dismissImmediately()
}
public enum GridNodeVisibleContentOffset {
  case known(CoreFoundation.CGFloat)
  case unknown
  case none
}
public struct GridNodeInsertItem {
  public let index: Swift.Int
  public let item: any OpenWeb3Lib.GridItem
  public let previousIndex: Swift.Int?
  public init(index: Swift.Int, item: any OpenWeb3Lib.GridItem, previousIndex: Swift.Int?)
}
public struct GridNodeUpdateItem {
  public let index: Swift.Int
  public let previousIndex: Swift.Int
  public let item: any OpenWeb3Lib.GridItem
  public init(index: Swift.Int, previousIndex: Swift.Int, item: any OpenWeb3Lib.GridItem)
}
public enum GridNodeScrollToItemPosition {
  case top(CoreFoundation.CGFloat)
  case bottom(CoreFoundation.CGFloat)
  case center(CoreFoundation.CGFloat)
  case visible
}
public struct GridNodeScrollToItem {
  public let index: Swift.Int
  public let position: OpenWeb3Lib.GridNodeScrollToItemPosition
  public let transition: OpenWeb3Lib.ContainedViewLayoutTransition
  public let directionHint: OpenWeb3Lib.GridNodePreviousItemsTransitionDirectionHint
  public let adjustForSection: Swift.Bool
  public let adjustForTopInset: Swift.Bool
  public init(index: Swift.Int, position: OpenWeb3Lib.GridNodeScrollToItemPosition, transition: OpenWeb3Lib.ContainedViewLayoutTransition, directionHint: OpenWeb3Lib.GridNodePreviousItemsTransitionDirectionHint, adjustForSection: Swift.Bool, adjustForTopInset: Swift.Bool = false)
}
public enum GridNodeLayoutType : Swift.Equatable {
  case fixed(itemSize: CoreFoundation.CGSize, fillWidth: Swift.Bool?, lineSpacing: CoreFoundation.CGFloat, itemSpacing: CoreFoundation.CGFloat?)
  case balanced(idealHeight: CoreFoundation.CGFloat)
  public static func == (a: OpenWeb3Lib.GridNodeLayoutType, b: OpenWeb3Lib.GridNodeLayoutType) -> Swift.Bool
}
public struct GridNodeLayout : Swift.Equatable {
  public let size: CoreFoundation.CGSize
  public let insets: UIKit.UIEdgeInsets
  public let scrollIndicatorInsets: UIKit.UIEdgeInsets?
  public let preloadSize: CoreFoundation.CGFloat
  public let type: OpenWeb3Lib.GridNodeLayoutType
  public let cutout: CoreFoundation.CGRect?
  public init(size: CoreFoundation.CGSize, insets: UIKit.UIEdgeInsets, scrollIndicatorInsets: UIKit.UIEdgeInsets? = nil, preloadSize: CoreFoundation.CGFloat, type: OpenWeb3Lib.GridNodeLayoutType, cutout: CoreFoundation.CGRect? = nil)
  public static func == (a: OpenWeb3Lib.GridNodeLayout, b: OpenWeb3Lib.GridNodeLayout) -> Swift.Bool
}
public struct GridNodeUpdateLayout {
  public let layout: OpenWeb3Lib.GridNodeLayout
  public let transition: OpenWeb3Lib.ContainedViewLayoutTransition
  public init(layout: OpenWeb3Lib.GridNodeLayout, transition: OpenWeb3Lib.ContainedViewLayoutTransition)
}
public enum GridNodeStationaryItems {
  case none
  case all
  case indices(Swift.Set<Swift.Int>)
}
public struct GridNodeTransaction {
  public let deleteItems: [Swift.Int]
  public let insertItems: [OpenWeb3Lib.GridNodeInsertItem]
  public let updateItems: [OpenWeb3Lib.GridNodeUpdateItem]
  public let scrollToItem: OpenWeb3Lib.GridNodeScrollToItem?
  public let updateLayout: OpenWeb3Lib.GridNodeUpdateLayout?
  public let itemTransition: OpenWeb3Lib.ContainedViewLayoutTransition
  public let stationaryItems: OpenWeb3Lib.GridNodeStationaryItems
  public let updateFirstIndexInSectionOffset: Swift.Int?
  public let updateOpaqueState: Any?
  public let synchronousLoads: Swift.Bool
  public init(deleteItems: [Swift.Int], insertItems: [OpenWeb3Lib.GridNodeInsertItem], updateItems: [OpenWeb3Lib.GridNodeUpdateItem], scrollToItem: OpenWeb3Lib.GridNodeScrollToItem?, updateLayout: OpenWeb3Lib.GridNodeUpdateLayout?, itemTransition: OpenWeb3Lib.ContainedViewLayoutTransition, stationaryItems: OpenWeb3Lib.GridNodeStationaryItems, updateFirstIndexInSectionOffset: Swift.Int?, updateOpaqueState: Any? = nil, synchronousLoads: Swift.Bool = false)
}
public enum GridNodePreviousItemsTransitionDirectionHint {
  case up
  case down
  public static func == (a: OpenWeb3Lib.GridNodePreviousItemsTransitionDirectionHint, b: OpenWeb3Lib.GridNodePreviousItemsTransitionDirectionHint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GridNodeCurrentPresentationLayout {
  public let layout: OpenWeb3Lib.GridNodeLayout
  public let contentOffset: CoreFoundation.CGPoint
  public let contentSize: CoreFoundation.CGSize
}
public struct GridNodeDisplayedItemRange : Swift.Equatable {
  public let loadedRange: Swift.Range<Swift.Int>?
  public let visibleRange: Swift.Range<Swift.Int>?
  public static func == (a: OpenWeb3Lib.GridNodeDisplayedItemRange, b: OpenWeb3Lib.GridNodeDisplayedItemRange) -> Swift.Bool
}
public struct GridNodeVisibleItems {
  public let top: (Swift.Int, any OpenWeb3Lib.GridItem)?
  public let bottom: (Swift.Int, any OpenWeb3Lib.GridItem)?
  public let topVisible: (Swift.Int, any OpenWeb3Lib.GridItem)?
  public let bottomVisible: (Swift.Int, any OpenWeb3Lib.GridItem)?
  public let topSectionVisible: (any OpenWeb3Lib.GridSection)?
  public let count: Swift.Int
}
@objc @_inheritsConvenienceInitializers open class GridNode : OpenWeb3Lib.GridNodeScroller, OpenWeb3LibPrivite.ASScrollViewDelegate {
  public var gridLayout: OpenWeb3Lib.GridNodeLayout {
    get
  }
  public var items: [any OpenWeb3Lib.GridItem] {
    get
  }
  public var setupNode: ((OpenWeb3Lib.GridItemNode) -> Swift.Void)?
  public var visibleItemsUpdated: ((OpenWeb3Lib.GridNodeVisibleItems) -> Swift.Void)?
  public var presentationLayoutUpdated: ((OpenWeb3Lib.GridNodeCurrentPresentationLayout, OpenWeb3Lib.ContainedViewLayoutTransition) -> Swift.Void)?
  public var scrollingInitiated: (() -> Swift.Void)?
  public var scrollingCompleted: (() -> Swift.Void)?
  public var interactiveScrollingEnded: (() -> Swift.Void)?
  public var interactiveScrollingWillBeEnded: ((CoreFoundation.CGPoint, CoreFoundation.CGPoint, CoreFoundation.CGPoint) -> CoreFoundation.CGPoint)?
  public var visibleContentOffsetChanged: (OpenWeb3Lib.GridNodeVisibleContentOffset) -> Swift.Void
  final public var floatingSections: Swift.Bool
  final public var initialOffset: CoreFoundation.CGFloat
  public var showVerticalScrollIndicator: Swift.Bool {
    get
    set
  }
  public var indicatorStyle: UIKit.UIScrollView.IndicatorStyle {
    get
    set
  }
  public var opaqueState: Any? {
    get
  }
  @objc dynamic public init()
  required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  public func transaction(_ transaction: OpenWeb3Lib.GridNodeTransaction, completion: (OpenWeb3Lib.GridNodeDisplayedItemRange) -> Swift.Void)
  public func autoscroll(toOffset: CoreFoundation.CGPoint, duration: Swift.Double)
  @objc public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @objc public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  public func lowestSectionNode() -> OpenWeb3LibPrivite.ASDisplayNode?
  public var forceHidden: Swift.Bool {
    get
    set
  }
  public func visibleContentOffset() -> OpenWeb3Lib.GridNodeVisibleContentOffset
  public func forEachItemNode(_ f: (OpenWeb3LibPrivite.ASDisplayNode) -> Swift.Void)
  public func forEachRow(_ f: ([OpenWeb3LibPrivite.ASDisplayNode]) -> Swift.Void)
  public func itemNodeAtPoint(_ point: CoreFoundation.CGPoint) -> OpenWeb3LibPrivite.ASDisplayNode?
}
@objc final public class ContextMenuContainerNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public let containerNode: OpenWeb3LibPrivite.ASDisplayNode
  final public var relativeArrowPosition: (CoreFoundation.CGFloat, Swift.Bool)?
  public init(isBlurred: Swift.Bool, isDark: Swift.Bool)
  @objc override final public func didLoad()
  @objc override final public func layout()
  final public func updateLayout(transition: OpenWeb3Lib.ContainedViewLayoutTransition)
  @objc deinit
}
public func generateRectsImage(color: UIKit.UIColor, rects: [CoreFoundation.CGRect], inset: CoreFoundation.CGFloat, outerRadius: CoreFoundation.CGFloat, innerRadius: CoreFoundation.CGFloat, stroke: Swift.Bool = false, strokeWidth: CoreFoundation.CGFloat = 2.0, useModernPathCalculation: Swift.Bool) -> (CoreFoundation.CGPoint, UIKit.UIImage?)
@objc final public class LinkHighlightingNode : OpenWeb3LibPrivite.ASDisplayNode {
  final public var rects: [CoreFoundation.CGRect] {
    get
  }
  final public let imageNode: OpenWeb3Lib.ASImageNode
  final public var innerRadius: CoreFoundation.CGFloat
  final public var outerRadius: CoreFoundation.CGFloat
  final public var inset: CoreFoundation.CGFloat
  final public var useModernPathCalculation: Swift.Bool
  final public var borderOnly: Swift.Bool
  final public var strokeWidth: CoreFoundation.CGFloat
  final public var color: UIKit.UIColor {
    get
    set(value)
  }
  public init(color: UIKit.UIColor)
  final public func updateRects(_ rects: [CoreFoundation.CGRect], color: UIKit.UIColor? = nil)
  public static func generateImage(color: UIKit.UIColor, inset: CoreFoundation.CGFloat, innerRadius: CoreFoundation.CGFloat, outerRadius: CoreFoundation.CGFloat, rects: [CoreFoundation.CGRect], useModernPathCalculation: Swift.Bool) -> (CoreFoundation.CGPoint, UIKit.UIImage)?
  final public func asyncLayout() -> (UIKit.UIColor, [CoreFoundation.CGRect], CoreFoundation.CGFloat, CoreFoundation.CGFloat, CoreFoundation.CGFloat) -> () -> Swift.Void
  @objc deinit
}
extension OpenWeb3Lib.Font.Design : Swift.Equatable {}
extension OpenWeb3Lib.Font.Design : Swift.Hashable {}
extension OpenWeb3Lib.Font.Width : Swift.Equatable {}
extension OpenWeb3Lib.Font.Width : Swift.Hashable {}
extension OpenWeb3Lib.Font.Weight : Swift.Equatable {}
extension OpenWeb3Lib.Font.Weight : Swift.Hashable {}
extension OpenWeb3Lib.DeviceType : Swift.Equatable {}
extension OpenWeb3Lib.DeviceType : Swift.Hashable {}
extension OpenWeb3Lib.NavigationStatusBarStyle : Swift.Equatable {}
extension OpenWeb3Lib.NavigationStatusBarStyle : Swift.Hashable {}
extension OpenWeb3Lib.NavigationControllerMode : Swift.Equatable {}
extension OpenWeb3Lib.NavigationControllerMode : Swift.Hashable {}
extension OpenWeb3Lib.MasterDetailLayoutBlackout : Swift.Hashable {}
extension OpenWeb3Lib.WindowUserInterfaceStyle : Swift.Equatable {}
extension OpenWeb3Lib.WindowUserInterfaceStyle : Swift.Hashable {}
extension OpenWeb3Lib.ContextControllerSourceNode.ShouldBegin : Swift.Equatable {}
extension OpenWeb3Lib.ContextControllerSourceNode.ShouldBegin : Swift.Hashable {}
extension OpenWeb3Lib.AlertControllerThemeBackgroundType : Swift.Equatable {}
extension OpenWeb3Lib.AlertControllerThemeBackgroundType : Swift.Hashable {}
extension OpenWeb3Lib.AtomicLockError : Swift.Equatable {}
extension OpenWeb3Lib.AtomicLockError : Swift.Hashable {}
extension OpenWeb3Lib.PresentationThemeStatusBarStyle : Swift.Equatable {}
extension OpenWeb3Lib.PresentationThemeStatusBarStyle : Swift.Hashable {}
extension OpenWeb3Lib.PresentationThemeStatusBarStyle : Swift.RawRepresentable {}
extension OpenWeb3Lib.PresentationThemeActionSheetBackgroundType : Swift.Equatable {}
extension OpenWeb3Lib.PresentationThemeActionSheetBackgroundType : Swift.Hashable {}
extension OpenWeb3Lib.PresentationThemeActionSheetBackgroundType : Swift.RawRepresentable {}
extension OpenWeb3Lib.PresentationThemeKeyboardColor : Swift.Equatable {}
extension OpenWeb3Lib.PresentationThemeKeyboardColor : Swift.Hashable {}
extension OpenWeb3Lib.PresentationThemeKeyboardColor : Swift.RawRepresentable {}
extension OpenWeb3Lib.PresentationThemeExpandedNotificationBackgroundType : Swift.Equatable {}
extension OpenWeb3Lib.PresentationThemeExpandedNotificationBackgroundType : Swift.Hashable {}
extension OpenWeb3Lib.PresentationThemeExpandedNotificationBackgroundType : Swift.RawRepresentable {}
extension OpenWeb3Lib.PresentationThemeBuiltinName : Swift.Equatable {}
extension OpenWeb3Lib.PresentationThemeBuiltinName : Swift.Hashable {}
extension OpenWeb3Lib.PresentationThemeDecodingError : Swift.Equatable {}
extension OpenWeb3Lib.PresentationThemeDecodingError : Swift.Hashable {}
extension OpenWeb3Lib.PresentationBuiltinThemeReference : Swift.Equatable {}
extension OpenWeb3Lib.PresentationBuiltinThemeReference : Swift.Hashable {}
extension OpenWeb3Lib.PresentationBuiltinThemeReference : Swift.RawRepresentable {}
extension OpenWeb3Lib.WebAppCancelButtonNode.State : Swift.Equatable {}
extension OpenWeb3Lib.WebAppCancelButtonNode.State : Swift.Hashable {}
extension OpenWeb3Lib.KeepWebViewError : Swift.Equatable {}
extension OpenWeb3Lib.KeepWebViewError : Swift.Hashable {}
extension OpenWeb3Lib.TimeIntervalStringUsage : Swift.Equatable {}
extension OpenWeb3Lib.TimeIntervalStringUsage : Swift.Hashable {}
extension OpenWeb3Lib.TapLongTapOrDoubleTapGesture : Swift.Equatable {}
extension OpenWeb3Lib.TapLongTapOrDoubleTapGesture : Swift.Hashable {}
extension OpenWeb3Lib.PresentationResourceKey : Swift.Equatable {}
extension OpenWeb3Lib.PresentationResourceKey : Swift.Hashable {}
extension OpenWeb3Lib.PresentationResourceKey : Swift.RawRepresentable {}
extension OpenWeb3Lib.TextAlertActionType : Swift.Equatable {}
extension OpenWeb3Lib.TextAlertActionType : Swift.Hashable {}
extension OpenWeb3Lib.TextAlertContentActionLayout : Swift.Equatable {}
extension OpenWeb3Lib.TextAlertContentActionLayout : Swift.Hashable {}
extension OpenWeb3Lib.Transition.DisappearWithGuide.Stage : Swift.Equatable {}
extension OpenWeb3Lib.Transition.DisappearWithGuide.Stage : Swift.Hashable {}
extension OpenWeb3Lib.StatusBarStyle : Swift.Equatable {}
extension OpenWeb3Lib.StatusBarStyle : Swift.Hashable {}
extension OpenWeb3Lib.ActionSheetCheckboxStyle : Swift.Equatable {}
extension OpenWeb3Lib.ActionSheetCheckboxStyle : Swift.Hashable {}
extension OpenWeb3Lib.PresentationTimeFormat : Swift.Equatable {}
extension OpenWeb3Lib.PresentationTimeFormat : Swift.Hashable {}
extension OpenWeb3Lib.PresentationDateFormat : Swift.Equatable {}
extension OpenWeb3Lib.PresentationDateFormat : Swift.Hashable {}
extension OpenWeb3Lib.ContactsSortOrder : Swift.Equatable {}
extension OpenWeb3Lib.ContactsSortOrder : Swift.Hashable {}
extension OpenWeb3Lib.ContactsSortOrder : Swift.RawRepresentable {}
extension OpenWeb3Lib.PresentationPersonNameOrder : Swift.Equatable {}
extension OpenWeb3Lib.PresentationPersonNameOrder : Swift.Hashable {}
extension OpenWeb3Lib.PresentationPersonNameOrder : Swift.RawRepresentable {}
extension OpenWeb3Lib.TextNodeCutoutPosition : Swift.Equatable {}
extension OpenWeb3Lib.TextNodeCutoutPosition : Swift.Hashable {}
extension OpenWeb3Lib.TextVerticalAlignment : Swift.Equatable {}
extension OpenWeb3Lib.TextVerticalAlignment : Swift.Hashable {}
extension OpenWeb3Lib.PromptControllerTitleFont : Swift.Equatable {}
extension OpenWeb3Lib.PromptControllerTitleFont : Swift.Hashable {}
extension OpenWeb3Lib.PluralizationForm : Swift.Equatable {}
extension OpenWeb3Lib.PluralizationForm : Swift.Hashable {}
extension OpenWeb3Lib.PluralizationForm : Swift.RawRepresentable {}
extension OpenWeb3Lib.ContainerViewLayoutSizeClass : Swift.Equatable {}
extension OpenWeb3Lib.ContainerViewLayoutSizeClass : Swift.Hashable {}
extension OpenWeb3Lib.LayoutOrientation : Swift.Equatable {}
extension OpenWeb3Lib.LayoutOrientation : Swift.Hashable {}
extension OpenWeb3Lib.NavigationBarContentMode : Swift.Equatable {}
extension OpenWeb3Lib.NavigationBarContentMode : Swift.Hashable {}
extension OpenWeb3Lib.ToolbarActionOption : Swift.Equatable {}
extension OpenWeb3Lib.ToolbarActionOption : Swift.Hashable {}
extension OpenWeb3Lib.AttachmentMainButtonState.Progress : Swift.Hashable {}
extension OpenWeb3Lib.AttachmentMainButtonState.Font : Swift.Hashable {}
extension OpenWeb3Lib.ListViewScrollDirection : Swift.Equatable {}
extension OpenWeb3Lib.ListViewScrollDirection : Swift.Hashable {}
extension OpenWeb3Lib.GeneralScrollDirection : Swift.Equatable {}
extension OpenWeb3Lib.GeneralScrollDirection : Swift.Hashable {}
extension OpenWeb3Lib.Gesture.LongPressGestureState : Swift.Equatable {}
extension OpenWeb3Lib.Gesture.LongPressGestureState : Swift.Hashable {}
extension OpenWeb3Lib.ListViewItemHeaderStickDirection : Swift.Equatable {}
extension OpenWeb3Lib.ListViewItemHeaderStickDirection : Swift.Hashable {}
extension OpenWeb3Lib.PresentationFontSize : Swift.Equatable {}
extension OpenWeb3Lib.PresentationFontSize : Swift.Hashable {}
extension OpenWeb3Lib.PresentationFontSize : Swift.RawRepresentable {}
extension OpenWeb3Lib.PresentationThemeBaseColor : Swift.Equatable {}
extension OpenWeb3Lib.PresentationThemeBaseColor : Swift.Hashable {}
extension OpenWeb3Lib.PresentationThemeBaseColor : Swift.RawRepresentable {}
extension OpenWeb3Lib.DirectionalPanGestureRecognizer.Direction : Swift.Equatable {}
extension OpenWeb3Lib.DirectionalPanGestureRecognizer.Direction : Swift.Hashable {}
extension OpenWeb3Lib.ActionSheetButtonColor : Swift.Equatable {}
extension OpenWeb3Lib.ActionSheetButtonColor : Swift.Hashable {}
extension OpenWeb3Lib.ActionSheetButtonFont : Swift.Equatable {}
extension OpenWeb3Lib.ActionSheetButtonFont : Swift.Hashable {}
extension OpenWeb3Lib.WindowKeyboardGestureRecognizerDelegate : Swift.Sendable {}
extension OpenWeb3Lib.LegacyPresentedControllerPresentation : Swift.Equatable {}
extension OpenWeb3Lib.LegacyPresentedControllerPresentation : Swift.Hashable {}
extension OpenWeb3Lib.TelegramBaseTheme : Swift.Equatable {}
extension OpenWeb3Lib.TelegramBaseTheme : Swift.Hashable {}
extension OpenWeb3Lib.TelegramBaseTheme : Swift.RawRepresentable {}
extension OpenWeb3Lib.TabBarItemSwipeDirection : Swift.Equatable {}
extension OpenWeb3Lib.TabBarItemSwipeDirection : Swift.Hashable {}
extension OpenWeb3Lib.ActionSheetControllerThemeBackgroundType : Swift.Equatable {}
extension OpenWeb3Lib.ActionSheetControllerThemeBackgroundType : Swift.Hashable {}
extension OpenWeb3Lib.ListViewScrollToItemDirectionHint : Swift.Equatable {}
extension OpenWeb3Lib.ListViewScrollToItemDirectionHint : Swift.Hashable {}
extension OpenWeb3Lib.ListViewItemOperationDirectionHint : Swift.Equatable {}
extension OpenWeb3Lib.ListViewItemOperationDirectionHint : Swift.Hashable {}
extension OpenWeb3Lib.LocalAuthBiometricAuthentication : Swift.Equatable {}
extension OpenWeb3Lib.LocalAuthBiometricAuthentication : Swift.Hashable {}
extension OpenWeb3Lib.LocalAuth.DecryptionResult.Error : Swift.Equatable {}
extension OpenWeb3Lib.LocalAuth.DecryptionResult.Error : Swift.Hashable {}
extension OpenWeb3Lib.ValueBoxKeyType : Swift.Equatable {}
extension OpenWeb3Lib.ValueBoxKeyType : Swift.Hashable {}
extension OpenWeb3Lib.ValueBoxKeyType : Swift.RawRepresentable {}
extension OpenWeb3Lib.ValueBoxFilterResult : Swift.Equatable {}
extension OpenWeb3Lib.ValueBoxFilterResult : Swift.Hashable {}
extension OpenWeb3Lib.AttachmentButtonType : Swift.Hashable {}
extension OpenWeb3Lib.AttachmentMediaPickerSendMode : Swift.Equatable {}
extension OpenWeb3Lib.AttachmentMediaPickerSendMode : Swift.Hashable {}
extension OpenWeb3Lib.AttachmentMediaPickerAttachmentMode : Swift.Equatable {}
extension OpenWeb3Lib.AttachmentMediaPickerAttachmentMode : Swift.Hashable {}
extension OpenWeb3Lib.ViewControllerPresentationAnimation : Swift.Equatable {}
extension OpenWeb3Lib.ViewControllerPresentationAnimation : Swift.Hashable {}
extension OpenWeb3Lib.ViewControllerNavigationPresentation : Swift.Equatable {}
extension OpenWeb3Lib.ViewControllerNavigationPresentation : Swift.Hashable {}
extension OpenWeb3Lib.TabBarItemContextActionType : Swift.Equatable {}
extension OpenWeb3Lib.TabBarItemContextActionType : Swift.Hashable {}
extension OpenWeb3Lib.Source : Swift.Equatable {}
extension OpenWeb3Lib.Source : Swift.Hashable {}
extension OpenWeb3Lib.OverlayStatusControllerStyle : Swift.Equatable {}
extension OpenWeb3Lib.OverlayStatusControllerStyle : Swift.Hashable {}
extension OpenWeb3Lib.CloudPeerPhotoSizeSpec : Swift.Equatable {}
extension OpenWeb3Lib.CloudPeerPhotoSizeSpec : Swift.Hashable {}
extension OpenWeb3Lib.CloudPeerPhotoSizeSpec : Swift.RawRepresentable {}
extension OpenWeb3Lib.PluginName : Swift.Equatable {}
extension OpenWeb3Lib.PluginName : Swift.Hashable {}
extension OpenWeb3Lib.PluginName : Swift.RawRepresentable {}
extension OpenWeb3Lib.GradientImageDirection : Swift.Equatable {}
extension OpenWeb3Lib.GradientImageDirection : Swift.Hashable {}
extension OpenWeb3Lib.DrawingContextBltMode : Swift.Equatable {}
extension OpenWeb3Lib.DrawingContextBltMode : Swift.Hashable {}
extension OpenWeb3Lib.ParsingError : Swift.Equatable {}
extension OpenWeb3Lib.ParsingError : Swift.Hashable {}
extension OpenWeb3Lib.ActionSheetTextItem.Font : Swift.Equatable {}
extension OpenWeb3Lib.ActionSheetTextItem.Font : Swift.Hashable {}
extension OpenWeb3Lib.GridNodePreviousItemsTransitionDirectionHint : Swift.Equatable {}
extension OpenWeb3Lib.GridNodePreviousItemsTransitionDirectionHint : Swift.Hashable {}
